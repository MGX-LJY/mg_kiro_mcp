{
  "overview": {
    "totalFiles": 77,
    "analyzedFiles": 77,
    "skippedFiles": 0,
    "totalLines": 39325,
    "codeLines": 27943,
    "commentLines": 6174,
    "blankLines": 5483,
    "averageLinesPerFile": 511,
    "averageFunctionsPerFile": 13
  },
  "languages": {
    "JavaScript": {
      "files": 77,
      "lines": 39325,
      "functions": 968,
      "classes": 25
    },
    "TypeScript": {
      "files": 0,
      "lines": 0,
      "functions": 0,
      "classes": 0
    },
    "JSON": {
      "files": 0,
      "lines": 0
    },
    "Markdown": {
      "files": 0,
      "lines": 0
    }
  },
  "functions": [
    {
      "name": "constructor",
      "parameters": [],
      "line": 10,
      "isAsync": false,
      "isExported": false,
      "complexity": 70,
      "length": 4,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "analyzeProject",
      "parameters": [
        "files"
      ],
      "line": 20,
      "isAsync": true,
      "isExported": false,
      "complexity": 2738,
      "length": 83,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_analyzeFile",
      "parameters": [
        "file"
      ],
      "line": 109,
      "isAsync": true,
      "isExported": false,
      "complexity": 1817,
      "length": 61,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_analyzeLines",
      "parameters": [
        "content",
        "fileAnalysis"
      ],
      "line": 174,
      "isAsync": false,
      "isExported": false,
      "complexity": 1494,
      "length": 52,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_extractFunctions",
      "parameters": [
        "content",
        "fileAnalysis"
      ],
      "line": 230,
      "isAsync": false,
      "isExported": false,
      "complexity": 4028,
      "length": 105,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_extractClasses",
      "parameters": [
        "content",
        "fileAnalysis"
      ],
      "line": 281,
      "isAsync": false,
      "isExported": false,
      "complexity": 1194,
      "length": 34,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_analyzeImportsExports",
      "parameters": [
        "content",
        "fileAnalysis"
      ],
      "line": 310,
      "isAsync": false,
      "isExported": false,
      "complexity": 88,
      "length": 4,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_analyzeVariables",
      "parameters": [
        "content",
        "fileAnalysis"
      ],
      "line": 357,
      "isAsync": false,
      "isExported": false,
      "complexity": 527,
      "length": 15,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_calculateComplexity",
      "parameters": [
        "content",
        "fileAnalysis"
      ],
      "line": 376,
      "isAsync": false,
      "isExported": false,
      "complexity": 1825,
      "length": 54,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_analyzeCodeQuality",
      "parameters": [
        "content",
        "fileAnalysis"
      ],
      "line": 434,
      "isAsync": false,
      "isExported": false,
      "complexity": 957,
      "length": 31,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "func => {\n            if (func.length > 50"
      ],
      "line": 438,
      "isAsync": false,
      "isExported": false,
      "complexity": 343,
      "length": 11,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_identifyPatterns",
      "parameters": [
        "content",
        "fileAnalysis"
      ],
      "line": 469,
      "isAsync": false,
      "isExported": false,
      "complexity": 9082,
      "length": 272,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_getLineNumber",
      "parameters": [
        "content",
        "index"
      ],
      "line": 506,
      "isAsync": false,
      "isExported": false,
      "complexity": 70,
      "length": 3,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_extractFunctionBody",
      "parameters": [
        "content",
        "startIndex"
      ],
      "line": 513,
      "isAsync": false,
      "isExported": false,
      "complexity": 7794,
      "length": 228,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_extractClassBody",
      "parameters": [
        "content",
        "startIndex"
      ],
      "line": 534,
      "isAsync": false,
      "isExported": false,
      "complexity": 81,
      "length": 3,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_analyzeClassMembers",
      "parameters": [
        "classBody",
        "classInfo"
      ],
      "line": 541,
      "isAsync": false,
      "isExported": false,
      "complexity": 7097,
      "length": 198,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_calculateFunctionComplexity",
      "parameters": [
        "functionBody"
      ],
      "line": 566,
      "isAsync": false,
      "isExported": false,
      "complexity": 650,
      "length": 19,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_determineScope",
      "parameters": [
        "content",
        "index"
      ],
      "line": 589,
      "isAsync": false,
      "isExported": false,
      "complexity": 360,
      "length": 9,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_detectDuplicateCode",
      "parameters": [
        "lines",
        "fileAnalysis"
      ],
      "line": 602,
      "isAsync": false,
      "isExported": false,
      "complexity": 640,
      "length": 19,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_calculateMaintainabilityIndex",
      "parameters": [
        "fileAnalysis"
      ],
      "line": 625,
      "isAsync": false,
      "isExported": false,
      "complexity": 351,
      "length": 12,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_mergeFileAnalysis",
      "parameters": [
        "analysis",
        "fileAnalysis",
        "file"
      ],
      "line": 641,
      "isAsync": false,
      "isExported": false,
      "complexity": 3129,
      "length": 77,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "imp => {\n            if (imp.isExternal"
      ],
      "line": 678,
      "isAsync": false,
      "isExported": false,
      "complexity": 448,
      "length": 11,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "func => {\n            if (func.length > 30"
      ],
      "line": 699,
      "isAsync": false,
      "isExported": false,
      "complexity": 297,
      "length": 10,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "pattern => {\n            if (!analysis.patterns.frameworkUsage[pattern]"
      ],
      "line": 711,
      "isAsync": false,
      "isExported": false,
      "complexity": 208,
      "length": 6,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "_calculateMetrics",
      "parameters": [
        "analysis"
      ],
      "line": 722,
      "isAsync": false,
      "isExported": false,
      "complexity": 817,
      "length": 16,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "testUltraDetailedAnalyzer",
      "parameters": [],
      "line": 13,
      "isAsync": false,
      "isExported": false,
      "complexity": 6506,
      "length": 144,
      "file": "test-ultra-detailed-analyzer.js"
    },
    {
      "name": "testEnhancedRealAIContent",
      "parameters": [],
      "line": 13,
      "isAsync": false,
      "isExported": false,
      "complexity": 5909,
      "length": 135,
      "file": "test-enhanced-real-ai-content.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 7,
      "isAsync": false,
      "isExported": false,
      "complexity": 41,
      "length": 3,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "initialize",
      "parameters": [],
      "line": 11,
      "isAsync": true,
      "isExported": false,
      "complexity": 159,
      "length": 6,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "generateRealProjectOverview",
      "parameters": [
        "realScanData"
      ],
      "line": 23,
      "isAsync": true,
      "isExported": false,
      "complexity": 2832,
      "length": 111,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "generateRealAPIDocumentation",
      "parameters": [
        "realScanData"
      ],
      "line": 140,
      "isAsync": true,
      "isExported": false,
      "complexity": 1312,
      "length": 72,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "generateRealModuleArchitecture",
      "parameters": [
        "realScanData"
      ],
      "line": 218,
      "isAsync": true,
      "isExported": false,
      "complexity": 1959,
      "length": 80,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_generateFileTypeTable",
      "parameters": [
        "filesByExtension"
      ],
      "line": 301,
      "isAsync": false,
      "isExported": false,
      "complexity": 540,
      "length": 15,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_getFileTypeDescription",
      "parameters": [
        "ext"
      ],
      "line": 317,
      "isAsync": false,
      "isExported": false,
      "complexity": 412,
      "length": 15,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_generateDirectoryTree",
      "parameters": [
        "directories"
      ],
      "line": 333,
      "isAsync": false,
      "isExported": false,
      "complexity": 224,
      "length": 7,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_formatLargestFiles",
      "parameters": [
        "largestFiles"
      ],
      "line": 341,
      "isAsync": false,
      "isExported": false,
      "complexity": 266,
      "length": 10,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_formatRecentFiles",
      "parameters": [
        "recentFiles"
      ],
      "line": 352,
      "isAsync": false,
      "isExported": false,
      "complexity": 270,
      "length": 10,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_formatPackageScripts",
      "parameters": [
        "scripts"
      ],
      "line": 363,
      "isAsync": false,
      "isExported": false,
      "complexity": 394,
      "length": 12,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_getScriptDescription",
      "parameters": [
        "scriptName"
      ],
      "line": 376,
      "isAsync": false,
      "isExported": false,
      "complexity": 289,
      "length": 11,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_countCodeFiles",
      "parameters": [
        "filesByExtension"
      ],
      "line": 388,
      "isAsync": false,
      "isExported": false,
      "complexity": 233,
      "length": 6,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_calculateAverageFileSize",
      "parameters": [
        "files"
      ],
      "line": 395,
      "isAsync": false,
      "isExported": false,
      "complexity": 212,
      "length": 5,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_calculateCodeDensity",
      "parameters": [
        "statistics"
      ],
      "line": 401,
      "isAsync": false,
      "isExported": false,
      "complexity": 243,
      "length": 7,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_generateQualityAssessment",
      "parameters": [
        "realScanData"
      ],
      "line": 409,
      "isAsync": false,
      "isExported": false,
      "complexity": 917,
      "length": 27,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_analyzeConfigurationFiles",
      "parameters": [
        "configuration"
      ],
      "line": 437,
      "isAsync": false,
      "isExported": false,
      "complexity": 410,
      "length": 12,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_getConfigDescription",
      "parameters": [
        "configName"
      ],
      "line": 450,
      "isAsync": false,
      "isExported": false,
      "complexity": 353,
      "length": 11,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_generateDevelopmentCommands",
      "parameters": [
        "scripts"
      ],
      "line": 462,
      "isAsync": false,
      "isExported": false,
      "complexity": 310,
      "length": 7,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_generateDependencyReport",
      "parameters": [
        "dependencies"
      ],
      "line": 470,
      "isAsync": false,
      "isExported": false,
      "complexity": 892,
      "length": 25,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_getCategoryDisplayName",
      "parameters": [
        "category"
      ],
      "line": 496,
      "isAsync": false,
      "isExported": false,
      "complexity": 321,
      "length": 12,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_estimateMemoryUsage",
      "parameters": [
        "statistics"
      ],
      "line": 509,
      "isAsync": false,
      "isExported": false,
      "complexity": 272,
      "length": 6,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_estimateCPUUsage",
      "parameters": [
        "statistics"
      ],
      "line": 516,
      "isAsync": false,
      "isExported": false,
      "complexity": 153,
      "length": 5,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_evaluateScalability",
      "parameters": [
        "realScanData"
      ],
      "line": 522,
      "isAsync": false,
      "isExported": false,
      "complexity": 535,
      "length": 17,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_categorizeEndpointsByMethod",
      "parameters": [
        "routes"
      ],
      "line": 541,
      "isAsync": false,
      "isExported": false,
      "complexity": 333,
      "length": 11,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_categorizeEndpointsByModule",
      "parameters": [
        "routes"
      ],
      "line": 553,
      "isAsync": false,
      "isExported": false,
      "complexity": 442,
      "length": 13,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_generateSystemAPISection",
      "parameters": [
        "routes"
      ],
      "line": 567,
      "isAsync": false,
      "isExported": false,
      "complexity": 447,
      "length": 13,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_generateBusinessAPISection",
      "parameters": [
        "routes"
      ],
      "line": 581,
      "isAsync": false,
      "isExported": false,
      "complexity": 424,
      "length": 13,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_generateUtilityAPISection",
      "parameters": [
        "routes"
      ],
      "line": 595,
      "isAsync": false,
      "isExported": false,
      "complexity": 446,
      "length": 13,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_analyzeMiddleware",
      "parameters": [
        "routes"
      ],
      "line": 609,
      "isAsync": false,
      "isExported": false,
      "complexity": 589,
      "length": 18,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "route => {\n            if (route.middleware && route.middleware.length > 0"
      ],
      "line": 611,
      "isAsync": false,
      "isExported": false,
      "complexity": 237,
      "length": 7,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_generateSecurityAnalysis",
      "parameters": [
        "routes"
      ],
      "line": 628,
      "isAsync": false,
      "isExported": false,
      "complexity": 867,
      "length": 27,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_generateLayerStatistics",
      "parameters": [
        "layers"
      ],
      "line": 657,
      "isAsync": false,
      "isExported": false,
      "complexity": 319,
      "length": 9,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_getLayerDisplayName",
      "parameters": [
        "layer"
      ],
      "line": 667,
      "isAsync": false,
      "isExported": false,
      "complexity": 265,
      "length": 11,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_generateArchitectureDiagram",
      "parameters": [
        "moduleStructure"
      ],
      "line": 679,
      "isAsync": false,
      "isExported": false,
      "complexity": 485,
      "length": 15,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_generateLayerModules",
      "parameters": [
        "modules",
        "description"
      ],
      "line": 695,
      "isAsync": false,
      "isExported": false,
      "complexity": 704,
      "length": 20,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_filterModulesByImportance",
      "parameters": [
        "modules",
        "importance"
      ],
      "line": 716,
      "isAsync": false,
      "isExported": false,
      "complexity": 347,
      "length": 12,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_calculateAverageModuleSize",
      "parameters": [
        "modules"
      ],
      "line": 729,
      "isAsync": false,
      "isExported": false,
      "complexity": 267,
      "length": 8,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_assessCoupling",
      "parameters": [
        "moduleStructure"
      ],
      "line": 738,
      "isAsync": false,
      "isExported": false,
      "complexity": 192,
      "length": 7,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "_formatSize",
      "parameters": [
        "bytes"
      ],
      "line": 747,
      "isAsync": false,
      "isExported": false,
      "complexity": 270,
      "length": 7,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "constructor",
      "parameters": [
        "projectPath"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 80,
      "length": 4,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "scanProject",
      "parameters": [],
      "line": 23,
      "isAsync": true,
      "isExported": false,
      "complexity": 955,
      "length": 26,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_scanBasicInfo",
      "parameters": [],
      "line": 53,
      "isAsync": true,
      "isExported": false,
      "complexity": 1070,
      "length": 27,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_scanFileStructure",
      "parameters": [],
      "line": 84,
      "isAsync": true,
      "isExported": false,
      "complexity": 1031,
      "length": 35,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_scanDirectory",
      "parameters": [
        "dirPath",
        "structure",
        "depth"
      ],
      "line": 123,
      "isAsync": true,
      "isExported": false,
      "complexity": 2230,
      "length": 56,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_analyzeCode",
      "parameters": [
        "fileStructure"
      ],
      "line": 183,
      "isAsync": true,
      "isExported": false,
      "complexity": 1887,
      "length": 50,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_analyzeFileContent",
      "parameters": [
        "content",
        "fileInfo"
      ],
      "line": 237,
      "isAsync": false,
      "isExported": false,
      "complexity": 3301,
      "length": 93,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_analyzeDependencies",
      "parameters": [],
      "line": 353,
      "isAsync": true,
      "isExported": false,
      "complexity": 1462,
      "length": 41,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_analyzeConfiguration",
      "parameters": [],
      "line": 398,
      "isAsync": true,
      "isExported": false,
      "complexity": 1569,
      "length": 40,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_extractAPIEndpoints",
      "parameters": [
        "fileStructure"
      ],
      "line": 442,
      "isAsync": true,
      "isExported": false,
      "complexity": 935,
      "length": 29,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_extractRoutesFromContent",
      "parameters": [
        "content",
        "fileInfo"
      ],
      "line": 475,
      "isAsync": false,
      "isExported": false,
      "complexity": 723,
      "length": 22,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_analyzeModuleStructure",
      "parameters": [
        "fileStructure"
      ],
      "line": 501,
      "isAsync": true,
      "isExported": false,
      "complexity": 1052,
      "length": 37,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_calculateStatistics",
      "parameters": [
        "results"
      ],
      "line": 542,
      "isAsync": false,
      "isExported": false,
      "complexity": 834,
      "length": 14,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_formatFileSize",
      "parameters": [
        "bytes"
      ],
      "line": 558,
      "isAsync": false,
      "isExported": false,
      "complexity": 260,
      "length": 7,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_categorizeDependency",
      "parameters": [
        "name"
      ],
      "line": 566,
      "isAsync": false,
      "isExported": false,
      "complexity": 788,
      "length": 18,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_extractMiddleware",
      "parameters": [
        "line"
      ],
      "line": 585,
      "isAsync": false,
      "isExported": false,
      "complexity": 252,
      "length": 7,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_identifyFileLayer",
      "parameters": [
        "file"
      ],
      "line": 593,
      "isAsync": false,
      "isExported": false,
      "complexity": 431,
      "length": 10,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_calculateFileImportance",
      "parameters": [
        "file"
      ],
      "line": 604,
      "isAsync": false,
      "isExported": false,
      "complexity": 404,
      "length": 12,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_calculateComplexity",
      "parameters": [
        "results"
      ],
      "line": 617,
      "isAsync": false,
      "isExported": false,
      "complexity": 452,
      "length": 11,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_detectMainLanguage",
      "parameters": [
        "filesByExtension"
      ],
      "line": 629,
      "isAsync": false,
      "isExported": false,
      "complexity": 593,
      "length": 22,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "_calculateProjectSize",
      "parameters": [
        "files"
      ],
      "line": 652,
      "isAsync": false,
      "isExported": false,
      "complexity": 124,
      "length": 4,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "testRealProjectScanner",
      "parameters": [],
      "line": 12,
      "isAsync": false,
      "isExported": false,
      "complexity": 4365,
      "length": 106,
      "file": "test-real-project-scanner.js"
    },
    {
      "name": "testCompleteAIContent",
      "parameters": [],
      "line": 54,
      "isAsync": false,
      "isExported": false,
      "complexity": 5079,
      "length": 131,
      "file": "test-complete-ai-content.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 7,
      "isAsync": false,
      "isExported": false,
      "complexity": 41,
      "length": 3,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "initialize",
      "parameters": [],
      "line": 14,
      "isAsync": true,
      "isExported": false,
      "complexity": 148,
      "length": 6,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "generateProjectOverview",
      "parameters": [
        "projectData"
      ],
      "line": 26,
      "isAsync": true,
      "isExported": false,
      "complexity": 1200,
      "length": 63,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "generateLanguageAnalysis",
      "parameters": [
        "languageData"
      ],
      "line": 95,
      "isAsync": true,
      "isExported": false,
      "complexity": 862,
      "length": 41,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "generateFileAnalysis",
      "parameters": [
        "fileData"
      ],
      "line": 142,
      "isAsync": true,
      "isExported": false,
      "complexity": 528,
      "length": 35,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "generateSystemArchitecture",
      "parameters": [
        "architectureData"
      ],
      "line": 183,
      "isAsync": true,
      "isExported": false,
      "complexity": 773,
      "length": 42,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "generateTechStack",
      "parameters": [
        "techData"
      ],
      "line": 231,
      "isAsync": true,
      "isExported": false,
      "complexity": 755,
      "length": 35,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "generateModulesCatalog",
      "parameters": [
        "moduleData"
      ],
      "line": 272,
      "isAsync": true,
      "isExported": false,
      "complexity": 811,
      "length": 42,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "generateModuleDetail",
      "parameters": [
        "moduleDetailData"
      ],
      "line": 320,
      "isAsync": true,
      "isExported": false,
      "complexity": 1321,
      "length": 65,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "generateIntegrationContracts",
      "parameters": [
        "integrationData"
      ],
      "line": 391,
      "isAsync": true,
      "isExported": false,
      "complexity": 1117,
      "length": 63,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_inferProjectType",
      "parameters": [
        "pkg"
      ],
      "line": 458,
      "isAsync": false,
      "isExported": false,
      "complexity": 328,
      "length": 10,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_formatDirectoryStructure",
      "parameters": [
        "structure",
        "depth = 0"
      ],
      "line": 472,
      "isAsync": false,
      "isExported": false,
      "complexity": 690,
      "length": 24,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzeTechStack",
      "parameters": [
        "pkg"
      ],
      "line": 500,
      "isAsync": false,
      "isExported": false,
      "complexity": 593,
      "length": 16,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzeProjectFeatures",
      "parameters": [
        "projectData"
      ],
      "line": 520,
      "isAsync": false,
      "isExported": false,
      "complexity": 726,
      "length": 24,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateLanguageStats",
      "parameters": [
        "projectStructure"
      ],
      "line": 548,
      "isAsync": false,
      "isExported": false,
      "complexity": 546,
      "length": 19,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_formatDependencies",
      "parameters": [
        "deps"
      ],
      "line": 571,
      "isAsync": false,
      "isExported": false,
      "complexity": 182,
      "length": 7,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_evaluateTechStack",
      "parameters": [
        "detection",
        "projectStructure"
      ],
      "line": 582,
      "isAsync": false,
      "isExported": false,
      "complexity": 530,
      "length": 17,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_detectTestFramework",
      "parameters": [
        "projectStructure"
      ],
      "line": 603,
      "isAsync": false,
      "isExported": false,
      "complexity": 292,
      "length": 9,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_detectBuildTools",
      "parameters": [
        "projectStructure"
      ],
      "line": 616,
      "isAsync": false,
      "isExported": false,
      "complexity": 451,
      "length": 10,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_estimateCodeLines",
      "parameters": [
        "structure"
      ],
      "line": 630,
      "isAsync": false,
      "isExported": false,
      "complexity": 302,
      "length": 10,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzeArchitectureComponents",
      "parameters": [
        "structure"
      ],
      "line": 644,
      "isAsync": false,
      "isExported": false,
      "complexity": 811,
      "length": 24,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzeDevEnvironment",
      "parameters": [
        "pkg",
        "structure"
      ],
      "line": 672,
      "isAsync": false,
      "isExported": false,
      "complexity": 847,
      "length": 27,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzePackageScripts",
      "parameters": [
        "pkg"
      ],
      "line": 703,
      "isAsync": false,
      "isExported": false,
      "complexity": 785,
      "length": 21,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_evaluateProjectQuality",
      "parameters": [
        "projectData"
      ],
      "line": 728,
      "isAsync": false,
      "isExported": false,
      "complexity": 977,
      "length": 30,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzeFileTypes",
      "parameters": [
        "structure"
      ],
      "line": 760,
      "isAsync": false,
      "isExported": false,
      "complexity": 705,
      "length": 21,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateDirectoryAnalysis",
      "parameters": [
        "structure"
      ],
      "line": 782,
      "isAsync": false,
      "isExported": false,
      "complexity": 660,
      "length": 21,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_evaluateCodeOrganization",
      "parameters": [
        "structure"
      ],
      "line": 804,
      "isAsync": false,
      "isExported": false,
      "complexity": 558,
      "length": 18,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_identifyKeyFiles",
      "parameters": [
        "structure"
      ],
      "line": 823,
      "isAsync": false,
      "isExported": false,
      "complexity": 749,
      "length": 22,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_suggestImprovements",
      "parameters": [
        "structure"
      ],
      "line": 846,
      "isAsync": false,
      "isExported": false,
      "complexity": 806,
      "length": 22,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzeArchitecture",
      "parameters": [
        "projectStructure"
      ],
      "line": 869,
      "isAsync": false,
      "isExported": false,
      "complexity": 569,
      "length": 18,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_identifyServices",
      "parameters": [
        "projectStructure"
      ],
      "line": 888,
      "isAsync": false,
      "isExported": false,
      "complexity": 596,
      "length": 19,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzeDataFlow",
      "parameters": [
        "projectStructure"
      ],
      "line": 908,
      "isAsync": false,
      "isExported": false,
      "complexity": 205,
      "length": 11,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzeDependencies",
      "parameters": [
        "projectStructure"
      ],
      "line": 920,
      "isAsync": false,
      "isExported": false,
      "complexity": 356,
      "length": 17,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_evaluateScalability",
      "parameters": [
        "data"
      ],
      "line": 938,
      "isAsync": false,
      "isExported": false,
      "complexity": 502,
      "length": 15,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_formatDetailedDependencies",
      "parameters": [
        "deps"
      ],
      "line": 954,
      "isAsync": false,
      "isExported": false,
      "complexity": 724,
      "length": 18,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzeDevTools",
      "parameters": [
        "projectStructure"
      ],
      "line": 973,
      "isAsync": false,
      "isExported": false,
      "complexity": 622,
      "length": 21,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzePerformance",
      "parameters": [
        "techData"
      ],
      "line": 995,
      "isAsync": false,
      "isExported": false,
      "complexity": 316,
      "length": 19,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateServiceModules",
      "parameters": [
        "detectedModules",
        "projectStructure"
      ],
      "line": 1016,
      "isAsync": false,
      "isExported": false,
      "complexity": 346,
      "length": 10,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateRouteModules",
      "parameters": [
        "detectedModules",
        "projectStructure"
      ],
      "line": 1027,
      "isAsync": false,
      "isExported": false,
      "complexity": 413,
      "length": 12,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateUtilityModules",
      "parameters": [
        "detectedModules",
        "projectStructure"
      ],
      "line": 1040,
      "isAsync": false,
      "isExported": false,
      "complexity": 300,
      "length": 10,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateConfigModules",
      "parameters": [
        "detectedModules",
        "projectStructure"
      ],
      "line": 1051,
      "isAsync": false,
      "isExported": false,
      "complexity": 291,
      "length": 10,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateModuleDependencyGraph",
      "parameters": [
        "detectedModules"
      ],
      "line": 1062,
      "isAsync": false,
      "isExported": false,
      "complexity": 446,
      "length": 22,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzeModuleResponsibilities",
      "parameters": [
        "detectedModules"
      ],
      "line": 1085,
      "isAsync": false,
      "isExported": false,
      "complexity": 154,
      "length": 10,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_suggestModuleExtensions",
      "parameters": [
        "projectStructure"
      ],
      "line": 1096,
      "isAsync": false,
      "isExported": false,
      "complexity": 135,
      "length": 8,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateModuleMethods",
      "parameters": [
        "methods"
      ],
      "line": 1106,
      "isAsync": false,
      "isExported": false,
      "complexity": 279,
      "length": 7,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateModuleExports",
      "parameters": [
        "exports"
      ],
      "line": 1114,
      "isAsync": false,
      "isExported": false,
      "complexity": 110,
      "length": 3,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateModuleDependencies",
      "parameters": [
        "dependencies"
      ],
      "line": 1118,
      "isAsync": false,
      "isExported": false,
      "complexity": 96,
      "length": 3,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzeModuleCodeQuality",
      "parameters": [
        "codeAnalysis"
      ],
      "line": 1122,
      "isAsync": false,
      "isExported": false,
      "complexity": 133,
      "length": 8,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateUsageExample",
      "parameters": [
        "moduleName",
        "methods"
      ],
      "line": 1131,
      "isAsync": false,
      "isExported": false,
      "complexity": 100,
      "length": 4,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateAPIReference",
      "parameters": [
        "codeAnalysis"
      ],
      "line": 1136,
      "isAsync": false,
      "isExported": false,
      "complexity": 184,
      "length": 16,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_analyzeModuleTestCoverage",
      "parameters": [
        "moduleName",
        "moduleInfo"
      ],
      "line": 1153,
      "isAsync": false,
      "isExported": false,
      "complexity": 110,
      "length": 9,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_suggestModuleImprovements",
      "parameters": [
        "codeAnalysis"
      ],
      "line": 1163,
      "isAsync": false,
      "isExported": false,
      "complexity": 135,
      "length": 8,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateSystemAPIContracts",
      "parameters": [
        "systemEndpoints"
      ],
      "line": 1173,
      "isAsync": false,
      "isExported": false,
      "complexity": 240,
      "length": 15,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateModeAPIContracts",
      "parameters": [
        "modeEndpoints"
      ],
      "line": 1189,
      "isAsync": false,
      "isExported": false,
      "complexity": 302,
      "length": 11,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateModuleAPIContracts",
      "parameters": [
        "moduleEndpoints"
      ],
      "line": 1201,
      "isAsync": false,
      "isExported": false,
      "complexity": 192,
      "length": 7,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateRequestContracts",
      "parameters": [],
      "line": 1209,
      "isAsync": false,
      "isExported": false,
      "complexity": 153,
      "length": 14,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateResponseContracts",
      "parameters": [],
      "line": 1224,
      "isAsync": false,
      "isExported": false,
      "complexity": 342,
      "length": 26,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateErrorContracts",
      "parameters": [],
      "line": 1251,
      "isAsync": false,
      "isExported": false,
      "complexity": 279,
      "length": 10,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateModuleCommunicationContracts",
      "parameters": [
        "modules"
      ],
      "line": 1262,
      "isAsync": false,
      "isExported": false,
      "complexity": 134,
      "length": 12,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateWebSocketContracts",
      "parameters": [],
      "line": 1275,
      "isAsync": false,
      "isExported": false,
      "complexity": 272,
      "length": 21,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateSecurityContracts",
      "parameters": [],
      "line": 1297,
      "isAsync": false,
      "isExported": false,
      "complexity": 143,
      "length": 15,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateVersionCompatibilityContracts",
      "parameters": [],
      "line": 1313,
      "isAsync": false,
      "isExported": false,
      "complexity": 130,
      "length": 14,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generatePerformanceContracts",
      "parameters": [],
      "line": 1328,
      "isAsync": false,
      "isExported": false,
      "complexity": 181,
      "length": 16,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "_generateTestingContracts",
      "parameters": [],
      "line": 1345,
      "isAsync": false,
      "isExported": false,
      "complexity": 133,
      "length": 15,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "testEnhancedContent",
      "parameters": [],
      "line": 63,
      "isAsync": false,
      "isExported": false,
      "complexity": 3762,
      "length": 92,
      "file": "test-enhanced-ai-content.js"
    },
    {
      "name": "testAIContentGeneration",
      "parameters": [],
      "line": 11,
      "isAsync": false,
      "isExported": false,
      "complexity": 7107,
      "length": 203,
      "file": "test-ai-content-generation.js"
    },
    {
      "name": "then",
      "parameters": [
        "success => {\n        if (success"
      ],
      "line": 217,
      "isAsync": false,
      "isExported": false,
      "complexity": 232,
      "length": 9,
      "file": "test-ai-content-generation.js"
    },
    {
      "name": "constructor",
      "parameters": [
        "projectPath"
      ],
      "line": 16,
      "isAsync": false,
      "isExported": false,
      "complexity": 168,
      "length": 5,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "name": "ensureMgKiroStructure",
      "parameters": [],
      "line": 26,
      "isAsync": true,
      "isExported": false,
      "complexity": 552,
      "length": 18,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "name": "saveDocument",
      "parameters": [
        "category",
        "filename",
        "content"
      ],
      "line": 52,
      "isAsync": true,
      "isExported": false,
      "complexity": 700,
      "length": 21,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "name": "saveDocuments",
      "parameters": [
        "documents"
      ],
      "line": 79,
      "isAsync": true,
      "isExported": false,
      "complexity": 1034,
      "length": 33,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "name": "processAIPackage",
      "parameters": [
        "aiPackage"
      ],
      "line": 119,
      "isAsync": true,
      "isExported": false,
      "complexity": 1058,
      "length": 36,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "name": "prepareDocuments",
      "parameters": [
        "stepIndex",
        "aiContent"
      ],
      "line": 163,
      "isAsync": true,
      "isExported": false,
      "complexity": 5265,
      "length": 128,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "name": "checkMgKiroStatus",
      "parameters": [],
      "line": 296,
      "isAsync": true,
      "isExported": false,
      "complexity": 1274,
      "length": 39,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "name": "cleanupMgKiro",
      "parameters": [
        "confirm = false"
      ],
      "line": 342,
      "isAsync": true,
      "isExported": false,
      "complexity": 302,
      "length": 12,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "name": "createLanguageRoutes",
      "parameters": [
        "services"
      ],
      "line": 15,
      "isAsync": false,
      "isExported": false,
      "complexity": 11298,
      "length": 304,
      "file": "server/routes/init/language.js"
    },
    {
      "name": "_generateLanguageReport",
      "parameters": [
        "detectionResult"
      ],
      "line": 325,
      "isAsync": false,
      "isExported": false,
      "complexity": 2064,
      "length": 51,
      "file": "server/routes/init/language.js"
    },
    {
      "name": "createStructureRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 2930,
      "length": 95,
      "file": "server/routes/init/structure.js"
    },
    {
      "name": "_generateStructureSummary",
      "parameters": [
        "scanResult",
        "server"
      ],
      "line": 116,
      "isAsync": false,
      "isExported": false,
      "complexity": 1413,
      "length": 33,
      "file": "server/routes/init/structure.js"
    },
    {
      "name": "_extractFrameworks",
      "parameters": [
        "scanResult"
      ],
      "line": 155,
      "isAsync": false,
      "isExported": false,
      "complexity": 745,
      "length": 27,
      "file": "server/routes/init/structure.js"
    },
    {
      "name": "createInitDataRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 5275,
      "length": 171,
      "file": "server/routes/init/data.js"
    },
    {
      "name": "function",
      "parameters": [
        "services"
      ],
      "line": 187,
      "isAsync": false,
      "isExported": true,
      "complexity": 46,
      "length": 3,
      "file": "server/routes/init/data.js"
    },
    {
      "name": "testInitModeNoUser",
      "parameters": [],
      "line": 11,
      "isAsync": false,
      "isExported": false,
      "complexity": 7390,
      "length": 209,
      "file": "test-init-no-user.js"
    },
    {
      "name": "then",
      "parameters": [
        "success => {\n        if (success"
      ],
      "line": 223,
      "isAsync": false,
      "isExported": false,
      "complexity": 221,
      "length": 9,
      "file": "test-init-no-user.js"
    },
    {
      "name": "testFixedStructure",
      "parameters": [],
      "line": 11,
      "isAsync": false,
      "isExported": false,
      "complexity": 3255,
      "length": 100,
      "file": "test-fixed-structure.js"
    },
    {
      "name": "then",
      "parameters": [
        "success => {\n        if (success"
      ],
      "line": 114,
      "isAsync": false,
      "isExported": false,
      "complexity": 214,
      "length": 9,
      "file": "test-fixed-structure.js"
    },
    {
      "name": "createTestServer",
      "parameters": [],
      "line": 19,
      "isAsync": false,
      "isExported": false,
      "complexity": 587,
      "length": 21,
      "file": "test-split-modules.js"
    },
    {
      "name": "testRoutesRegistration",
      "parameters": [],
      "line": 44,
      "isAsync": false,
      "isExported": false,
      "complexity": 2194,
      "length": 63,
      "file": "test-split-modules.js"
    },
    {
      "name": "testModulesAnalysisRoute",
      "parameters": [],
      "line": 111,
      "isAsync": false,
      "isExported": false,
      "complexity": 1455,
      "length": 45,
      "file": "test-split-modules.js"
    },
    {
      "name": "testModulesDocsRoute",
      "parameters": [],
      "line": 160,
      "isAsync": false,
      "isExported": false,
      "complexity": 1290,
      "length": 44,
      "file": "test-split-modules.js"
    },
    {
      "name": "testResponsibilitySeparation",
      "parameters": [],
      "line": 208,
      "isAsync": false,
      "isExported": false,
      "complexity": 1597,
      "length": 44,
      "file": "test-split-modules.js"
    },
    {
      "name": "runTests",
      "parameters": [],
      "line": 256,
      "isAsync": false,
      "isExported": false,
      "complexity": 1046,
      "length": 34,
      "file": "test-split-modules.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "layer => {\n        if (layer.route"
      ],
      "line": 51,
      "isAsync": false,
      "isExported": false,
      "complexity": 731,
      "length": 19,
      "file": "test-split-modules.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "subLayer => {\n                if (subLayer.route"
      ],
      "line": 59,
      "isAsync": false,
      "isExported": false,
      "complexity": 407,
      "length": 9,
      "file": "test-split-modules.js"
    },
    {
      "name": "createAppRoutes",
      "parameters": [
        "services",
        "server"
      ],
      "line": 42,
      "isAsync": false,
      "isExported": false,
      "complexity": 3911,
      "length": 137,
      "file": "server/routes/index.js"
    },
    {
      "name": "createInitRoutes",
      "parameters": [
        "services",
        "server"
      ],
      "line": 186,
      "isAsync": false,
      "isExported": false,
      "complexity": 407,
      "length": 11,
      "file": "server/routes/index.js"
    },
    {
      "name": "createInitRoutes",
      "parameters": [
        "services",
        "serverObject"
      ],
      "line": 23,
      "isAsync": false,
      "isExported": false,
      "complexity": 1597,
      "length": 48,
      "file": "server/routes/init/index.js"
    },
    {
      "name": "createModulesDocsRoutes",
      "parameters": [
        "services"
      ],
      "line": 16,
      "isAsync": false,
      "isExported": false,
      "complexity": 12289,
      "length": 335,
      "file": "server/routes/init/modules-docs.js"
    },
    {
      "name": "createModulesAnalysisRoutes",
      "parameters": [
        "services"
      ],
      "line": 16,
      "isAsync": false,
      "isExported": false,
      "complexity": 12888,
      "length": 352,
      "file": "server/routes/init/modules-analysis.js"
    },
    {
      "name": "createContractsRoutes",
      "parameters": [
        "services"
      ],
      "line": 15,
      "isAsync": false,
      "isExported": false,
      "complexity": 18116,
      "length": 482,
      "file": "server/routes/init/contracts.js"
    },
    {
      "name": "testAIResponseHandler",
      "parameters": [],
      "line": 18,
      "isAsync": false,
      "isExported": false,
      "complexity": 2721,
      "length": 89,
      "file": "test-ai-response-handler.js"
    },
    {
      "name": "testWorkflowIntegration",
      "parameters": [],
      "line": 111,
      "isAsync": false,
      "isExported": false,
      "complexity": 1792,
      "length": 75,
      "file": "test-ai-response-handler.js"
    },
    {
      "name": "verifyGeneratedFiles",
      "parameters": [],
      "line": 190,
      "isAsync": false,
      "isExported": false,
      "complexity": 1032,
      "length": 31,
      "file": "test-ai-response-handler.js"
    },
    {
      "name": "runTests",
      "parameters": [],
      "line": 225,
      "isAsync": false,
      "isExported": false,
      "complexity": 843,
      "length": 30,
      "file": "test-ai-response-handler.js"
    },
    {
      "name": "createDocumentsRoutes",
      "parameters": [
        "services"
      ],
      "line": 15,
      "isAsync": false,
      "isExported": false,
      "complexity": 16073,
      "length": 434,
      "file": "server/routes/init/documents.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 15,
      "isAsync": false,
      "isExported": false,
      "complexity": 144,
      "length": 5,
      "file": "server/services/template-reader.js"
    },
    {
      "name": "readTemplate",
      "parameters": [
        "category",
        "name"
      ],
      "line": 24,
      "isAsync": true,
      "isExported": false,
      "complexity": 1001,
      "length": 36,
      "file": "server/services/template-reader.js"
    },
    {
      "name": "_buildTemplatePath",
      "parameters": [
        "category",
        "name"
      ],
      "line": 64,
      "isAsync": false,
      "isExported": false,
      "complexity": 953,
      "length": 29,
      "file": "server/services/template-reader.js"
    },
    {
      "name": "_findTemplateInSubdirs",
      "parameters": [
        "baseDir",
        "fileName"
      ],
      "line": 97,
      "isAsync": false,
      "isExported": false,
      "complexity": 1075,
      "length": 30,
      "file": "server/services/template-reader.js"
    },
    {
      "name": "listTemplates",
      "parameters": [
        "category"
      ],
      "line": 131,
      "isAsync": true,
      "isExported": false,
      "complexity": 402,
      "length": 14,
      "file": "server/services/template-reader.js"
    },
    {
      "name": "_listTemplatesRecursive",
      "parameters": [
        "dir",
        "category",
        "subPath = ''"
      ],
      "line": 149,
      "isAsync": false,
      "isExported": false,
      "complexity": 1367,
      "length": 35,
      "file": "server/services/template-reader.js"
    },
    {
      "name": "_getCategoryDir",
      "parameters": [
        "category"
      ],
      "line": 188,
      "isAsync": false,
      "isExported": false,
      "complexity": 535,
      "length": 16,
      "file": "server/services/template-reader.js"
    },
    {
      "name": "processTemplate",
      "parameters": [
        "templateContent",
        "variables = {}"
      ],
      "line": 208,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/template-reader.js"
    },
    {
      "name": "clearCache",
      "parameters": [],
      "line": 227,
      "isAsync": false,
      "isExported": false,
      "complexity": 35,
      "length": 3,
      "file": "server/services/template-reader.js"
    },
    {
      "name": "getCacheStats",
      "parameters": [],
      "line": 234,
      "isAsync": false,
      "isExported": false,
      "complexity": 119,
      "length": 6,
      "file": "server/services/template-reader.js"
    },
    {
      "name": "constructor",
      "parameters": [
        "config = {}"
      ],
      "line": 13,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "_initializeManager",
      "parameters": [],
      "line": 37,
      "isAsync": false,
      "isExported": false,
      "complexity": 239,
      "length": 8,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "_setupGlobalVariables",
      "parameters": [],
      "line": 49,
      "isAsync": false,
      "isExported": false,
      "complexity": 281,
      "length": 6,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "loadPrompt",
      "parameters": [
        "category",
        "name",
        "variables = {}"
      ],
      "line": 63,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "listPrompts",
      "parameters": [
        "category = null"
      ],
      "line": 110,
      "isAsync": true,
      "isExported": false,
      "complexity": 1021,
      "length": 39,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "_processPrompt",
      "parameters": [
        "content",
        "variables = {}"
      ],
      "line": 154,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "_isValidCache",
      "parameters": [
        "cacheKey"
      ],
      "line": 181,
      "isAsync": false,
      "isExported": false,
      "complexity": 209,
      "length": 9,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "_getCachedPrompt",
      "parameters": [
        "cacheKey",
        "variables"
      ],
      "line": 195,
      "isAsync": false,
      "isExported": false,
      "complexity": 403,
      "length": 17,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "_cachePrompt",
      "parameters": [
        "cacheKey",
        "content",
        "lastModified"
      ],
      "line": 217,
      "isAsync": false,
      "isExported": false,
      "complexity": 96,
      "length": 4,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "clearCache",
      "parameters": [],
      "line": 225,
      "isAsync": false,
      "isExported": false,
      "complexity": 151,
      "length": 6,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "getStatus",
      "parameters": [],
      "line": 235,
      "isAsync": false,
      "isExported": false,
      "complexity": 300,
      "length": 11,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "setGlobalVariable",
      "parameters": [
        "key",
        "value"
      ],
      "line": 250,
      "isAsync": false,
      "isExported": false,
      "complexity": 47,
      "length": 3,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "removeGlobalVariable",
      "parameters": [
        "key"
      ],
      "line": 257,
      "isAsync": false,
      "isExported": false,
      "complexity": 50,
      "length": 3,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "createFilesRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 11139,
      "length": 313,
      "file": "server/routes/init/files.js"
    },
    {
      "name": "loadConfig",
      "parameters": [],
      "line": 38,
      "isAsync": false,
      "isExported": false,
      "complexity": 656,
      "length": 23,
      "file": "index.js"
    },
    {
      "name": "createApp",
      "parameters": [
        "config = {}",
        "wsManager = null"
      ],
      "line": 65,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "index.js"
    },
    {
      "name": "setupWebSocket",
      "parameters": [
        "server",
        "services"
      ],
      "line": 212,
      "isAsync": false,
      "isExported": false,
      "complexity": 2295,
      "length": 90,
      "file": "index.js"
    },
    {
      "name": "handleWebSocketMessage",
      "parameters": [
        "clientInfo",
        "message",
        "services"
      ],
      "line": 306,
      "isAsync": false,
      "isExported": false,
      "complexity": 1172,
      "length": 51,
      "file": "index.js"
    },
    {
      "name": "generateClientId",
      "parameters": [],
      "line": 361,
      "isAsync": false,
      "isExported": false,
      "complexity": 84,
      "length": 3,
      "file": "index.js"
    },
    {
      "name": "setupGracefulShutdown",
      "parameters": [
        "server",
        "wsManager"
      ],
      "line": 368,
      "isAsync": false,
      "isExported": false,
      "complexity": 963,
      "length": 36,
      "file": "index.js"
    },
    {
      "name": "startServer",
      "parameters": [],
      "line": 408,
      "isAsync": false,
      "isExported": false,
      "complexity": 2060,
      "length": 52,
      "file": "index.js"
    },
    {
      "name": "main",
      "parameters": [],
      "line": 464,
      "isAsync": false,
      "isExported": false,
      "complexity": 26,
      "length": 3,
      "file": "index.js"
    },
    {
      "name": "shutdown",
      "parameters": [
        "signal"
      ],
      "line": 369,
      "isAsync": false,
      "isExported": false,
      "complexity": 465,
      "length": 20,
      "file": "index.js"
    },
    {
      "name": "_broadcastModeChange",
      "parameters": [
        "previousMode",
        "newMode",
        "context = {}"
      ],
      "line": 168,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "index.js"
    },
    {
      "name": "createSystemRoutes",
      "parameters": [
        "services",
        "serverObject"
      ],
      "line": 17,
      "isAsync": false,
      "isExported": false,
      "complexity": 302,
      "length": 14,
      "file": "server/routes/system/index.js"
    },
    {
      "name": "success",
      "parameters": [
        "res",
        "data = null",
        "message = 'Success'",
        "status = 200"
      ],
      "line": 13,
      "isAsync": false,
      "isExported": false,
      "complexity": 146,
      "length": 8,
      "file": "server/services/response-service.js"
    },
    {
      "name": "error",
      "parameters": [
        "res",
        "error = 'Internal Server Error'",
        "status = 500",
        "details = null"
      ],
      "line": 29,
      "isAsync": false,
      "isExported": false,
      "complexity": 148,
      "length": 8,
      "file": "server/services/response-service.js"
    },
    {
      "name": "validationError",
      "parameters": [
        "res",
        "errors = {}",
        "message = 'Validation failed'"
      ],
      "line": 44,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/response-service.js"
    },
    {
      "name": "notFound",
      "parameters": [
        "res",
        "message = null",
        "resource = 'Resource'"
      ],
      "line": 68,
      "isAsync": false,
      "isExported": false,
      "complexity": 275,
      "length": 10,
      "file": "server/services/response-service.js"
    },
    {
      "name": "workflowSuccess",
      "parameters": [
        "res",
        "data",
        "workflow",
        "message = 'Workflow success'",
        "status = 200"
      ],
      "line": 87,
      "isAsync": false,
      "isExported": false,
      "complexity": 164,
      "length": 9,
      "file": "server/services/response-service.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "lang => {\n                    const langData = responseData.languages[lang];\n                    if (langData.frameworks"
      ],
      "line": 430,
      "isAsync": false,
      "isExported": false,
      "complexity": 544,
      "length": 12,
      "file": "server/routes/language/templates.js"
    },
    {
      "name": "createMCPRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 2415,
      "length": 79,
      "file": "server/routes/system/mcp.js"
    },
    {
      "name": "_isCompatibleVersion",
      "parameters": [
        "version"
      ],
      "line": 99,
      "isAsync": false,
      "isExported": false,
      "complexity": 101,
      "length": 4,
      "file": "server/routes/system/mcp.js"
    },
    {
      "name": "_generateConnectionId",
      "parameters": [],
      "line": 108,
      "isAsync": false,
      "isExported": false,
      "complexity": 78,
      "length": 3,
      "file": "server/routes/system/mcp.js"
    },
    {
      "name": "registerServices",
      "parameters": [
        "configDir = './config'"
      ],
      "line": 22,
      "isAsync": false,
      "isExported": false,
      "complexity": 1534,
      "length": 48,
      "file": "server/services/service-registry.js"
    },
    {
      "name": "initializeServices",
      "parameters": [
        "configDir = './config'"
      ],
      "line": 74,
      "isAsync": false,
      "isExported": false,
      "complexity": 306,
      "length": 11,
      "file": "server/services/service-registry.js"
    },
    {
      "name": "getServices",
      "parameters": [],
      "line": 89,
      "isAsync": false,
      "isExported": false,
      "complexity": 708,
      "length": 18,
      "file": "server/services/service-registry.js"
    },
    {
      "name": "getServiceBus",
      "parameters": [],
      "line": 277,
      "isAsync": false,
      "isExported": false,
      "complexity": 119,
      "length": 6,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "resetServiceBus",
      "parameters": [],
      "line": 287,
      "isAsync": false,
      "isExported": false,
      "complexity": 107,
      "length": 6,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 7,
      "isAsync": false,
      "isExported": false,
      "complexity": 345,
      "length": 13,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "register",
      "parameters": [
        "name",
        "serviceClass",
        "config = {}",
        "dependencies = []"
      ],
      "line": 28,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "get",
      "parameters": [
        "name"
      ],
      "line": 47,
      "isAsync": false,
      "isExported": false,
      "complexity": 381,
      "length": 16,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "_initializeService",
      "parameters": [
        "name"
      ],
      "line": 68,
      "isAsync": false,
      "isExported": false,
      "complexity": 1160,
      "length": 35,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "_checkCircularDependency",
      "parameters": [
        "serviceName",
        "visiting"
      ],
      "line": 108,
      "isAsync": false,
      "isExported": false,
      "complexity": 479,
      "length": 15,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "initializeAll",
      "parameters": [],
      "line": 127,
      "isAsync": true,
      "isExported": false,
      "complexity": 684,
      "length": 21,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "getServiceStatus",
      "parameters": [
        "name"
      ],
      "line": 152,
      "isAsync": false,
      "isExported": false,
      "complexity": 694,
      "length": 22,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "getDependencyGraph",
      "parameters": [],
      "line": 178,
      "isAsync": false,
      "isExported": false,
      "complexity": 171,
      "length": 7,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "validateDependencies",
      "parameters": [],
      "line": 189,
      "isAsync": false,
      "isExported": false,
      "complexity": 680,
      "length": 25,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "reset",
      "parameters": [],
      "line": 218,
      "isAsync": false,
      "isExported": false,
      "complexity": 351,
      "length": 12,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "getStats",
      "parameters": [],
      "line": 234,
      "isAsync": false,
      "isExported": false,
      "complexity": 408,
      "length": 10,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "shutdown",
      "parameters": [],
      "line": 248,
      "isAsync": true,
      "isExported": false,
      "complexity": 729,
      "length": 21,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 18,
      "isAsync": false,
      "isExported": false,
      "complexity": 2406,
      "length": 71,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "getTemplateByContext",
      "parameters": [
        "contextData",
        "templateRequest = {}"
      ],
      "line": 96,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "executeIntelligentTemplateSelection",
      "parameters": [
        "contextData",
        "templateRequest"
      ],
      "line": 134,
      "isAsync": true,
      "isExported": false,
      "complexity": 4036,
      "length": 111,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "getLegacyTemplate",
      "parameters": [
        "category",
        "name",
        "variables"
      ],
      "line": 250,
      "isAsync": true,
      "isExported": false,
      "complexity": 918,
      "length": 24,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "generateIntelligentTemplate",
      "parameters": [
        "contextData",
        "language",
        "languageInfo"
      ],
      "line": 279,
      "isAsync": true,
      "isExported": false,
      "complexity": 1294,
      "length": 35,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "selectHybridTemplate",
      "parameters": [
        "userIntent",
        "language",
        "languageInfo",
        "variables"
      ],
      "line": 319,
      "isAsync": true,
      "isExported": false,
      "complexity": 1717,
      "length": 45,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "generateTemplateByModeAndStep",
      "parameters": [
        "mode",
        "step",
        "templateType",
        "contextData"
      ],
      "line": 369,
      "isAsync": true,
      "isExported": false,
      "complexity": 1919,
      "length": 41,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "enhanceTemplate",
      "parameters": [
        "templateResult",
        "contextData",
        "language",
        "languageInfo"
      ],
      "line": 415,
      "isAsync": true,
      "isExported": false,
      "complexity": 1015,
      "length": 29,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "buildCacheKey",
      "parameters": [
        "contextData",
        "templateRequest"
      ],
      "line": 449,
      "isAsync": false,
      "isExported": false,
      "complexity": 144,
      "length": 4,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "setCacheItem",
      "parameters": [
        "key",
        "value"
      ],
      "line": 454,
      "isAsync": false,
      "isExported": false,
      "complexity": 240,
      "length": 7,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "extractTemplateContent",
      "parameters": [
        "templates"
      ],
      "line": 462,
      "isAsync": false,
      "isExported": false,
      "complexity": 368,
      "length": 10,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "formatContextualPromptsAsTemplate",
      "parameters": [
        "contextualPrompts"
      ],
      "line": 473,
      "isAsync": false,
      "isExported": false,
      "complexity": 825,
      "length": 25,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "category => {\n                content += `## ${category}\\n\\n`;\n                const prompts = contextualPrompts.prompts[category];\n                if (typeof prompts === 'object'"
      ],
      "line": 477,
      "isAsync": false,
      "isExported": false,
      "complexity": 388,
      "length": 10,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "formatLanguagePromptsAsTemplate",
      "parameters": [
        "prompts"
      ],
      "line": 499,
      "isAsync": false,
      "isExported": false,
      "complexity": 497,
      "length": 16,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "category => {\n            content += `## ${category}\\n\\n`;\n            const categoryPrompts = prompts[category];\n            if (typeof categoryPrompts === 'object'"
      ],
      "line": 502,
      "isAsync": false,
      "isExported": false,
      "complexity": 366,
      "length": 10,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "getDefaultTemplate",
      "parameters": [
        "variables = {}"
      ],
      "line": 516,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "generateReasoning",
      "parameters": [
        "strategy",
        "contextData"
      ],
      "line": 529,
      "isAsync": false,
      "isExported": false,
      "complexity": 267,
      "length": 9,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "findAlternativeTemplates",
      "parameters": [
        "contextData",
        "language"
      ],
      "line": 539,
      "isAsync": true,
      "isExported": false,
      "complexity": 566,
      "length": 22,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "generateSuggestions",
      "parameters": [
        "template",
        "contextData"
      ],
      "line": 562,
      "isAsync": false,
      "isExported": false,
      "complexity": 530,
      "length": 21,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "_calculateContextConfidence",
      "parameters": [
        "contextData",
        "templateRequest"
      ],
      "line": 590,
      "isAsync": false,
      "isExported": false,
      "complexity": 1084,
      "length": 38,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "_selectOptimalStrategy",
      "parameters": [
        "selectionContext",
        "confidence"
      ],
      "line": 635,
      "isAsync": false,
      "isExported": false,
      "complexity": 1459,
      "length": 47,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "_recordSelectionMetrics",
      "parameters": [
        "strategy",
        "confidence"
      ],
      "line": 688,
      "isAsync": false,
      "isExported": false,
      "complexity": 522,
      "length": 15,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "generateAdvancedAITemplate",
      "parameters": [
        "contextData",
        "selectionContext",
        "confidence"
      ],
      "line": 711,
      "isAsync": true,
      "isExported": false,
      "complexity": 1268,
      "length": 35,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "getFallbackTemplate",
      "parameters": [
        "contextData"
      ],
      "line": 752,
      "isAsync": true,
      "isExported": false,
      "complexity": 726,
      "length": 32,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "getServiceStats",
      "parameters": [],
      "line": 788,
      "isAsync": false,
      "isExported": false,
      "complexity": 2002,
      "length": 39,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "_calculateStrategyPercentages",
      "parameters": [],
      "line": 831,
      "isAsync": false,
      "isExported": false,
      "complexity": 362,
      "length": 10,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "_analyzeConfidenceDistribution",
      "parameters": [],
      "line": 845,
      "isAsync": false,
      "isExported": false,
      "complexity": 678,
      "length": 19,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "_calculateFallbackRate",
      "parameters": [],
      "line": 868,
      "isAsync": false,
      "isExported": false,
      "complexity": 227,
      "length": 5,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "_calculateAISuccessRate",
      "parameters": [],
      "line": 877,
      "isAsync": false,
      "isExported": false,
      "complexity": 388,
      "length": 7,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "_determineSystemHealth",
      "parameters": [],
      "line": 888,
      "isAsync": false,
      "isExported": false,
      "complexity": 382,
      "length": 9,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "clearCache",
      "parameters": [],
      "line": 901,
      "isAsync": false,
      "isExported": false,
      "complexity": 107,
      "length": 5,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "createDiagnosisRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 10386,
      "length": 319,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_getIssueById",
      "parameters": [
        "issueId"
      ],
      "line": 339,
      "isAsync": false,
      "isExported": false,
      "complexity": 387,
      "length": 13,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_performDiagnosis",
      "parameters": [
        "issue",
        "context",
        "language",
        "unifiedTemplateService"
      ],
      "line": 361,
      "isAsync": false,
      "isExported": false,
      "complexity": 2075,
      "length": 50,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_performDeepAnalysis",
      "parameters": [
        "issue",
        "context",
        "promptService"
      ],
      "line": 419,
      "isAsync": false,
      "isExported": false,
      "complexity": 501,
      "length": 12,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_performCodeAnalysis",
      "parameters": [
        "issue",
        "context"
      ],
      "line": 438,
      "isAsync": false,
      "isExported": false,
      "complexity": 400,
      "length": 11,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generateFixSuggestions",
      "parameters": [
        "issue",
        "diagnosis",
        "unifiedTemplateService"
      ],
      "line": 457,
      "isAsync": false,
      "isExported": false,
      "complexity": 2206,
      "length": 52,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generateDiagnosisSummary",
      "parameters": [
        "issue"
      ],
      "line": 511,
      "isAsync": false,
      "isExported": false,
      "complexity": 78,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_identifyRootCause",
      "parameters": [
        "issue",
        "context"
      ],
      "line": 515,
      "isAsync": false,
      "isExported": false,
      "complexity": 306,
      "length": 14,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_identifyAffectedComponents",
      "parameters": [
        "issue"
      ],
      "line": 530,
      "isAsync": false,
      "isExported": false,
      "complexity": 263,
      "length": 15,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_assessImpact",
      "parameters": [
        "issue",
        "context"
      ],
      "line": 546,
      "isAsync": false,
      "isExported": false,
      "complexity": 323,
      "length": 10,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generateReproductionSteps",
      "parameters": [
        "issue",
        "context"
      ],
      "line": 557,
      "isAsync": false,
      "isExported": false,
      "complexity": 121,
      "length": 9,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeEnvironmentFactors",
      "parameters": [
        "issue",
        "context"
      ],
      "line": 567,
      "isAsync": false,
      "isExported": false,
      "complexity": 339,
      "length": 10,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeCodePath",
      "parameters": [
        "issue"
      ],
      "line": 578,
      "isAsync": false,
      "isExported": false,
      "complexity": 247,
      "length": 8,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeSimilarIssues",
      "parameters": [
        "issue"
      ],
      "line": 587,
      "isAsync": false,
      "isExported": false,
      "complexity": 219,
      "length": 8,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_assessRisk",
      "parameters": [
        "issue"
      ],
      "line": 596,
      "isAsync": false,
      "isExported": false,
      "complexity": 217,
      "length": 9,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_calculateDiagnosisConfidence",
      "parameters": [
        "diagnosis"
      ],
      "line": 606,
      "isAsync": false,
      "isExported": false,
      "complexity": 544,
      "length": 18,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_getNextSteps",
      "parameters": [
        "diagnosis"
      ],
      "line": 625,
      "isAsync": false,
      "isExported": false,
      "complexity": 284,
      "length": 15,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_assessFixPriority",
      "parameters": [
        "diagnosis"
      ],
      "line": 641,
      "isAsync": false,
      "isExported": false,
      "complexity": 209,
      "length": 9,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_estimateFixTime",
      "parameters": [
        "diagnosis"
      ],
      "line": 651,
      "isAsync": false,
      "isExported": false,
      "complexity": 293,
      "length": 12,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_getRequiredSkills",
      "parameters": [
        "diagnosis",
        "language"
      ],
      "line": 664,
      "isAsync": false,
      "isExported": false,
      "complexity": 500,
      "length": 19,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeComplexity",
      "parameters": [
        "issue"
      ],
      "line": 685,
      "isAsync": false,
      "isExported": false,
      "complexity": 84,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeDependencies",
      "parameters": [
        "issue",
        "context"
      ],
      "line": 689,
      "isAsync": false,
      "isExported": false,
      "complexity": 63,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzePerformanceImpact",
      "parameters": [
        "issue"
      ],
      "line": 693,
      "isAsync": false,
      "isExported": false,
      "complexity": 50,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeSecurityImplications",
      "parameters": [
        "issue"
      ],
      "line": 697,
      "isAsync": false,
      "isExported": false,
      "complexity": 52,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeDataIntegrityRisk",
      "parameters": [
        "issue"
      ],
      "line": 701,
      "isAsync": false,
      "isExported": false,
      "complexity": 49,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeConcurrencyIssues",
      "parameters": [
        "issue"
      ],
      "line": 705,
      "isAsync": false,
      "isExported": false,
      "complexity": 70,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeMemoryUsage",
      "parameters": [
        "issue"
      ],
      "line": 709,
      "isAsync": false,
      "isExported": false,
      "complexity": 49,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeNetworkFactors",
      "parameters": [
        "issue"
      ],
      "line": 713,
      "isAsync": false,
      "isExported": false,
      "complexity": 65,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeSyntax",
      "parameters": [
        "issue"
      ],
      "line": 717,
      "isAsync": false,
      "isExported": false,
      "complexity": 44,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeLogic",
      "parameters": [
        "issue"
      ],
      "line": 721,
      "isAsync": false,
      "isExported": false,
      "complexity": 52,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzePatterns",
      "parameters": [
        "issue"
      ],
      "line": 725,
      "isAsync": false,
      "isExported": false,
      "complexity": 53,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeCodeQuality",
      "parameters": [
        "issue"
      ],
      "line": 729,
      "isAsync": false,
      "isExported": false,
      "complexity": 42,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_analyzeTestCoverage",
      "parameters": [
        "issue",
        "context"
      ],
      "line": 733,
      "isAsync": false,
      "isExported": false,
      "complexity": 53,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_identifyCodeSmells",
      "parameters": [
        "issue"
      ],
      "line": 737,
      "isAsync": false,
      "isExported": false,
      "complexity": 55,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_identifyRefactoringOpportunities",
      "parameters": [
        "issue"
      ],
      "line": 741,
      "isAsync": false,
      "isExported": false,
      "complexity": 59,
      "length": 3,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generateQuickFixes",
      "parameters": [
        "issue",
        "diagnosis"
      ],
      "line": 745,
      "isAsync": false,
      "isExported": false,
      "complexity": 176,
      "length": 9,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generateComprehensiveFixes",
      "parameters": [
        "issue",
        "diagnosis"
      ],
      "line": 755,
      "isAsync": false,
      "isExported": false,
      "complexity": 171,
      "length": 9,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generatePreventiveMeasures",
      "parameters": [
        "issue",
        "diagnosis"
      ],
      "line": 765,
      "isAsync": false,
      "isExported": false,
      "complexity": 98,
      "length": 8,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generateTestingStrategy",
      "parameters": [
        "issue",
        "diagnosis"
      ],
      "line": 774,
      "isAsync": false,
      "isExported": false,
      "complexity": 173,
      "length": 8,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generateImplementationSteps",
      "parameters": [
        "issue",
        "diagnosis"
      ],
      "line": 783,
      "isAsync": false,
      "isExported": false,
      "complexity": 128,
      "length": 10,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generateCodeChanges",
      "parameters": [
        "issue",
        "diagnosis"
      ],
      "line": 794,
      "isAsync": false,
      "isExported": false,
      "complexity": 117,
      "length": 8,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generateConfigChanges",
      "parameters": [
        "issue",
        "diagnosis"
      ],
      "line": 803,
      "isAsync": false,
      "isExported": false,
      "complexity": 118,
      "length": 8,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generateTestCases",
      "parameters": [
        "issue",
        "diagnosis"
      ],
      "line": 812,
      "isAsync": false,
      "isExported": false,
      "complexity": 151,
      "length": 9,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generateValidationSteps",
      "parameters": [
        "issue",
        "diagnosis"
      ],
      "line": 822,
      "isAsync": false,
      "isExported": false,
      "complexity": 102,
      "length": 8,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_identifyCommonPatterns",
      "parameters": [
        "results"
      ],
      "line": 831,
      "isAsync": false,
      "isExported": false,
      "complexity": 258,
      "length": 10,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generateBatchPrioritySuggestions",
      "parameters": [
        "results"
      ],
      "line": 842,
      "isAsync": false,
      "isExported": false,
      "complexity": 610,
      "length": 16,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_generateDiagnosisReport",
      "parameters": [
        "issue",
        "diagnosis",
        "promptService"
      ],
      "line": 859,
      "isAsync": false,
      "isExported": false,
      "complexity": 557,
      "length": 28,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_markdownToHtml",
      "parameters": [
        "markdown"
      ],
      "line": 888,
      "isAsync": false,
      "isExported": false,
      "complexity": 275,
      "length": 9,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "_compareDiagnoses",
      "parameters": [
        "oldDiagnosis",
        "newDiagnosis"
      ],
      "line": 898,
      "isAsync": false,
      "isExported": false,
      "complexity": 854,
      "length": 30,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "result => {\n        const rootCause = result.diagnosis?.rootCause?.category;\n        if (rootCause"
      ],
      "line": 833,
      "isAsync": false,
      "isExported": false,
      "complexity": 176,
      "length": 6,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "name": "createPromptsRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 5642,
      "length": 183,
      "file": "server/routes/system/prompts.js"
    },
    {
      "name": "_getSystemPrompt",
      "parameters": [
        "currentMode"
      ],
      "line": 203,
      "isAsync": false,
      "isExported": false,
      "complexity": 203,
      "length": 6,
      "file": "server/routes/system/prompts.js"
    },
    {
      "name": "_getModeTemplates",
      "parameters": [
        "mode"
      ],
      "line": 215,
      "isAsync": false,
      "isExported": false,
      "complexity": 362,
      "length": 9,
      "file": "server/routes/system/prompts.js"
    },
    {
      "name": "createHealthRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 2947,
      "length": 95,
      "file": "server/routes/system/health.js"
    },
    {
      "name": "createFixesRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 58377,
      "length": 1761,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_getIssueById",
      "parameters": [
        "issueId"
      ],
      "line": 457,
      "isAsync": false,
      "isExported": false,
      "complexity": 331,
      "length": 14,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_validateFix",
      "parameters": [
        "issue",
        "fixCode",
        "files",
        "language"
      ],
      "line": 480,
      "isAsync": false,
      "isExported": false,
      "complexity": 634,
      "length": 30,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_createBackup",
      "parameters": [
        "files",
        "issueId"
      ],
      "line": 517,
      "isAsync": false,
      "isExported": false,
      "complexity": 471,
      "length": 18,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_applyFixChanges",
      "parameters": [
        "fixCode",
        "files",
        "language",
        "promptService"
      ],
      "line": 544,
      "isAsync": false,
      "isExported": false,
      "complexity": 1128,
      "length": 47,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_runAutomatedTests",
      "parameters": [
        "issue",
        "applyResult"
      ],
      "line": 598,
      "isAsync": false,
      "isExported": false,
      "complexity": 984,
      "length": 40,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_assessFixRisk",
      "parameters": [
        "fixRecord",
        "applyResult"
      ],
      "line": 645,
      "isAsync": false,
      "isExported": false,
      "complexity": 837,
      "length": 32,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_performFixVerification",
      "parameters": [
        "issue",
        "tests",
        "verificationSteps",
        "runFullTestSuite"
      ],
      "line": 686,
      "isAsync": false,
      "isExported": false,
      "complexity": 1845,
      "length": 65,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_performRollback",
      "parameters": [
        "fixRecord",
        "restoreFromBackup",
        "reason"
      ],
      "line": 759,
      "isAsync": false,
      "isExported": false,
      "complexity": 1094,
      "length": 38,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_generateVerificationRecommendations",
      "parameters": [
        "verificationResult"
      ],
      "line": 803,
      "isAsync": false,
      "isExported": false,
      "complexity": 897,
      "length": 37,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_buildFixHistory",
      "parameters": [
        "issue"
      ],
      "line": 846,
      "isAsync": false,
      "isExported": false,
      "complexity": 820,
      "length": 32,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_buildFixTimeline",
      "parameters": [
        "history"
      ],
      "line": 884,
      "isAsync": false,
      "isExported": false,
      "complexity": 321,
      "length": 11,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_generatePatch",
      "parameters": [
        "fixRecord",
        "format",
        "includeTests"
      ],
      "line": 903,
      "isAsync": false,
      "isExported": false,
      "complexity": 1806,
      "length": 55,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_getRiskRecommendations",
      "parameters": [
        "riskLevel",
        "riskFactors"
      ],
      "line": 965,
      "isAsync": false,
      "isExported": false,
      "complexity": 443,
      "length": 19,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "_runFullTestSuite",
      "parameters": [],
      "line": 989,
      "isAsync": false,
      "isExported": false,
      "complexity": 110,
      "length": 8,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "name": "createIssuesRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 49111,
      "length": 1457,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_calculatePriority",
      "parameters": [
        "severity",
        "category",
        "reproducible"
      ],
      "line": 361,
      "isAsync": false,
      "isExported": false,
      "complexity": 537,
      "length": 25,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_analyzeIssue",
      "parameters": [
        "title",
        "description",
        "stackTrace",
        "unifiedTemplateService"
      ],
      "line": 395,
      "isAsync": false,
      "isExported": false,
      "complexity": 1309,
      "length": 35,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_generateIssueTags",
      "parameters": [
        "title",
        "description",
        "category",
        "language"
      ],
      "line": 439,
      "isAsync": false,
      "isExported": false,
      "complexity": 1010,
      "length": 23,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_findSimilarIssues",
      "parameters": [
        "title",
        "description",
        "issuesMap"
      ],
      "line": 470,
      "isAsync": false,
      "isExported": false,
      "complexity": 875,
      "length": 27,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_classifyIssue",
      "parameters": [
        "title",
        "description",
        "stackTrace",
        "category"
      ],
      "line": 506,
      "isAsync": false,
      "isExported": false,
      "complexity": 746,
      "length": 25,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_generateIssueRecommendations",
      "parameters": [
        "issue"
      ],
      "line": 537,
      "isAsync": false,
      "isExported": false,
      "complexity": 860,
      "length": 37,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_getIssuesStatistics",
      "parameters": [
        "allIssues"
      ],
      "line": 580,
      "isAsync": false,
      "isExported": false,
      "complexity": 1205,
      "length": 44,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_getIssueHistory",
      "parameters": [
        "issue"
      ],
      "line": 630,
      "isAsync": false,
      "isExported": false,
      "complexity": 158,
      "length": 9,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_getRelatedFiles",
      "parameters": [
        "issue",
        "promptService"
      ],
      "line": 646,
      "isAsync": false,
      "isExported": false,
      "complexity": 571,
      "length": 20,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_extractPossibleCauses",
      "parameters": [
        "description",
        "stackTrace"
      ],
      "line": 668,
      "isAsync": false,
      "isExported": false,
      "complexity": 582,
      "length": 22,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_extractAffectedComponents",
      "parameters": [
        "description",
        "stackTrace"
      ],
      "line": 691,
      "isAsync": false,
      "isExported": false,
      "complexity": 556,
      "length": 19,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_extractKeywords",
      "parameters": [
        "text"
      ],
      "line": 711,
      "isAsync": false,
      "isExported": false,
      "complexity": 175,
      "length": 8,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_assessComplexity",
      "parameters": [
        "description",
        "stackTrace"
      ],
      "line": 720,
      "isAsync": false,
      "isExported": false,
      "complexity": 407,
      "length": 12,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_getCommonCauses",
      "parameters": [
        "category",
        "language"
      ],
      "line": 733,
      "isAsync": false,
      "isExported": false,
      "complexity": 530,
      "length": 17,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_getQuickFixes",
      "parameters": [
        "category",
        "language"
      ],
      "line": 751,
      "isAsync": false,
      "isExported": false,
      "complexity": 493,
      "length": 16,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "_getDiagnosticSteps",
      "parameters": [
        "category"
      ],
      "line": 768,
      "isAsync": false,
      "isExported": false,
      "complexity": 492,
      "length": 27,
      "file": "server/routes/fix/issues.js"
    },
    {
      "name": "createFixModeRoutes",
      "parameters": [
        "services"
      ],
      "line": 17,
      "isAsync": false,
      "isExported": false,
      "complexity": 16841,
      "length": 487,
      "file": "server/routes/fix/index.js"
    },
    {
      "name": "createQualityRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 19196,
      "length": 532,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "name": "_performQualityAnalysis",
      "parameters": [
        "targetPath",
        "options",
        "language",
        "promptService"
      ],
      "line": 555,
      "isAsync": false,
      "isExported": false,
      "complexity": 1584,
      "length": 62,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "name": "_generateDetailedMetrics",
      "parameters": [
        "targetPath",
        "qualityAnalysis",
        "language"
      ],
      "line": 625,
      "isAsync": false,
      "isExported": false,
      "complexity": 1209,
      "length": 49,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "name": "_generateQualityRecommendations",
      "parameters": [
        "qualityAnalysis",
        "language",
        "promptService"
      ],
      "line": 682,
      "isAsync": false,
      "isExported": false,
      "complexity": 1468,
      "length": 53,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "name": "_performComplexityAnalysis",
      "parameters": [
        "targetPath",
        "analysisDepth",
        "language"
      ],
      "line": 743,
      "isAsync": false,
      "isExported": false,
      "complexity": 1139,
      "length": 48,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "name": "_generateComplexityVisualizations",
      "parameters": [
        "complexityAnalysis"
      ],
      "line": 797,
      "isAsync": false,
      "isExported": false,
      "complexity": 608,
      "length": 25,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "name": "_performCoverageAnalysis",
      "parameters": [
        "targetPath",
        "testPath",
        "coverageType",
        "language"
      ],
      "line": 831,
      "isAsync": false,
      "isExported": false,
      "complexity": 1065,
      "length": 46,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "name": "_performTechnicalDebtAnalysis",
      "parameters": [
        "targetPath",
        "language",
        "promptService"
      ],
      "line": 885,
      "isAsync": false,
      "isExported": false,
      "complexity": 1333,
      "length": 50,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "name": "_calculateDebtEstimates",
      "parameters": [
        "debtAnalysis"
      ],
      "line": 941,
      "isAsync": false,
      "isExported": false,
      "complexity": 807,
      "length": 21,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "name": "_prioritizeDebtItems",
      "parameters": [
        "debtAnalysis"
      ],
      "line": 968,
      "isAsync": false,
      "isExported": false,
      "complexity": 619,
      "length": 16,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "name": "_calculateOverallScore",
      "parameters": [
        "qualityMetrics"
      ],
      "line": 990,
      "isAsync": false,
      "isExported": false,
      "complexity": 1168,
      "length": 39,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "name": "_getOverallRating",
      "parameters": [
        "score"
      ],
      "line": 1035,
      "isAsync": false,
      "isExported": false,
      "complexity": 155,
      "length": 7,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "name": "createSecurityRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 17519,
      "length": 483,
      "file": "server/routes/analyze/security.js"
    },
    {
      "name": "_performSecurityAnalysis",
      "parameters": [
        "targetPath",
        "scanTypes",
        "language",
        "promptService"
      ],
      "line": 506,
      "isAsync": false,
      "isExported": false,
      "complexity": 2212,
      "length": 86,
      "file": "server/routes/analyze/security.js"
    },
    {
      "name": "_performComplianceCheck",
      "parameters": [
        "securityAnalysis",
        "language"
      ],
      "line": 599,
      "isAsync": false,
      "isExported": false,
      "complexity": 805,
      "length": 33,
      "file": "server/routes/analyze/security.js"
    },
    {
      "name": "_scanCodeVulnerabilities",
      "parameters": [
        "targetPath",
        "rules",
        "language"
      ],
      "line": 640,
      "isAsync": false,
      "isExported": false,
      "complexity": 1166,
      "length": 49,
      "file": "server/routes/analyze/security.js"
    },
    {
      "name": "_analyzeSecurityConfiguration",
      "parameters": [
        "targetPath",
        "configTypes",
        "language"
      ],
      "line": 697,
      "isAsync": false,
      "isExported": false,
      "complexity": 1393,
      "length": 54,
      "file": "server/routes/analyze/security.js"
    },
    {
      "name": "_collectSecurityData",
      "parameters": [
        "targetPath"
      ],
      "line": 757,
      "isAsync": false,
      "isExported": false,
      "complexity": 340,
      "length": 9,
      "file": "server/routes/analyze/security.js"
    },
    {
      "name": "_generateSecurityReport",
      "parameters": [
        "securityData",
        "format",
        "includeRemediation",
        "promptService"
      ],
      "line": 775,
      "isAsync": false,
      "isExported": false,
      "complexity": 1801,
      "length": 70,
      "file": "server/routes/analyze/security.js"
    },
    {
      "name": "_generateHTMLReport",
      "parameters": [
        "report"
      ],
      "line": 851,
      "isAsync": false,
      "isExported": false,
      "complexity": 1254,
      "length": 44,
      "file": "server/routes/analyze/security.js"
    },
    {
      "name": "_generatePDFReport",
      "parameters": [
        "report"
      ],
      "line": 901,
      "isAsync": false,
      "isExported": false,
      "complexity": 134,
      "length": 4,
      "file": "server/routes/analyze/security.js"
    },
    {
      "name": "createAnalyzeModeRoutes",
      "parameters": [
        "services"
      ],
      "line": 19,
      "isAsync": false,
      "isExported": false,
      "complexity": 18283,
      "length": 476,
      "file": "server/routes/analyze/index.js"
    },
    {
      "name": "_getPresetConfig",
      "parameters": [
        "presetName"
      ],
      "line": 501,
      "isAsync": false,
      "isExported": false,
      "complexity": 1140,
      "length": 30,
      "file": "server/routes/analyze/index.js"
    },
    {
      "name": "_executePresetAnalysis",
      "parameters": [
        "presetConfig",
        "targetPath",
        "language",
        "services"
      ],
      "line": 540,
      "isAsync": false,
      "isExported": false,
      "complexity": 1121,
      "length": 29,
      "file": "server/routes/analyze/index.js"
    },
    {
      "name": "_generatePresetSummary",
      "parameters": [
        "analysisResults"
      ],
      "line": 575,
      "isAsync": false,
      "isExported": false,
      "complexity": 1095,
      "length": 39,
      "file": "server/routes/analyze/index.js"
    },
    {
      "name": "_simulateQualityAnalysis",
      "parameters": [
        "targetPath",
        "config"
      ],
      "line": 616,
      "isAsync": false,
      "isExported": false,
      "complexity": 220,
      "length": 10,
      "file": "server/routes/analyze/index.js"
    },
    {
      "name": "_simulateSecurityAnalysis",
      "parameters": [
        "targetPath",
        "config"
      ],
      "line": 627,
      "isAsync": false,
      "isExported": false,
      "complexity": 121,
      "length": 6,
      "file": "server/routes/analyze/index.js"
    },
    {
      "name": "_simulateDependencyAnalysis",
      "parameters": [
        "targetPath",
        "config"
      ],
      "line": 634,
      "isAsync": false,
      "isExported": false,
      "complexity": 126,
      "length": 7,
      "file": "server/routes/analyze/index.js"
    },
    {
      "name": "_simulateComplexityAnalysis",
      "parameters": [
        "targetPath",
        "config"
      ],
      "line": 642,
      "isAsync": false,
      "isExported": false,
      "complexity": 139,
      "length": 7,
      "file": "server/routes/analyze/index.js"
    },
    {
      "name": "createReportsRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 9164,
      "length": 284,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_collectAllAnalysisData",
      "parameters": [
        "targetPath",
        "analysisTypes",
        "language"
      ],
      "line": 306,
      "isAsync": false,
      "isExported": false,
      "complexity": 1130,
      "length": 51,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generateComprehensiveReport",
      "parameters": [
        "analysisData",
        "template",
        "format",
        "includeCharts",
        "promptService"
      ],
      "line": 367,
      "isAsync": false,
      "isExported": false,
      "complexity": 1448,
      "length": 47,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generateTrendReport",
      "parameters": [
        "targetPath",
        "timeRange",
        "metrics",
        "language"
      ],
      "line": 423,
      "isAsync": false,
      "isExported": false,
      "complexity": 1102,
      "length": 47,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_exportAnalysisData",
      "parameters": [
        "targetPath",
        "exportFormat",
        "dataTypes"
      ],
      "line": 478,
      "isAsync": false,
      "isExported": false,
      "complexity": 879,
      "length": 41,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generateComparisonReport",
      "parameters": [
        "baselinePath",
        "targetPath",
        "comparisonType",
        "language"
      ],
      "line": 528,
      "isAsync": false,
      "isExported": false,
      "complexity": 1610,
      "length": 47,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_countDataPoints",
      "parameters": [
        "analysisData"
      ],
      "line": 577,
      "isAsync": false,
      "isExported": false,
      "complexity": 248,
      "length": 11,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_calculateOverallHealth",
      "parameters": [
        "analysisData"
      ],
      "line": 589,
      "isAsync": false,
      "isExported": false,
      "complexity": 454,
      "length": 12,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_extractKeyMetrics",
      "parameters": [
        "analysisData"
      ],
      "line": 602,
      "isAsync": false,
      "isExported": false,
      "complexity": 296,
      "length": 8,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generateTopRecommendations",
      "parameters": [
        "analysisData"
      ],
      "line": 611,
      "isAsync": false,
      "isExported": false,
      "complexity": 106,
      "length": 8,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_identifyStrengths",
      "parameters": [
        "analysisData"
      ],
      "line": 620,
      "isAsync": false,
      "isExported": false,
      "complexity": 80,
      "length": 7,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_identifyWeaknesses",
      "parameters": [
        "analysisData"
      ],
      "line": 628,
      "isAsync": false,
      "isExported": false,
      "complexity": 82,
      "length": 7,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_identifyOpportunities",
      "parameters": [
        "analysisData"
      ],
      "line": 636,
      "isAsync": false,
      "isExported": false,
      "complexity": 80,
      "length": 7,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_identifyRisks",
      "parameters": [
        "analysisData"
      ],
      "line": 644,
      "isAsync": false,
      "isExported": false,
      "complexity": 84,
      "length": 7,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generateActionPlan",
      "parameters": [
        "analysisData"
      ],
      "line": 652,
      "isAsync": false,
      "isExported": false,
      "complexity": 256,
      "length": 16,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generateGlossary",
      "parameters": [],
      "line": 669,
      "isAsync": false,
      "isExported": false,
      "complexity": 155,
      "length": 7,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generateReferences",
      "parameters": [],
      "line": 677,
      "isAsync": false,
      "isExported": false,
      "complexity": 150,
      "length": 7,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generateChartData",
      "parameters": [
        "analysisData"
      ],
      "line": 685,
      "isAsync": false,
      "isExported": false,
      "complexity": 311,
      "length": 14,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generateHistoricalData",
      "parameters": [
        "timeRange",
        "metrics"
      ],
      "line": 700,
      "isAsync": false,
      "isExported": false,
      "complexity": 148,
      "length": 7,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generateHTMLReport",
      "parameters": [
        "report"
      ],
      "line": 708,
      "isAsync": false,
      "isExported": false,
      "complexity": 940,
      "length": 32,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generateMarkdownReport",
      "parameters": [
        "report"
      ],
      "line": 741,
      "isAsync": false,
      "isExported": false,
      "complexity": 613,
      "length": 35,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generatePDFReport",
      "parameters": [
        "report"
      ],
      "line": 777,
      "isAsync": false,
      "isExported": false,
      "complexity": 112,
      "length": 4,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generateCSV",
      "parameters": [
        "data"
      ],
      "line": 782,
      "isAsync": false,
      "isExported": false,
      "complexity": 208,
      "length": 7,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "_generateXLSX",
      "parameters": [
        "data"
      ],
      "line": 790,
      "isAsync": false,
      "isExported": false,
      "complexity": 70,
      "length": 4,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "name": "createDependenciesRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 12131,
      "length": 290,
      "file": "server/routes/analyze/dependencies.js"
    },
    {
      "name": "_performDependencyAnalysis",
      "parameters": [
        "targetPath",
        "options",
        "language",
        "promptService"
      ],
      "line": 313,
      "isAsync": false,
      "isExported": false,
      "complexity": 158,
      "length": 9,
      "file": "server/routes/analyze/dependencies.js"
    },
    {
      "name": "_generateDependencyRecommendations",
      "parameters": [
        "dependencyAnalysis",
        "language",
        "promptService"
      ],
      "line": 330,
      "isAsync": false,
      "isExported": false,
      "complexity": 131,
      "length": 7,
      "file": "server/routes/analyze/dependencies.js"
    },
    {
      "name": "createPerformanceRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 10732,
      "length": 264,
      "file": "server/routes/analyze/performance.js"
    },
    {
      "name": "_performPerformanceAnalysis",
      "parameters": [
        "targetPath",
        "options",
        "language",
        "promptService"
      ],
      "line": 287,
      "isAsync": false,
      "isExported": false,
      "complexity": 162,
      "length": 9,
      "file": "server/routes/analyze/performance.js"
    },
    {
      "name": "_generatePerformanceRecommendations",
      "parameters": [
        "performanceAnalysis",
        "language",
        "promptService"
      ],
      "line": 304,
      "isAsync": false,
      "isExported": false,
      "complexity": 131,
      "length": 7,
      "file": "server/routes/analyze/performance.js"
    },
    {
      "name": "createFeatureRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 58980,
      "length": 1560,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateTaskBreakdown",
      "parameters": [
        "featureName",
        "requirements",
        "complexity"
      ],
      "line": 1582,
      "isAsync": false,
      "isExported": false,
      "complexity": 2292,
      "length": 71,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateEstimation",
      "parameters": [
        "requirements",
        "complexity"
      ],
      "line": 1660,
      "isAsync": false,
      "isExported": false,
      "complexity": 802,
      "length": 24,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateTechnicalDesign",
      "parameters": [
        "featureName",
        "requirements",
        "language",
        "unifiedTemplateService"
      ],
      "line": 1693,
      "isAsync": false,
      "isExported": false,
      "complexity": 1569,
      "length": 38,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateMilestones",
      "parameters": [
        "featureName",
        "requirements"
      ],
      "line": 1738,
      "isAsync": false,
      "isExported": false,
      "complexity": 836,
      "length": 32,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateRiskAssessment",
      "parameters": [
        "complexity",
        "dependencies"
      ],
      "line": 1777,
      "isAsync": false,
      "isExported": false,
      "complexity": 749,
      "length": 30,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateDeliverables",
      "parameters": [
        "featurePlan"
      ],
      "line": 1813,
      "isAsync": false,
      "isExported": false,
      "complexity": 621,
      "length": 28,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateTechnicalComponents",
      "parameters": [
        "featureName",
        "language"
      ],
      "line": 1848,
      "isAsync": false,
      "isExported": false,
      "complexity": 710,
      "length": 28,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateTechnicalDataFlow",
      "parameters": [
        "requirements"
      ],
      "line": 1882,
      "isAsync": false,
      "isExported": false,
      "complexity": 210,
      "length": 8,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateTechnicalAPIs",
      "parameters": [
        "featureName",
        "requirements"
      ],
      "line": 1897,
      "isAsync": false,
      "isExported": false,
      "complexity": 903,
      "length": 35,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateDatabaseDesign",
      "parameters": [
        "featureName",
        "requirements"
      ],
      "line": 1939,
      "isAsync": false,
      "isExported": false,
      "complexity": 806,
      "length": 20,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateSecurityConsiderations",
      "parameters": [
        "requirements"
      ],
      "line": 1965,
      "isAsync": false,
      "isExported": false,
      "complexity": 522,
      "length": 24,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generatePerformanceConsiderations",
      "parameters": [
        "requirements"
      ],
      "line": 1995,
      "isAsync": false,
      "isExported": false,
      "complexity": 517,
      "length": 24,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateComponentArchitecture",
      "parameters": [
        "components",
        "language"
      ],
      "line": 2021,
      "isAsync": false,
      "isExported": false,
      "complexity": 244,
      "length": 8,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateLayerArchitecture",
      "parameters": [
        "featureName",
        "language"
      ],
      "line": 2030,
      "isAsync": false,
      "isExported": false,
      "complexity": 207,
      "length": 8,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_suggestDesignPatterns",
      "parameters": [
        "components",
        "integrations"
      ],
      "line": 2039,
      "isAsync": false,
      "isExported": false,
      "complexity": 275,
      "length": 13,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateInterfaces",
      "parameters": [
        "components",
        "language"
      ],
      "line": 2053,
      "isAsync": false,
      "isExported": false,
      "complexity": 143,
      "length": 6,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateDataModel",
      "parameters": [
        "dataFlow",
        "language"
      ],
      "line": 2060,
      "isAsync": false,
      "isExported": false,
      "complexity": 243,
      "length": 10,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateIntegrationDesign",
      "parameters": [
        "integrations"
      ],
      "line": 2071,
      "isAsync": false,
      "isExported": false,
      "complexity": 265,
      "length": 8,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateDeploymentArchitecture",
      "parameters": [
        "featureName"
      ],
      "line": 2080,
      "isAsync": false,
      "isExported": false,
      "complexity": 299,
      "length": 8,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateArchitectureDocumentation",
      "parameters": [
        "featureName",
        "language",
        "unifiedTemplateService"
      ],
      "line": 2089,
      "isAsync": false,
      "isExported": false,
      "complexity": 614,
      "length": 21,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateArchitectureDiagrams",
      "parameters": [
        "architectureDesign"
      ],
      "line": 2111,
      "isAsync": false,
      "isExported": false,
      "complexity": 367,
      "length": 19,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateScaffolding",
      "parameters": [
        "architectureDesign",
        "language"
      ],
      "line": 2131,
      "isAsync": false,
      "isExported": false,
      "complexity": 346,
      "length": 15,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateBoilerplateCode",
      "parameters": [
        "architectureDesign",
        "language"
      ],
      "line": 2147,
      "isAsync": false,
      "isExported": false,
      "complexity": 314,
      "length": 8,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generatePrototypeComponents",
      "parameters": [
        "featureName",
        "language",
        "promptService"
      ],
      "line": 2156,
      "isAsync": false,
      "isExported": false,
      "complexity": 470,
      "length": 19,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateMockData",
      "parameters": [
        "mockData",
        "userFlows"
      ],
      "line": 2176,
      "isAsync": false,
      "isExported": false,
      "complexity": 224,
      "length": 10,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateUserFlowPrototypes",
      "parameters": [
        "userFlows",
        "language"
      ],
      "line": 2187,
      "isAsync": false,
      "isExported": false,
      "complexity": 223,
      "length": 7,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateInteractionPrototypes",
      "parameters": [
        "userFlows"
      ],
      "line": 2195,
      "isAsync": false,
      "isExported": false,
      "complexity": 177,
      "length": 7,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generatePrototypeTests",
      "parameters": [
        "featureName",
        "language"
      ],
      "line": 2203,
      "isAsync": false,
      "isExported": false,
      "complexity": 188,
      "length": 8,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_getPrototypeFiles",
      "parameters": [
        "featureName",
        "language"
      ],
      "line": 2212,
      "isAsync": false,
      "isExported": false,
      "complexity": 267,
      "length": 9,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_getPrototypeDemoEndpoints",
      "parameters": [
        "featureName"
      ],
      "line": 2222,
      "isAsync": false,
      "isExported": false,
      "complexity": 170,
      "length": 7,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_getPrototypeDemoInstructions",
      "parameters": [
        "featureName"
      ],
      "line": 2230,
      "isAsync": false,
      "isExported": false,
      "complexity": 123,
      "length": 7,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_categorizeRequirements",
      "parameters": [
        "requirements"
      ],
      "line": 2245,
      "isAsync": false,
      "isExported": false,
      "complexity": 1449,
      "length": 30,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_validateRequirements",
      "parameters": [
        "requirements",
        "context"
      ],
      "line": 2282,
      "isAsync": false,
      "isExported": false,
      "complexity": 2230,
      "length": 75,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_decomposeToUserStories",
      "parameters": [
        "requirements",
        "stakeholders"
      ],
      "line": 2364,
      "isAsync": false,
      "isExported": false,
      "complexity": 900,
      "length": 23,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_analyzeFeasibility",
      "parameters": [
        "requirements",
        "constraints",
        "language"
      ],
      "line": 2395,
      "isAsync": false,
      "isExported": false,
      "complexity": 2096,
      "length": 57,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_assessPriority",
      "parameters": [
        "requirements",
        "businessGoals"
      ],
      "line": 2459,
      "isAsync": false,
      "isExported": false,
      "complexity": 557,
      "length": 14,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_analyzeDependencies",
      "parameters": [
        "requirements"
      ],
      "line": 2479,
      "isAsync": false,
      "isExported": false,
      "complexity": 1385,
      "length": 49,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_identifyRequirementRisks",
      "parameters": [
        "requirements",
        "constraints"
      ],
      "line": 2535,
      "isAsync": false,
      "isExported": false,
      "complexity": 1248,
      "length": 51,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateRequirementsRecommendations",
      "parameters": [
        "analysis"
      ],
      "line": 2592,
      "isAsync": false,
      "isExported": false,
      "complexity": 1627,
      "length": 63,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_normalizeUserStories",
      "parameters": [
        "userStories"
      ],
      "line": 2663,
      "isAsync": false,
      "isExported": false,
      "complexity": 763,
      "length": 17,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateAcceptanceCriteria",
      "parameters": [
        "userStories"
      ],
      "line": 2686,
      "isAsync": false,
      "isExported": false,
      "complexity": 287,
      "length": 11,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_estimateUserStories",
      "parameters": [
        "userStories"
      ],
      "line": 2703,
      "isAsync": false,
      "isExported": false,
      "complexity": 806,
      "length": 16,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_prioritizeUserStories",
      "parameters": [
        "userStories"
      ],
      "line": 2725,
      "isAsync": false,
      "isExported": false,
      "complexity": 355,
      "length": 11,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_groupIntoEpics",
      "parameters": [
        "userStories"
      ],
      "line": 2742,
      "isAsync": false,
      "isExported": false,
      "complexity": 939,
      "length": 33,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateUserStoriesDocument",
      "parameters": [
        "userStories",
        "format",
        "templateType",
        "unifiedTemplateService"
      ],
      "line": 2784,
      "isAsync": false,
      "isExported": false,
      "complexity": 1573,
      "length": 48,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateUserStoriesDeliverables",
      "parameters": [
        "document"
      ],
      "line": 2838,
      "isAsync": false,
      "isExported": false,
      "complexity": 660,
      "length": 28,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_calculateUserStoriesMetrics",
      "parameters": [
        "document"
      ],
      "line": 2872,
      "isAsync": false,
      "isExported": false,
      "complexity": 962,
      "length": 23,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_findDuplicateRequirements",
      "parameters": [
        "requirements"
      ],
      "line": 2898,
      "isAsync": false,
      "isExported": false,
      "complexity": 384,
      "length": 15,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_inferPriority",
      "parameters": [
        "requirement"
      ],
      "line": 2914,
      "isAsync": false,
      "isExported": false,
      "complexity": 450,
      "length": 12,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_estimateStoryPoints",
      "parameters": [
        "description"
      ],
      "line": 2927,
      "isAsync": false,
      "isExported": false,
      "complexity": 207,
      "length": 9,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateBasicAcceptanceCriteria",
      "parameters": [
        "requirement"
      ],
      "line": 2937,
      "isAsync": false,
      "isExported": false,
      "complexity": 130,
      "length": 8,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_extractTags",
      "parameters": [
        "requirement"
      ],
      "line": 2946,
      "isAsync": false,
      "isExported": false,
      "complexity": 389,
      "length": 12,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_identifyEpic",
      "parameters": [
        "requirement"
      ],
      "line": 2959,
      "isAsync": false,
      "isExported": false,
      "complexity": 460,
      "length": 11,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_assessTechnicalComplexity",
      "parameters": [
        "requirements",
        "language"
      ],
      "line": 2971,
      "isAsync": false,
      "isExported": false,
      "complexity": 771,
      "length": 16,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_assessBusinessValue",
      "parameters": [
        "requirement",
        "businessGoals"
      ],
      "line": 2988,
      "isAsync": false,
      "isExported": false,
      "complexity": 730,
      "length": 19,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_assessImplementationEffort",
      "parameters": [
        "requirement"
      ],
      "line": 3008,
      "isAsync": false,
      "isExported": false,
      "complexity": 401,
      "length": 10,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_assessRiskLevel",
      "parameters": [
        "requirement"
      ],
      "line": 3019,
      "isAsync": false,
      "isExported": false,
      "complexity": 395,
      "length": 10,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateImplementationSequence",
      "parameters": [
        "groups"
      ],
      "line": 3030,
      "isAsync": false,
      "isExported": false,
      "complexity": 428,
      "length": 20,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateArchitectureReport",
      "parameters": [
        "archResult"
      ],
      "line": 3056,
      "isAsync": false,
      "isExported": false,
      "complexity": 1858,
      "length": 51,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateModulesReport",
      "parameters": [
        "modulesResult"
      ],
      "line": 3113,
      "isAsync": false,
      "isExported": false,
      "complexity": 1723,
      "length": 48,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateContractsReport",
      "parameters": [
        "contractsResult"
      ],
      "line": 3167,
      "isAsync": false,
      "isExported": false,
      "complexity": 2955,
      "length": 81,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateTodoReport",
      "parameters": [
        "todoResult"
      ],
      "line": 3254,
      "isAsync": false,
      "isExported": false,
      "complexity": 2311,
      "length": 63,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "_generateTechDesignReport",
      "parameters": [
        "designResult"
      ],
      "line": 3323,
      "isAsync": false,
      "isExported": false,
      "complexity": 1823,
      "length": 54,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "story => {\n        const epic = story.epic || '通用功能';\n        if (!epics[epic]"
      ],
      "line": 2745,
      "isAsync": false,
      "isExported": false,
      "complexity": 356,
      "length": 13,
      "file": "server/routes/create/features.js"
    },
    {
      "name": "createCreateModeRoutes",
      "parameters": [
        "services"
      ],
      "line": 18,
      "isAsync": false,
      "isExported": false,
      "complexity": 9513,
      "length": 282,
      "file": "server/routes/create/index.js"
    },
    {
      "name": "createLanguagePromptsRoutes",
      "parameters": [
        "services"
      ],
      "line": 30,
      "isAsync": false,
      "isExported": false,
      "complexity": 12857,
      "length": 298,
      "file": "server/routes/init/prompts.js"
    },
    {
      "name": "constructor",
      "parameters": [
        "configDir = './config'"
      ],
      "line": 10,
      "isAsync": false,
      "isExported": false,
      "complexity": 168,
      "length": 6,
      "file": "server/services/config-service.js"
    },
    {
      "name": "_loadDefaultConfig",
      "parameters": [],
      "line": 21,
      "isAsync": false,
      "isExported": false,
      "complexity": 1489,
      "length": 50,
      "file": "server/services/config-service.js"
    },
    {
      "name": "_loadConfigFiles",
      "parameters": [],
      "line": 75,
      "isAsync": false,
      "isExported": false,
      "complexity": 1227,
      "length": 30,
      "file": "server/services/config-service.js"
    },
    {
      "name": "_mergeConfig",
      "parameters": [
        "target",
        "source"
      ],
      "line": 111,
      "isAsync": false,
      "isExported": false,
      "complexity": 524,
      "length": 14,
      "file": "server/services/config-service.js"
    },
    {
      "name": "_applyEnvironmentOverrides",
      "parameters": [],
      "line": 129,
      "isAsync": false,
      "isExported": false,
      "complexity": 796,
      "length": 26,
      "file": "server/services/config-service.js"
    },
    {
      "name": "get",
      "parameters": [
        "path",
        "defaultValue = null"
      ],
      "line": 162,
      "isAsync": false,
      "isExported": false,
      "complexity": 345,
      "length": 14,
      "file": "server/services/config-service.js"
    },
    {
      "name": "set",
      "parameters": [
        "path",
        "value"
      ],
      "line": 182,
      "isAsync": false,
      "isExported": false,
      "complexity": 361,
      "length": 14,
      "file": "server/services/config-service.js"
    },
    {
      "name": "getServerConfig",
      "parameters": [],
      "line": 201,
      "isAsync": false,
      "isExported": false,
      "complexity": 202,
      "length": 8,
      "file": "server/services/config-service.js"
    },
    {
      "name": "getMCPConfig",
      "parameters": [],
      "line": 214,
      "isAsync": false,
      "isExported": false,
      "complexity": 146,
      "length": 6,
      "file": "server/services/config-service.js"
    },
    {
      "name": "getPromptConfig",
      "parameters": [],
      "line": 225,
      "isAsync": false,
      "isExported": false,
      "complexity": 248,
      "length": 8,
      "file": "server/services/config-service.js"
    },
    {
      "name": "getAnalyzersConfig",
      "parameters": [],
      "line": 238,
      "isAsync": false,
      "isExported": false,
      "complexity": 45,
      "length": 3,
      "file": "server/services/config-service.js"
    },
    {
      "name": "getWorkflowConfig",
      "parameters": [],
      "line": 246,
      "isAsync": false,
      "isExported": false,
      "complexity": 44,
      "length": 3,
      "file": "server/services/config-service.js"
    },
    {
      "name": "validate",
      "parameters": [],
      "line": 254,
      "isAsync": false,
      "isExported": false,
      "complexity": 931,
      "length": 37,
      "file": "server/services/config-service.js"
    },
    {
      "name": "getEnvironmentInfo",
      "parameters": [],
      "line": 296,
      "isAsync": false,
      "isExported": false,
      "complexity": 332,
      "length": 10,
      "file": "server/services/config-service.js"
    },
    {
      "name": "getAll",
      "parameters": [],
      "line": 311,
      "isAsync": false,
      "isExported": false,
      "complexity": 42,
      "length": 3,
      "file": "server/services/config-service.js"
    },
    {
      "name": "reload",
      "parameters": [],
      "line": 318,
      "isAsync": false,
      "isExported": false,
      "complexity": 50,
      "length": 3,
      "file": "server/services/config-service.js"
    },
    {
      "name": "isAuthEnabled",
      "parameters": [],
      "line": 326,
      "isAsync": false,
      "isExported": false,
      "complexity": 44,
      "length": 3,
      "file": "server/services/config-service.js"
    },
    {
      "name": "validateApiKey",
      "parameters": [
        "providedKey"
      ],
      "line": 335,
      "isAsync": false,
      "isExported": false,
      "complexity": 121,
      "length": 4,
      "file": "server/services/config-service.js"
    },
    {
      "name": "getDebugInfo",
      "parameters": [],
      "line": 344,
      "isAsync": false,
      "isExported": false,
      "complexity": 396,
      "length": 15,
      "file": "server/services/config-service.js"
    },
    {
      "name": "generateIntentRecommendations",
      "parameters": [
        "intentAnalysis",
        "language"
      ],
      "line": 423,
      "isAsync": false,
      "isExported": false,
      "complexity": 741,
      "length": 29,
      "file": "server/routes/language/prompts.js"
    },
    {
      "name": "calculateCategoryStats",
      "parameters": [
        "categories"
      ],
      "line": 457,
      "isAsync": false,
      "isExported": false,
      "complexity": 417,
      "length": 15,
      "file": "server/routes/language/prompts.js"
    },
    {
      "name": "generateBatchSummary",
      "parameters": [
        "results"
      ],
      "line": 477,
      "isAsync": false,
      "isExported": false,
      "complexity": 651,
      "length": 24,
      "file": "server/routes/language/prompts.js"
    },
    {
      "name": "summarizeLanguages",
      "parameters": [
        "results"
      ],
      "line": 295,
      "isAsync": false,
      "isExported": false,
      "complexity": 251,
      "length": 10,
      "file": "server/routes/language/detection.js"
    },
    {
      "name": "summarizeFrameworks",
      "parameters": [
        "results"
      ],
      "line": 310,
      "isAsync": false,
      "isExported": false,
      "complexity": 348,
      "length": 12,
      "file": "server/routes/language/detection.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "result => {\n        const lang = result.detection.language;\n        if (lang && lang !== 'unknown'"
      ],
      "line": 297,
      "isAsync": false,
      "isExported": false,
      "complexity": 167,
      "length": 6,
      "file": "server/routes/language/detection.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "result => {\n        if (result.detection.frameworks"
      ],
      "line": 312,
      "isAsync": false,
      "isExported": false,
      "complexity": 262,
      "length": 8,
      "file": "server/routes/language/detection.js"
    },
    {
      "name": "processRequest",
      "parameters": [
        "request",
        "index"
      ],
      "line": 460,
      "isAsync": false,
      "isExported": false,
      "complexity": 1014,
      "length": 31,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 16,
      "isAsync": false,
      "isExported": false,
      "complexity": 211,
      "length": 5,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "generateTemplate",
      "parameters": [
        "projectPath",
        "templateName"
      ],
      "line": 28,
      "isAsync": true,
      "isExported": false,
      "complexity": 1725,
      "length": 48,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "loadLanguageConfig",
      "parameters": [
        "language"
      ],
      "line": 82,
      "isAsync": true,
      "isExported": false,
      "complexity": 594,
      "length": 17,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "loadLanguageDefaults",
      "parameters": [
        "language"
      ],
      "line": 105,
      "isAsync": true,
      "isExported": false,
      "complexity": 643,
      "length": 17,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "loadBaseTemplate",
      "parameters": [
        "templateName"
      ],
      "line": 128,
      "isAsync": true,
      "isExported": false,
      "complexity": 270,
      "length": 9,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "loadLanguageTemplate",
      "parameters": [
        "language",
        "templateName"
      ],
      "line": 144,
      "isAsync": true,
      "isExported": false,
      "complexity": 268,
      "length": 9,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "renderTemplate",
      "parameters": [
        "template",
        "defaults",
        "detection",
        "config"
      ],
      "line": 162,
      "isAsync": false,
      "isExported": false,
      "complexity": 907,
      "length": 29,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "extractFrameworkVariables",
      "parameters": [
        "frameworks",
        "config"
      ],
      "line": 198,
      "isAsync": false,
      "isExported": false,
      "complexity": 983,
      "length": 26,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "extractProjectVariables",
      "parameters": [
        "detection"
      ],
      "line": 230,
      "isAsync": false,
      "isExported": false,
      "complexity": 321,
      "length": 8,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "replaceTemplateVariables",
      "parameters": [
        "template",
        "variables"
      ],
      "line": 245,
      "isAsync": false,
      "isExported": false,
      "complexity": 969,
      "length": 28,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "addLanguageSpecificNotes",
      "parameters": [
        "template",
        "language",
        "suggestions"
      ],
      "line": 281,
      "isAsync": false,
      "isExported": false,
      "complexity": 580,
      "length": 28,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "generateFallbackTemplate",
      "parameters": [
        "templateName"
      ],
      "line": 315,
      "isAsync": true,
      "isExported": false,
      "complexity": 601,
      "length": 25,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "getLanguageDocUrl",
      "parameters": [
        "language"
      ],
      "line": 346,
      "isAsync": false,
      "isExported": false,
      "complexity": 439,
      "length": 12,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "getBestPracticesUrl",
      "parameters": [
        "language"
      ],
      "line": 364,
      "isAsync": false,
      "isExported": false,
      "complexity": 460,
      "length": 12,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "getCommunityUrl",
      "parameters": [
        "language"
      ],
      "line": 382,
      "isAsync": false,
      "isExported": false,
      "complexity": 462,
      "length": 12,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "generateMultipleTemplates",
      "parameters": [
        "projectPath",
        "templateNames"
      ],
      "line": 401,
      "isAsync": true,
      "isExported": false,
      "complexity": 909,
      "length": 27,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "batchGenerate",
      "parameters": [
        "requests",
        "batchOptions = {}"
      ],
      "line": 435,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "result => {\n                    if (result.success"
      ],
      "line": 507,
      "isAsync": false,
      "isExported": false,
      "complexity": 205,
      "length": 7,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 11,
      "isAsync": false,
      "isExported": false,
      "complexity": 407,
      "length": 14,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "detectProjectLanguage",
      "parameters": [
        "projectPath",
        "options = {}"
      ],
      "line": 32,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getSupportedLanguages",
      "parameters": [],
      "line": 83,
      "isAsync": false,
      "isExported": false,
      "complexity": 897,
      "length": 26,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getLanguageFrameworks",
      "parameters": [
        "language"
      ],
      "line": 115,
      "isAsync": false,
      "isExported": false,
      "complexity": 814,
      "length": 22,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "generateLanguageTemplate",
      "parameters": [
        "languageDetection",
        "options = {}"
      ],
      "line": 144,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getLanguageTemplateVariants",
      "parameters": [
        "language",
        "templateName = null"
      ],
      "line": 189,
      "isAsync": true,
      "isExported": false,
      "complexity": 822,
      "length": 25,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "batchGenerateTemplates",
      "parameters": [
        "requests"
      ],
      "line": 220,
      "isAsync": true,
      "isExported": false,
      "complexity": 402,
      "length": 13,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getLanguageSpecificPrompts",
      "parameters": [
        "language",
        "options = {}"
      ],
      "line": 240,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "generateContextualPrompts",
      "parameters": [
        "contextData"
      ],
      "line": 284,
      "isAsync": true,
      "isExported": false,
      "complexity": 438,
      "length": 13,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getBestPracticesPrompts",
      "parameters": [
        "language",
        "context = 'general'"
      ],
      "line": 304,
      "isAsync": true,
      "isExported": false,
      "complexity": 703,
      "length": 20,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "clearCache",
      "parameters": [
        "type = 'all'"
      ],
      "line": 329,
      "isAsync": false,
      "isExported": false,
      "complexity": 523,
      "length": 18,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getServiceStats",
      "parameters": [],
      "line": 352,
      "isAsync": false,
      "isExported": false,
      "complexity": 916,
      "length": 24,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "setCache",
      "parameters": [
        "cache",
        "key",
        "data"
      ],
      "line": 383,
      "isAsync": false,
      "isExported": false,
      "complexity": 256,
      "length": 11,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getLanguageCapabilities",
      "parameters": [
        "language"
      ],
      "line": 399,
      "isAsync": false,
      "isExported": false,
      "complexity": 517,
      "length": 12,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "generateLanguageRecommendations",
      "parameters": [
        "detection"
      ],
      "line": 416,
      "isAsync": false,
      "isExported": false,
      "complexity": 558,
      "length": 21,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getLanguageDisplayName",
      "parameters": [
        "language"
      ],
      "line": 442,
      "isAsync": false,
      "isExported": false,
      "complexity": 266,
      "length": 11,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getLanguageMaturityLevel",
      "parameters": [
        "language"
      ],
      "line": 458,
      "isAsync": false,
      "isExported": false,
      "complexity": 270,
      "length": 11,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "categorizeLanguages",
      "parameters": [
        "languages"
      ],
      "line": 474,
      "isAsync": false,
      "isExported": false,
      "complexity": 352,
      "length": 11,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getFrameworkDisplayName",
      "parameters": [
        "framework"
      ],
      "line": 490,
      "isAsync": false,
      "isExported": false,
      "complexity": 299,
      "length": 12,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getFrameworkCategory",
      "parameters": [
        "framework"
      ],
      "line": 507,
      "isAsync": false,
      "isExported": false,
      "complexity": 315,
      "length": 12,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getFrameworkPopularity",
      "parameters": [
        "framework"
      ],
      "line": 524,
      "isAsync": false,
      "isExported": false,
      "complexity": 306,
      "length": 12,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getFrameworkDocumentation",
      "parameters": [
        "framework"
      ],
      "line": 541,
      "isAsync": false,
      "isExported": false,
      "complexity": 447,
      "length": 12,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "categorizeFrameworks",
      "parameters": [
        "frameworks"
      ],
      "line": 558,
      "isAsync": false,
      "isExported": false,
      "complexity": 267,
      "length": 7,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "calculateHitRate",
      "parameters": [
        "cache"
      ],
      "line": 570,
      "isAsync": false,
      "isExported": false,
      "complexity": 80,
      "length": 4,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getPerformanceMetrics",
      "parameters": [],
      "line": 579,
      "isAsync": false,
      "isExported": false,
      "complexity": 200,
      "length": 8,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getAvailableTemplateTypes",
      "parameters": [],
      "line": 592,
      "isAsync": false,
      "isExported": false,
      "complexity": 83,
      "length": 3,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getAvailablePromptCategories",
      "parameters": [],
      "line": 600,
      "isAsync": false,
      "isExported": false,
      "complexity": 84,
      "length": 3,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getTemplateRecommendations",
      "parameters": [],
      "line": 608,
      "isAsync": false,
      "isExported": false,
      "complexity": 14,
      "length": 1,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "getTemplateUsageGuidelines",
      "parameters": [],
      "line": 609,
      "isAsync": false,
      "isExported": false,
      "complexity": 14,
      "length": 1,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "analyzeBatchPerformance",
      "parameters": [],
      "line": 610,
      "isAsync": false,
      "isExported": false,
      "complexity": 14,
      "length": 1,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "generateBatchInsights",
      "parameters": [],
      "line": 611,
      "isAsync": false,
      "isExported": false,
      "complexity": 14,
      "length": 1,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "optimizeContextualPrompts",
      "parameters": [
        "result"
      ],
      "line": 612,
      "isAsync": false,
      "isExported": false,
      "complexity": 18,
      "length": 1,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "extractLearningInsights",
      "parameters": [],
      "line": 613,
      "isAsync": false,
      "isExported": false,
      "complexity": 14,
      "length": 1,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "categorizeBestPractices",
      "parameters": [
        "practices"
      ],
      "line": 614,
      "isAsync": false,
      "isExported": false,
      "complexity": 14,
      "length": 1,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "prioritizeBestPractices",
      "parameters": [
        "practices"
      ],
      "line": 615,
      "isAsync": false,
      "isExported": false,
      "complexity": 21,
      "length": 1,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "generateActionItems",
      "parameters": [],
      "line": 616,
      "isAsync": false,
      "isExported": false,
      "complexity": 14,
      "length": 1,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 11,
      "isAsync": false,
      "isExported": false,
      "complexity": 466,
      "length": 14,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "generateTemplate",
      "parameters": [
        "languageDetection",
        "options = {}"
      ],
      "line": 32,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "getLanguageVariants",
      "parameters": [
        "language",
        "templateName = null"
      ],
      "line": 64,
      "isAsync": true,
      "isExported": false,
      "complexity": 1038,
      "length": 32,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "batchGenerate",
      "parameters": [
        "requests",
        "batchOptions = {}"
      ],
      "line": 103,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "result => {\n                    if (result.success"
      ],
      "line": 149,
      "isAsync": false,
      "isExported": false,
      "complexity": 211,
      "length": 7,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "searchTemplates",
      "parameters": [
        "criteria = {}"
      ],
      "line": 188,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "validateTemplate",
      "parameters": [
        "templateContent",
        "validationOptions = {}"
      ],
      "line": 232,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "getTemplateStats",
      "parameters": [],
      "line": 280,
      "isAsync": false,
      "isExported": false,
      "complexity": 511,
      "length": 14,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "calculateTemplateQuality",
      "parameters": [
        "templates"
      ],
      "line": 301,
      "isAsync": false,
      "isExported": false,
      "complexity": 942,
      "length": 31,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "generateTemplateSuggestions",
      "parameters": [
        "result",
        "options"
      ],
      "line": 337,
      "isAsync": false,
      "isExported": false,
      "complexity": 555,
      "length": 21,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "findRelatedTemplates",
      "parameters": [
        "language"
      ],
      "line": 363,
      "isAsync": true,
      "isExported": false,
      "complexity": 480,
      "length": 15,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "updatePerformanceMetrics",
      "parameters": [
        "duration"
      ],
      "line": 383,
      "isAsync": false,
      "isExported": false,
      "complexity": 221,
      "length": 5,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "analyzeVariants",
      "parameters": [
        "variants"
      ],
      "line": 393,
      "isAsync": false,
      "isExported": false,
      "complexity": 768,
      "length": 23,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "getVariantRecommendations",
      "parameters": [
        "language",
        "variants"
      ],
      "line": 421,
      "isAsync": false,
      "isExported": false,
      "complexity": 452,
      "length": 16,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "getVariantUsageStats",
      "parameters": [
        "language",
        "templateName"
      ],
      "line": 442,
      "isAsync": false,
      "isExported": false,
      "complexity": 202,
      "length": 8,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "chunkArray",
      "parameters": [
        "array",
        "size"
      ],
      "line": 455,
      "isAsync": false,
      "isExported": false,
      "complexity": 174,
      "length": 7,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "generateBatchAnalytics",
      "parameters": [
        "results",
        "errors"
      ],
      "line": 467,
      "isAsync": false,
      "isExported": false,
      "complexity": 1095,
      "length": 33,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "result => {\n            if (result.metadata"
      ],
      "line": 476,
      "isAsync": false,
      "isExported": false,
      "complexity": 401,
      "length": 10,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "findBaseTemplates",
      "parameters": [
        "keyword",
        "category"
      ],
      "line": 505,
      "isAsync": true,
      "isExported": false,
      "complexity": 1037,
      "length": 27,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "findLanguageVariants",
      "parameters": [
        "language",
        "keyword",
        "category"
      ],
      "line": 537,
      "isAsync": true,
      "isExported": false,
      "complexity": 1137,
      "length": 30,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "generateSearchSuggestions",
      "parameters": [],
      "line": 572,
      "isAsync": false,
      "isExported": false,
      "complexity": 14,
      "length": 1,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "validateTemplateSyntax",
      "parameters": [],
      "line": 573,
      "isAsync": false,
      "isExported": false,
      "complexity": 3,
      "length": 1,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "validateTemplateVariables",
      "parameters": [],
      "line": 574,
      "isAsync": false,
      "isExported": false,
      "complexity": 3,
      "length": 1,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "validateTemplateStructure",
      "parameters": [],
      "line": 575,
      "isAsync": false,
      "isExported": false,
      "complexity": 3,
      "length": 1,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "getBaseTemplateCount",
      "parameters": [],
      "line": 576,
      "isAsync": false,
      "isExported": false,
      "complexity": 13,
      "length": 1,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "getLanguageVariantCount",
      "parameters": [],
      "line": 577,
      "isAsync": false,
      "isExported": false,
      "complexity": 13,
      "length": 1,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "getTotalTemplateCount",
      "parameters": [],
      "line": 578,
      "isAsync": false,
      "isExported": false,
      "complexity": 13,
      "length": 1,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "categorizeError",
      "parameters": [
        "error"
      ],
      "line": 579,
      "isAsync": false,
      "isExported": false,
      "complexity": 21,
      "length": 1,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "detectTemplateCategory",
      "parameters": [
        "name"
      ],
      "line": 580,
      "isAsync": false,
      "isExported": false,
      "complexity": 21,
      "length": 1,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 11,
      "isAsync": false,
      "isExported": false,
      "complexity": 3611,
      "length": 84,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "getLanguageSpecificPrompts",
      "parameters": [
        "language",
        "options = {}"
      ],
      "line": 102,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "generateContextualPrompts",
      "parameters": [
        "contextData"
      ],
      "line": 173,
      "isAsync": true,
      "isExported": false,
      "complexity": 1572,
      "length": 51,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "getBestPractices",
      "parameters": [
        "language",
        "context = 'general'"
      ],
      "line": 231,
      "isAsync": true,
      "isExported": false,
      "complexity": 1137,
      "length": 28,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "analyzeUserIntent",
      "parameters": [
        "userIntent",
        "currentTask"
      ],
      "line": 264,
      "isAsync": false,
      "isExported": false,
      "complexity": 794,
      "length": 26,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "buildContextualPrompts",
      "parameters": [
        "detection",
        "intentAnalysis",
        "previousActions",
        "constraints"
      ],
      "line": 295,
      "isAsync": true,
      "isExported": false,
      "complexity": 1343,
      "length": 43,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "generateSmartSuggestions",
      "parameters": [
        "detection",
        "intentAnalysis",
        "contextualPrompts"
      ],
      "line": 343,
      "isAsync": true,
      "isExported": false,
      "complexity": 1011,
      "length": 32,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "getDefaultBestPractices",
      "parameters": [
        "language",
        "context"
      ],
      "line": 380,
      "isAsync": false,
      "isExported": false,
      "complexity": 811,
      "length": 22,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "getExamples",
      "parameters": [
        "language",
        "framework"
      ],
      "line": 407,
      "isAsync": true,
      "isExported": false,
      "complexity": 690,
      "length": 21,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "getIntentPrompts",
      "parameters": [
        "intent",
        "language",
        "frameworks"
      ],
      "line": 433,
      "isAsync": false,
      "isExported": false,
      "complexity": 528,
      "length": 18,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "mapIntentToCategory",
      "parameters": [
        "intent"
      ],
      "line": 456,
      "isAsync": false,
      "isExported": false,
      "complexity": 295,
      "length": 11,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "getPrimaryFramework",
      "parameters": [
        "frameworks"
      ],
      "line": 472,
      "isAsync": false,
      "isExported": false,
      "complexity": 149,
      "length": 6,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "generateContextualAdvice",
      "parameters": [
        "previousActions",
        "intent"
      ],
      "line": 483,
      "isAsync": false,
      "isExported": false,
      "complexity": 197,
      "length": 8,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "generateConstraintPrompts",
      "parameters": [
        "constraints"
      ],
      "line": 496,
      "isAsync": false,
      "isExported": false,
      "complexity": 196,
      "length": 7,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "getIntentSuggestions",
      "parameters": [
        "intent",
        "language"
      ],
      "line": 508,
      "isAsync": false,
      "isExported": false,
      "complexity": 171,
      "length": 8,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "getFrameworkSuggestions",
      "parameters": [
        "framework",
        "intent"
      ],
      "line": 521,
      "isAsync": false,
      "isExported": false,
      "complexity": 195,
      "length": 8,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "countPrompts",
      "parameters": [
        "prompts"
      ],
      "line": 534,
      "isAsync": false,
      "isExported": false,
      "complexity": 329,
      "length": 11,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "getSupportedLanguages",
      "parameters": [],
      "line": 550,
      "isAsync": false,
      "isExported": false,
      "complexity": 57,
      "length": 3,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "isLanguageSupported",
      "parameters": [
        "language"
      ],
      "line": 559,
      "isAsync": false,
      "isExported": false,
      "complexity": 85,
      "length": 3,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "constructor",
      "parameters": [
        "workflowState = null"
      ],
      "line": 9,
      "isAsync": false,
      "isExported": false,
      "complexity": 74,
      "length": 3,
      "file": "server/services/workflow-service.js"
    },
    {
      "name": "createWorkflow",
      "parameters": [
        "projectPath",
        "mode = 'init'"
      ],
      "line": 19,
      "isAsync": false,
      "isExported": false,
      "complexity": 76,
      "length": 3,
      "file": "server/services/workflow-service.js"
    },
    {
      "name": "createWorkflowWithId",
      "parameters": [
        "workflowId",
        "projectPath",
        "mode = 'init'"
      ],
      "line": 30,
      "isAsync": false,
      "isExported": false,
      "complexity": 94,
      "length": 3,
      "file": "server/services/workflow-service.js"
    },
    {
      "name": "getWorkflow",
      "parameters": [
        "workflowId"
      ],
      "line": 39,
      "isAsync": false,
      "isExported": false,
      "complexity": 66,
      "length": 3,
      "file": "server/services/workflow-service.js"
    },
    {
      "name": "updateStep",
      "parameters": [
        "workflowId",
        "stepIndex",
        "status",
        "result = null",
        "error = null"
      ],
      "line": 51,
      "isAsync": false,
      "isExported": false,
      "complexity": 99,
      "length": 3,
      "file": "server/services/workflow-service.js"
    },
    {
      "name": "getProgress",
      "parameters": [
        "workflowId"
      ],
      "line": 60,
      "isAsync": false,
      "isExported": false,
      "complexity": 66,
      "length": 3,
      "file": "server/services/workflow-service.js"
    },
    {
      "name": "getNextStep",
      "parameters": [
        "workflow"
      ],
      "line": 69,
      "isAsync": false,
      "isExported": false,
      "complexity": 64,
      "length": 3,
      "file": "server/services/workflow-service.js"
    },
    {
      "name": "validateWorkflowStep",
      "parameters": [
        "workflowId",
        "requiredStep"
      ],
      "line": 79,
      "isAsync": false,
      "isExported": false,
      "complexity": 603,
      "length": 28,
      "file": "server/services/workflow-service.js"
    },
    {
      "name": "getStepResult",
      "parameters": [
        "workflowId",
        "stepIndex"
      ],
      "line": 114,
      "isAsync": false,
      "isExported": false,
      "complexity": 195,
      "length": 7,
      "file": "server/services/workflow-service.js"
    },
    {
      "name": "getActiveWorkflows",
      "parameters": [],
      "line": 126,
      "isAsync": false,
      "isExported": false,
      "complexity": 152,
      "length": 5,
      "file": "server/services/workflow-service.js"
    },
    {
      "name": "cleanupExpiredWorkflows",
      "parameters": [
        "maxAge = 24 * 60 * 60 * 1000"
      ],
      "line": 136,
      "isAsync": false,
      "isExported": false,
      "complexity": 118,
      "length": 5,
      "file": "server/services/workflow-service.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 7,
      "isAsync": false,
      "isExported": false,
      "complexity": 70,
      "length": 4,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "createWorkflow",
      "parameters": [
        "projectPath",
        "mode = 'init'"
      ],
      "line": 18,
      "isAsync": false,
      "isExported": false,
      "complexity": 563,
      "length": 23,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "createWorkflowWithId",
      "parameters": [
        "workflowId",
        "projectPath",
        "mode = 'init'"
      ],
      "line": 49,
      "isAsync": false,
      "isExported": false,
      "complexity": 495,
      "length": 21,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "getWorkflow",
      "parameters": [
        "workflowId"
      ],
      "line": 76,
      "isAsync": false,
      "isExported": false,
      "complexity": 48,
      "length": 3,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "getCurrentWorkflow",
      "parameters": [],
      "line": 84,
      "isAsync": false,
      "isExported": false,
      "complexity": 89,
      "length": 3,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "updateStep",
      "parameters": [
        "workflowId",
        "stepIndex",
        "status",
        "result = null",
        "error = null"
      ],
      "line": 96,
      "isAsync": false,
      "isExported": false,
      "complexity": 1338,
      "length": 48,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "getProgress",
      "parameters": [
        "workflowId"
      ],
      "line": 150,
      "isAsync": false,
      "isExported": false,
      "complexity": 765,
      "length": 24,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "initializeSteps",
      "parameters": [
        "mode"
      ],
      "line": 180,
      "isAsync": false,
      "isExported": false,
      "complexity": 2383,
      "length": 48,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "getStepsForMode",
      "parameters": [
        "mode"
      ],
      "line": 234,
      "isAsync": false,
      "isExported": false,
      "complexity": 148,
      "length": 9,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "getNextStep",
      "parameters": [
        "workflow"
      ],
      "line": 249,
      "isAsync": false,
      "isExported": false,
      "complexity": 329,
      "length": 14,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "getApiEndpointForStep",
      "parameters": [
        "mode",
        "stepName"
      ],
      "line": 270,
      "isAsync": false,
      "isExported": false,
      "complexity": 68,
      "length": 3,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "calculateDuration",
      "parameters": [
        "workflow"
      ],
      "line": 279,
      "isAsync": false,
      "isExported": false,
      "complexity": 212,
      "length": 7,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "generateWorkflowId",
      "parameters": [
        "projectPath",
        "mode"
      ],
      "line": 293,
      "isAsync": false,
      "isExported": false,
      "complexity": 156,
      "length": 5,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "cleanupExpiredWorkflows",
      "parameters": [
        "maxAge = 60 * 60 * 1000"
      ],
      "line": 303,
      "isAsync": false,
      "isExported": false,
      "complexity": 399,
      "length": 16,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "getAllWorkflows",
      "parameters": [],
      "line": 324,
      "isAsync": false,
      "isExported": false,
      "complexity": 544,
      "length": 17,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "saveWorkflow",
      "parameters": [
        "workflowId"
      ],
      "line": 346,
      "isAsync": true,
      "isExported": false,
      "complexity": 88,
      "length": 4,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "restoreWorkflow",
      "parameters": [
        "workflowId"
      ],
      "line": 355,
      "isAsync": true,
      "isExported": false,
      "complexity": 88,
      "length": 4,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "createDataRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 8563,
      "length": 267,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_loadAnalysisTemplates",
      "parameters": [
        "promptService",
        "language"
      ],
      "line": 290,
      "isAsync": false,
      "isExported": false,
      "complexity": 1060,
      "length": 18,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_loadDocumentTemplates",
      "parameters": [
        "promptService",
        "format",
        "templateType"
      ],
      "line": 316,
      "isAsync": false,
      "isExported": false,
      "complexity": 524,
      "length": 13,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_loadAcceptanceCriteriaTemplates",
      "parameters": [
        "promptService"
      ],
      "line": 335,
      "isAsync": false,
      "isExported": false,
      "complexity": 194,
      "length": 7,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_loadReferenceData",
      "parameters": [
        "language"
      ],
      "line": 348,
      "isAsync": false,
      "isExported": false,
      "complexity": 232,
      "length": 8,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_getAnalysisRules",
      "parameters": [],
      "line": 361,
      "isAsync": false,
      "isExported": false,
      "complexity": 894,
      "length": 30,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_getEstimationReferences",
      "parameters": [],
      "line": 396,
      "isAsync": false,
      "isExported": false,
      "complexity": 496,
      "length": 15,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_getNormalizationRules",
      "parameters": [],
      "line": 416,
      "isAsync": false,
      "isExported": false,
      "complexity": 581,
      "length": 19,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_getPrioritizationRules",
      "parameters": [],
      "line": 440,
      "isAsync": false,
      "isExported": false,
      "complexity": 248,
      "length": 11,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_getEpicGroupingRules",
      "parameters": [],
      "line": 456,
      "isAsync": false,
      "isExported": false,
      "complexity": 474,
      "length": 15,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_getDefaultAnalysisTemplates",
      "parameters": [
        "language"
      ],
      "line": 474,
      "isAsync": false,
      "isExported": false,
      "complexity": 801,
      "length": 57,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_getDefaultDocumentTemplates",
      "parameters": [
        "format",
        "templateType"
      ],
      "line": 532,
      "isAsync": false,
      "isExported": false,
      "complexity": 787,
      "length": 39,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_getDefaultAcceptanceCriteriaTemplate",
      "parameters": [],
      "line": 572,
      "isAsync": false,
      "isExported": false,
      "complexity": 279,
      "length": 21,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_getIndustryPatterns",
      "parameters": [],
      "line": 594,
      "isAsync": false,
      "isExported": false,
      "complexity": 400,
      "length": 8,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_getComplexityMetrics",
      "parameters": [
        "language"
      ],
      "line": 603,
      "isAsync": false,
      "isExported": false,
      "complexity": 374,
      "length": 10,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_getBestPractices",
      "parameters": [
        "language"
      ],
      "line": 614,
      "isAsync": false,
      "isExported": false,
      "complexity": 293,
      "length": 8,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "_getCommonRisks",
      "parameters": [
        "language"
      ],
      "line": 623,
      "isAsync": false,
      "isExported": false,
      "complexity": 253,
      "length": 8,
      "file": "server/routes/create/data.js"
    },
    {
      "name": "createMockServices",
      "parameters": [],
      "line": 505,
      "isAsync": false,
      "isExported": false,
      "complexity": 348,
      "length": 15,
      "file": "tests/integration/contracts-routes.test.js"
    },
    {
      "name": "createMockWorkflow",
      "parameters": [],
      "line": 524,
      "isAsync": false,
      "isExported": false,
      "complexity": 2973,
      "length": 111,
      "file": "tests/integration/contracts-routes.test.js"
    },
    {
      "name": "use",
      "parameters": [
        "express.json({\n      strict: false",
        "// Handle JSON parsing errors\n      verify: function(req",
        "res",
        "buf",
        "encoding"
      ],
      "line": 20,
      "isAsync": false,
      "isExported": false,
      "complexity": 258,
      "length": 11,
      "file": "tests/integration/contracts-routes.test.js"
    },
    {
      "name": "detectCycle",
      "parameters": [
        "moduleName",
        "path = []"
      ],
      "line": 789,
      "isAsync": false,
      "isExported": false,
      "complexity": 885,
      "length": 31,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "constructor",
      "parameters": [
        "options = {}"
      ],
      "line": 17,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "analyzeIntegration",
      "parameters": [
        "workflowResults"
      ],
      "line": 38,
      "isAsync": true,
      "isExported": false,
      "complexity": 2692,
      "length": 71,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_extractWorkflowData",
      "parameters": [
        "workflowResults"
      ],
      "line": 116,
      "isAsync": false,
      "isExported": false,
      "complexity": 641,
      "length": 26,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_performAnalysisSteps",
      "parameters": [
        "extractedData"
      ],
      "line": 149,
      "isAsync": true,
      "isExported": false,
      "complexity": 1125,
      "length": 31,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_analyzeModuleRelations",
      "parameters": [
        "modulesData",
        "filesData",
        "languageData"
      ],
      "line": 189,
      "isAsync": true,
      "isExported": false,
      "complexity": 2474,
      "length": 70,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_identifyIntegrationPoints",
      "parameters": [
        "moduleRelations",
        "filesData",
        "languageData"
      ],
      "line": 268,
      "isAsync": true,
      "isExported": false,
      "complexity": 1195,
      "length": 29,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_analyzeApiContracts",
      "parameters": [
        "integrationPoints",
        "filesData",
        "languageData"
      ],
      "line": 306,
      "isAsync": true,
      "isExported": false,
      "complexity": 1058,
      "length": 29,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_analyzeDataFlow",
      "parameters": [
        "moduleRelations",
        "apiContracts",
        "filesData"
      ],
      "line": 344,
      "isAsync": true,
      "isExported": false,
      "complexity": 1204,
      "length": 40,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_analyzeExternalDependencies",
      "parameters": [
        "filesData",
        "modulesData",
        "languageData"
      ],
      "line": 393,
      "isAsync": true,
      "isExported": false,
      "complexity": 1818,
      "length": 52,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "file => {\n        if (file.analysis && file.analysis.dependencies"
      ],
      "line": 400,
      "isAsync": false,
      "isExported": false,
      "complexity": 1208,
      "length": 31,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_generateContractDocument",
      "parameters": [
        "analysisSteps",
        "extractedData"
      ],
      "line": 453,
      "isAsync": false,
      "isExported": false,
      "complexity": 1475,
      "length": 37,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_generateRecommendations",
      "parameters": [
        "analysisSteps"
      ],
      "line": 497,
      "isAsync": false,
      "isExported": false,
      "complexity": 1275,
      "length": 41,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_identifyIntegrationRisks",
      "parameters": [
        "analysisSteps"
      ],
      "line": 545,
      "isAsync": false,
      "isExported": false,
      "complexity": 856,
      "length": 31,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_findModuleByPath",
      "parameters": [
        "modules",
        "path"
      ],
      "line": 578,
      "isAsync": false,
      "isExported": false,
      "complexity": 79,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_classifyRelationType",
      "parameters": [
        "sourceModule",
        "targetModule",
        "edge"
      ],
      "line": 582,
      "isAsync": false,
      "isExported": false,
      "complexity": 365,
      "length": 6,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_calculateRelationStrength",
      "parameters": [
        "source",
        "target",
        "dependencies = []"
      ],
      "line": 589,
      "isAsync": false,
      "isExported": false,
      "complexity": 315,
      "length": 12,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_groupRelationsByType",
      "parameters": [
        "relations"
      ],
      "line": 602,
      "isAsync": false,
      "isExported": false,
      "complexity": 171,
      "length": 8,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_isIntegrationPoint",
      "parameters": [
        "relation",
        "language"
      ],
      "line": 611,
      "isAsync": false,
      "isExported": false,
      "complexity": 154,
      "length": 6,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_classifyIntegrationType",
      "parameters": [
        "relation",
        "language"
      ],
      "line": 618,
      "isAsync": false,
      "isExported": false,
      "complexity": 203,
      "length": 6,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_generateIntegrationDescription",
      "parameters": [
        "relation",
        "language"
      ],
      "line": 625,
      "isAsync": false,
      "isExported": false,
      "complexity": 103,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_extractIntegrationInterfaces",
      "parameters": [
        "relation",
        "filesData",
        "language"
      ],
      "line": 629,
      "isAsync": false,
      "isExported": false,
      "complexity": 37,
      "length": 4,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_extractRelationInterfaces",
      "parameters": [
        "relation",
        "languageData"
      ],
      "line": 634,
      "isAsync": false,
      "isExported": false,
      "complexity": 432,
      "length": 17,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_calculateIntegrationComplexity",
      "parameters": [
        "relation"
      ],
      "line": 652,
      "isAsync": false,
      "isExported": false,
      "complexity": 78,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_assessIntegrationRisks",
      "parameters": [
        "relation"
      ],
      "line": 656,
      "isAsync": false,
      "isExported": false,
      "complexity": 20,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_generateIntegrationRecommendations",
      "parameters": [
        "relation"
      ],
      "line": 660,
      "isAsync": false,
      "isExported": false,
      "complexity": 20,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_identifyAdditionalIntegrationPoints",
      "parameters": [
        "filesData",
        "languageData"
      ],
      "line": 664,
      "isAsync": false,
      "isExported": false,
      "complexity": 20,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_extractApiContract",
      "parameters": [
        "point",
        "filesData",
        "languageData"
      ],
      "line": 668,
      "isAsync": false,
      "isExported": false,
      "complexity": 22,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_extractDataFlow",
      "parameters": [
        "relation",
        "filesData"
      ],
      "line": 672,
      "isAsync": false,
      "isExported": false,
      "complexity": 22,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_extractApiDataFlows",
      "parameters": [
        "contract"
      ],
      "line": 676,
      "isAsync": false,
      "isExported": false,
      "complexity": 20,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_groupFlowsByType",
      "parameters": [
        "flows"
      ],
      "line": 680,
      "isAsync": false,
      "isExported": false,
      "complexity": 20,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_identifyCriticalDataPaths",
      "parameters": [
        "flows"
      ],
      "line": 684,
      "isAsync": false,
      "isExported": false,
      "complexity": 20,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_isExternalDependency",
      "parameters": [
        "dep",
        "languageData"
      ],
      "line": 688,
      "isAsync": false,
      "isExported": false,
      "complexity": 22,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_classifyDependencyType",
      "parameters": [
        "dep",
        "languageData"
      ],
      "line": 692,
      "isAsync": false,
      "isExported": false,
      "complexity": 28,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_extractVersion",
      "parameters": [
        "dep"
      ],
      "line": 696,
      "isAsync": false,
      "isExported": false,
      "complexity": 22,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_determineDependencyScope",
      "parameters": [
        "dep"
      ],
      "line": 700,
      "isAsync": false,
      "isExported": false,
      "complexity": 27,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_isDependencyCritical",
      "parameters": [
        "dep",
        "file"
      ],
      "line": 704,
      "isAsync": false,
      "isExported": false,
      "complexity": 23,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_assessSecurityRisk",
      "parameters": [
        "dep"
      ],
      "line": 708,
      "isAsync": false,
      "isExported": false,
      "complexity": 21,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_getSecurityRiskReason",
      "parameters": [
        "dep"
      ],
      "line": 712,
      "isAsync": false,
      "isExported": false,
      "complexity": 20,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_isOutdated",
      "parameters": [
        "dep"
      ],
      "line": 716,
      "isAsync": false,
      "isExported": false,
      "complexity": 23,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_generateProjectOverview",
      "parameters": [
        "analysisSteps",
        "extractedData"
      ],
      "line": 720,
      "isAsync": false,
      "isExported": false,
      "complexity": 30,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_generateArchitectureSummary",
      "parameters": [
        "analysisSteps"
      ],
      "line": 724,
      "isAsync": false,
      "isExported": false,
      "complexity": 26,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_generateModuleRelationsSection",
      "parameters": [
        "moduleRelations"
      ],
      "line": 728,
      "isAsync": false,
      "isExported": false,
      "complexity": 110,
      "length": 7,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_generateIntegrationPointsSection",
      "parameters": [
        "integrationPoints"
      ],
      "line": 736,
      "isAsync": false,
      "isExported": false,
      "complexity": 115,
      "length": 7,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_generateApiContractsSection",
      "parameters": [
        "apiContracts"
      ],
      "line": 744,
      "isAsync": false,
      "isExported": false,
      "complexity": 106,
      "length": 7,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_generateDataFlowSection",
      "parameters": [
        "dataFlow"
      ],
      "line": 752,
      "isAsync": false,
      "isExported": false,
      "complexity": 97,
      "length": 7,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_generateExternalDepsSection",
      "parameters": [
        "externalDeps"
      ],
      "line": 760,
      "isAsync": false,
      "isExported": false,
      "complexity": 105,
      "length": 7,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_generateRecommendationsSection",
      "parameters": [
        "analysisSteps"
      ],
      "line": 768,
      "isAsync": false,
      "isExported": false,
      "complexity": 137,
      "length": 7,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_generateRisksSection",
      "parameters": [
        "analysisSteps"
      ],
      "line": 776,
      "isAsync": false,
      "isExported": false,
      "complexity": 128,
      "length": 7,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_detectCircularDependencies",
      "parameters": [
        "moduleRelations"
      ],
      "line": 784,
      "isAsync": false,
      "isExported": false,
      "complexity": 1354,
      "length": 48,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "_identifyCriticalModules",
      "parameters": [
        "moduleRelations"
      ],
      "line": 833,
      "isAsync": false,
      "isExported": false,
      "complexity": 20,
      "length": 3,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "createMockTemplateVariables",
      "parameters": [],
      "line": 437,
      "isAsync": false,
      "isExported": false,
      "complexity": 2426,
      "length": 107,
      "file": "tests/unit/template-generation.test.js"
    },
    {
      "name": "createMockPromptService",
      "parameters": [],
      "line": 548,
      "isAsync": false,
      "isExported": false,
      "complexity": 671,
      "length": 23,
      "file": "tests/unit/template-generation.test.js"
    },
    {
      "name": "_generateBuiltinContractDocument",
      "parameters": [
        "vars"
      ],
      "line": 575,
      "isAsync": false,
      "isExported": false,
      "complexity": 5420,
      "length": 198,
      "file": "tests/unit/template-generation.test.js"
    },
    {
      "name": "_extractSections",
      "parameters": [
        "content"
      ],
      "line": 777,
      "isAsync": false,
      "isExported": false,
      "complexity": 806,
      "length": 37,
      "file": "tests/unit/template-generation.test.js"
    },
    {
      "name": "createAPIRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 6625,
      "length": 195,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_generateDefaultResponses",
      "parameters": [],
      "line": 214,
      "isAsync": false,
      "isExported": false,
      "complexity": 810,
      "length": 33,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_generateMiddleware",
      "parameters": [
        "authentication",
        "method"
      ],
      "line": 254,
      "isAsync": false,
      "isExported": false,
      "complexity": 301,
      "length": 15,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_generateValidation",
      "parameters": [
        "parameters"
      ],
      "line": 275,
      "isAsync": false,
      "isExported": false,
      "complexity": 424,
      "length": 18,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_generateAPIDocumentation",
      "parameters": [
        "endpoint",
        "method",
        "description",
        "parameters",
        "responses"
      ],
      "line": 303,
      "isAsync": false,
      "isExported": false,
      "complexity": 603,
      "length": 20,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_generateAPIImplementation",
      "parameters": [
        "apiSpec",
        "promptService"
      ],
      "line": 330,
      "isAsync": false,
      "isExported": false,
      "complexity": 951,
      "length": 26,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_getDefaultImplementation",
      "parameters": [
        "apiSpec"
      ],
      "line": 362,
      "isAsync": false,
      "isExported": false,
      "complexity": 1221,
      "length": 49,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_generateMiddlewareImplementation",
      "parameters": [
        "middleware",
        "language"
      ],
      "line": 418,
      "isAsync": false,
      "isExported": false,
      "complexity": 878,
      "length": 30,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_generateValidationImplementation",
      "parameters": [
        "validation",
        "language"
      ],
      "line": 455,
      "isAsync": false,
      "isExported": false,
      "complexity": 834,
      "length": 25,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_generateAPITests",
      "parameters": [
        "apiSpec"
      ],
      "line": 486,
      "isAsync": false,
      "isExported": false,
      "complexity": 1252,
      "length": 43,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_getAPIFiles",
      "parameters": [
        "endpoint",
        "method",
        "language"
      ],
      "line": 537,
      "isAsync": false,
      "isExported": false,
      "complexity": 258,
      "length": 10,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_getRouterIntegration",
      "parameters": [
        "endpoint"
      ],
      "line": 553,
      "isAsync": false,
      "isExported": false,
      "complexity": 216,
      "length": 5,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_getMiddlewareIntegration",
      "parameters": [
        "authentication"
      ],
      "line": 564,
      "isAsync": false,
      "isExported": false,
      "complexity": 222,
      "length": 8,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_getTestIntegration",
      "parameters": [
        "endpoint",
        "method"
      ],
      "line": 579,
      "isAsync": false,
      "isExported": false,
      "complexity": 132,
      "length": 5,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_generateAPIExamples",
      "parameters": [
        "apiSpec"
      ],
      "line": 590,
      "isAsync": false,
      "isExported": false,
      "complexity": 647,
      "length": 26,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_getHandlerName",
      "parameters": [
        "endpoint",
        "method"
      ],
      "line": 623,
      "isAsync": false,
      "isExported": false,
      "complexity": 137,
      "length": 4,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "_capitalize",
      "parameters": [
        "str"
      ],
      "line": 633,
      "isAsync": false,
      "isExported": false,
      "complexity": 58,
      "length": 3,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "authenticate",
      "parameters": [
        "req",
        "res",
        "next"
      ],
      "line": 424,
      "isAsync": false,
      "isExported": false,
      "complexity": 53,
      "length": 4,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "validateRequest",
      "parameters": [
        "req",
        "res",
        "next"
      ],
      "line": 430,
      "isAsync": false,
      "isExported": false,
      "complexity": 49,
      "length": 4,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "logRequest",
      "parameters": [
        "req",
        "res",
        "next"
      ],
      "line": 436,
      "isAsync": false,
      "isExported": false,
      "complexity": 65,
      "length": 4,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "map",
      "parameters": [
        "mw => {\n            switch (mw"
      ],
      "line": 420,
      "isAsync": false,
      "isExported": false,
      "complexity": 721,
      "length": 24,
      "file": "server/routes/create/api.js"
    },
    {
      "name": "createModuleRoutes",
      "parameters": [
        "services"
      ],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 4773,
      "length": 149,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_generateModuleStructure",
      "parameters": [
        "moduleName",
        "language"
      ],
      "line": 170,
      "isAsync": false,
      "isExported": false,
      "complexity": 698,
      "length": 24,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_generateModuleTemplate",
      "parameters": [
        "moduleName",
        "language",
        "description"
      ],
      "line": 202,
      "isAsync": false,
      "isExported": false,
      "complexity": 736,
      "length": 44,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_generateComponentTemplate",
      "parameters": [
        "type",
        "language"
      ],
      "line": 253,
      "isAsync": false,
      "isExported": false,
      "complexity": 746,
      "length": 38,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "Component",
      "parameters": [
        "props = {}"
      ],
      "line": 265,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_generateModuleContent",
      "parameters": [
        "moduleSpec",
        "promptService"
      ],
      "line": 298,
      "isAsync": false,
      "isExported": false,
      "complexity": 924,
      "length": 26,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_generateComponentContent",
      "parameters": [
        "componentSpec",
        "promptService"
      ],
      "line": 331,
      "isAsync": false,
      "isExported": false,
      "complexity": 943,
      "length": 24,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_generateTestTemplate",
      "parameters": [
        "moduleSpec"
      ],
      "line": 361,
      "isAsync": false,
      "isExported": false,
      "complexity": 707,
      "length": 27,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_generateComponentTestTemplate",
      "parameters": [
        "componentSpec"
      ],
      "line": 394,
      "isAsync": false,
      "isExported": false,
      "complexity": 430,
      "length": 16,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_getModuleFiles",
      "parameters": [
        "moduleName",
        "language"
      ],
      "line": 417,
      "isAsync": false,
      "isExported": false,
      "complexity": 110,
      "length": 4,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_getComponentFiles",
      "parameters": [
        "componentName",
        "type",
        "language"
      ],
      "line": 429,
      "isAsync": false,
      "isExported": false,
      "complexity": 345,
      "length": 12,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_generateComponentInterfaces",
      "parameters": [
        "props",
        "language"
      ],
      "line": 448,
      "isAsync": false,
      "isExported": false,
      "complexity": 286,
      "length": 11,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_generateUsageExamples",
      "parameters": [
        "componentName",
        "props",
        "language"
      ],
      "line": 467,
      "isAsync": false,
      "isExported": false,
      "complexity": 502,
      "length": 17,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_generateModuleExamples",
      "parameters": [
        "moduleSpec"
      ],
      "line": 490,
      "isAsync": false,
      "isExported": false,
      "complexity": 295,
      "length": 12,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_generateStyleTemplate",
      "parameters": [
        "componentName"
      ],
      "line": 508,
      "isAsync": false,
      "isExported": false,
      "complexity": 84,
      "length": 5,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "_capitalize",
      "parameters": [
        "str"
      ],
      "line": 519,
      "isAsync": false,
      "isExported": false,
      "complexity": 58,
      "length": 3,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 209,
      "isAsync": false,
      "isExported": false,
      "complexity": 36,
      "length": 3,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "constructor",
      "parameters": [
        "props = {}"
      ],
      "line": 257,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "render",
      "parameters": [],
      "line": 261,
      "isAsync": false,
      "isExported": false,
      "complexity": 28,
      "length": 3,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "constructor",
      "parameters": [
        "config = {}"
      ],
      "line": 9,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "loadPrompt",
      "parameters": [
        "category",
        "name",
        "variables = {}"
      ],
      "line": 25,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "loadSystemPrompt",
      "parameters": [
        "variables = {}"
      ],
      "line": 39,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "loadModePrompt",
      "parameters": [
        "mode",
        "variables = {}"
      ],
      "line": 67,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "loadTemplate",
      "parameters": [
        "name",
        "variables = {}"
      ],
      "line": 101,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "listPrompts",
      "parameters": [
        "category = null"
      ],
      "line": 115,
      "isAsync": true,
      "isExported": false,
      "complexity": 212,
      "length": 8,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "setGlobalVariable",
      "parameters": [
        "key",
        "value"
      ],
      "line": 129,
      "isAsync": false,
      "isExported": false,
      "complexity": 65,
      "length": 3,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "getStatus",
      "parameters": [],
      "line": 137,
      "isAsync": false,
      "isExported": false,
      "complexity": 54,
      "length": 3,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "getCacheStats",
      "parameters": [],
      "line": 145,
      "isAsync": false,
      "isExported": false,
      "complexity": 58,
      "length": 3,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "clearCache",
      "parameters": [],
      "line": 152,
      "isAsync": false,
      "isExported": false,
      "complexity": 48,
      "length": 3,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "_getModeTemplates",
      "parameters": [
        "mode"
      ],
      "line": 161,
      "isAsync": false,
      "isExported": false,
      "complexity": 394,
      "length": 9,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "isValidCategory",
      "parameters": [
        "category"
      ],
      "line": 176,
      "isAsync": false,
      "isExported": false,
      "complexity": 126,
      "length": 4,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "isValidMode",
      "parameters": [
        "mode"
      ],
      "line": 186,
      "isAsync": false,
      "isExported": false,
      "complexity": 114,
      "length": 4,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "destroy",
      "parameters": [],
      "line": 194,
      "isAsync": false,
      "isExported": false,
      "complexity": 125,
      "length": 5,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 11,
      "isAsync": false,
      "isExported": false,
      "complexity": 301,
      "length": 9,
      "file": "server/services/language-service.js"
    },
    {
      "name": "detectLanguage",
      "parameters": [
        "projectPath"
      ],
      "line": 26,
      "isAsync": true,
      "isExported": false,
      "complexity": 216,
      "length": 8,
      "file": "server/services/language-service.js"
    },
    {
      "name": "detectLanguageEnhanced",
      "parameters": [
        "projectPath",
        "step1Results",
        "context = {}"
      ],
      "line": 42,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/language-service.js"
    },
    {
      "name": "generatePrompts",
      "parameters": [
        "projectPath",
        "options = {}"
      ],
      "line": 61,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/services/language-service.js"
    },
    {
      "name": "getLanguageSpecificPrompts",
      "parameters": [
        "language"
      ],
      "line": 75,
      "isAsync": false,
      "isExported": false,
      "complexity": 227,
      "length": 8,
      "file": "server/services/language-service.js"
    },
    {
      "name": "getSupportedLanguages",
      "parameters": [],
      "line": 88,
      "isAsync": false,
      "isExported": false,
      "complexity": 80,
      "length": 3,
      "file": "server/services/language-service.js"
    },
    {
      "name": "isLanguageSupported",
      "parameters": [
        "language"
      ],
      "line": 97,
      "isAsync": false,
      "isExported": false,
      "complexity": 85,
      "length": 3,
      "file": "server/services/language-service.js"
    },
    {
      "name": "getLanguageDisplayName",
      "parameters": [
        "language"
      ],
      "line": 106,
      "isAsync": false,
      "isExported": false,
      "complexity": 266,
      "length": 11,
      "file": "server/services/language-service.js"
    },
    {
      "name": "extractLanguageFromWorkflow",
      "parameters": [
        "workflowResults",
        "step = 2"
      ],
      "line": 124,
      "isAsync": false,
      "isExported": false,
      "complexity": 484,
      "length": 15,
      "file": "server/services/language-service.js"
    },
    {
      "name": "generateLanguageReport",
      "parameters": [
        "detectionResult"
      ],
      "line": 145,
      "isAsync": false,
      "isExported": false,
      "complexity": 2395,
      "length": 48,
      "file": "server/services/language-service.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 14,
      "isAsync": false,
      "isExported": false,
      "complexity": 254,
      "length": 6,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "generatePrompts",
      "parameters": [
        "projectPath",
        "options = {}"
      ],
      "line": 27,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "buildLanguagePrompts",
      "parameters": [
        "detection"
      ],
      "line": 67,
      "isAsync": false,
      "isExported": false,
      "complexity": 1050,
      "length": 30,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "generateDevelopmentPrompt",
      "parameters": [
        "language",
        "framework"
      ],
      "line": 101,
      "isAsync": false,
      "isExported": false,
      "complexity": 609,
      "length": 12,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "generateBestPracticesPrompt",
      "parameters": [
        "language"
      ],
      "line": 117,
      "isAsync": false,
      "isExported": false,
      "complexity": 814,
      "length": 29,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "generateCodeReviewPrompt",
      "parameters": [
        "language",
        "framework"
      ],
      "line": 150,
      "isAsync": false,
      "isExported": false,
      "complexity": 684,
      "length": 23,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "generateDebuggingPrompt",
      "parameters": [
        "language"
      ],
      "line": 177,
      "isAsync": false,
      "isExported": false,
      "complexity": 736,
      "length": 31,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "generatePerformancePrompt",
      "parameters": [
        "language",
        "framework"
      ],
      "line": 212,
      "isAsync": false,
      "isExported": false,
      "complexity": 753,
      "length": 26,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "generateTestingPrompt",
      "parameters": [
        "language",
        "framework"
      ],
      "line": 242,
      "isAsync": false,
      "isExported": false,
      "complexity": 744,
      "length": 26,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "generateDocumentationPrompt",
      "parameters": [
        "language"
      ],
      "line": 272,
      "isAsync": false,
      "isExported": false,
      "complexity": 732,
      "length": 26,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "generateSecurityPrompt",
      "parameters": [
        "language",
        "framework"
      ],
      "line": 302,
      "isAsync": false,
      "isExported": false,
      "complexity": 769,
      "length": 26,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "initializePromptTemplates",
      "parameters": [],
      "line": 332,
      "isAsync": false,
      "isExported": false,
      "complexity": 1330,
      "length": 25,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "initializeBestPractices",
      "parameters": [],
      "line": 361,
      "isAsync": false,
      "isExported": false,
      "complexity": 3659,
      "length": 115,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "initializeFrameworkGuidelines",
      "parameters": [],
      "line": 480,
      "isAsync": false,
      "isExported": false,
      "complexity": 906,
      "length": 25,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getLanguageDisplayName",
      "parameters": [
        "language"
      ],
      "line": 509,
      "isAsync": false,
      "isExported": false,
      "complexity": 266,
      "length": 11,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getLanguageKeywords",
      "parameters": [
        "language"
      ],
      "line": 524,
      "isAsync": false,
      "isExported": false,
      "complexity": 803,
      "length": 11,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getCommonPatterns",
      "parameters": [
        "language",
        "framework"
      ],
      "line": 539,
      "isAsync": false,
      "isExported": false,
      "complexity": 750,
      "length": 12,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getCodeExamples",
      "parameters": [
        "language",
        "framework",
        "category"
      ],
      "line": 555,
      "isAsync": false,
      "isExported": false,
      "complexity": 222,
      "length": 7,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "generateBestPracticesChecklist",
      "parameters": [
        "language"
      ],
      "line": 566,
      "isAsync": false,
      "isExported": false,
      "complexity": 282,
      "length": 12,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getCodeReviewCriteria",
      "parameters": [
        "language",
        "framework"
      ],
      "line": 582,
      "isAsync": false,
      "isExported": false,
      "complexity": 539,
      "length": 25,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getDebuggingStrategies",
      "parameters": [
        "language"
      ],
      "line": 611,
      "isAsync": false,
      "isExported": false,
      "complexity": 432,
      "length": 19,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getDebuggingTools",
      "parameters": [
        "language"
      ],
      "line": 634,
      "isAsync": false,
      "isExported": false,
      "complexity": 689,
      "length": 11,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getPerformanceGuidelines",
      "parameters": [
        "language",
        "framework"
      ],
      "line": 647,
      "isAsync": false,
      "isExported": false,
      "complexity": 286,
      "length": 8,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getTestingStrategy",
      "parameters": [
        "language",
        "framework"
      ],
      "line": 656,
      "isAsync": false,
      "isExported": false,
      "complexity": 297,
      "length": 8,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getTestingTools",
      "parameters": [
        "language",
        "framework"
      ],
      "line": 665,
      "isAsync": false,
      "isExported": false,
      "complexity": 530,
      "length": 11,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getDocumentationGuidelines",
      "parameters": [
        "language"
      ],
      "line": 677,
      "isAsync": false,
      "isExported": false,
      "complexity": 281,
      "length": 8,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getDocumentationTemplates",
      "parameters": [
        "language"
      ],
      "line": 686,
      "isAsync": false,
      "isExported": false,
      "complexity": 166,
      "length": 8,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getSecurityGuidelines",
      "parameters": [
        "language",
        "framework"
      ],
      "line": 695,
      "isAsync": false,
      "isExported": false,
      "complexity": 283,
      "length": 8,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getSecurityTools",
      "parameters": [
        "language"
      ],
      "line": 704,
      "isAsync": false,
      "isExported": false,
      "complexity": 510,
      "length": 11,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getSecurityChecklist",
      "parameters": [
        "language"
      ],
      "line": 716,
      "isAsync": false,
      "isExported": false,
      "complexity": 190,
      "length": 11,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getPerformanceBenchmarks",
      "parameters": [
        "language"
      ],
      "line": 728,
      "isAsync": false,
      "isExported": false,
      "complexity": 181,
      "length": 8,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getTestExamples",
      "parameters": [
        "language",
        "framework"
      ],
      "line": 737,
      "isAsync": false,
      "isExported": false,
      "complexity": 208,
      "length": 7,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getReviewTemplates",
      "parameters": [
        "language"
      ],
      "line": 745,
      "isAsync": false,
      "isExported": false,
      "complexity": 129,
      "length": 7,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "mergePromptContent",
      "parameters": [
        "base",
        "additional"
      ],
      "line": 756,
      "isAsync": false,
      "isExported": false,
      "complexity": 71,
      "length": 3,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "generateFallbackPrompts",
      "parameters": [
        "detection = {}"
      ],
      "line": 763,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "getLanguageSpecificPrompts",
      "parameters": [
        "language"
      ],
      "line": 789,
      "isAsync": false,
      "isExported": false,
      "complexity": 534,
      "length": 22,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "constructor",
      "parameters": [],
      "line": 10,
      "isAsync": false,
      "isExported": false,
      "complexity": 5292,
      "length": 111,
      "file": "server/language/detector.js"
    },
    {
      "name": "detectLanguage",
      "parameters": [
        "projectPath"
      ],
      "line": 127,
      "isAsync": true,
      "isExported": false,
      "complexity": 984,
      "length": 34,
      "file": "server/language/detector.js"
    },
    {
      "name": "resetWeights",
      "parameters": [],
      "line": 165,
      "isAsync": false,
      "isExported": false,
      "complexity": 118,
      "length": 5,
      "file": "server/language/detector.js"
    },
    {
      "name": "scanProject",
      "parameters": [
        "projectPath"
      ],
      "line": 175,
      "isAsync": true,
      "isExported": false,
      "complexity": 162,
      "length": 7,
      "file": "server/language/detector.js"
    },
    {
      "name": "getProjectFiles",
      "parameters": [
        "projectPath",
        "maxDepth = 3",
        "currentDepth = 0"
      ],
      "line": 188,
      "isAsync": true,
      "isExported": false,
      "complexity": 961,
      "length": 31,
      "file": "server/language/detector.js"
    },
    {
      "name": "analyzeFile",
      "parameters": [
        "filePath"
      ],
      "line": 224,
      "isAsync": false,
      "isExported": false,
      "complexity": 619,
      "length": 18,
      "file": "server/language/detector.js"
    },
    {
      "name": "analyzeDirectory",
      "parameters": [
        "dirName"
      ],
      "line": 247,
      "isAsync": false,
      "isExported": false,
      "complexity": 265,
      "length": 9,
      "file": "server/language/detector.js"
    },
    {
      "name": "detectFrameworks",
      "parameters": [
        "projectPath",
        "language"
      ],
      "line": 263,
      "isAsync": true,
      "isExported": false,
      "complexity": 841,
      "length": 28,
      "file": "server/language/detector.js"
    },
    {
      "name": "calculateResult",
      "parameters": [],
      "line": 296,
      "isAsync": false,
      "isExported": false,
      "complexity": 801,
      "length": 26,
      "file": "server/language/detector.js"
    },
    {
      "name": "getSuggestions",
      "parameters": [
        "language"
      ],
      "line": 328,
      "isAsync": false,
      "isExported": false,
      "complexity": 1269,
      "length": 41,
      "file": "server/language/detector.js"
    },
    {
      "name": "getLanguageDetails",
      "parameters": [
        "language"
      ],
      "line": 375,
      "isAsync": false,
      "isExported": false,
      "complexity": 56,
      "length": 3,
      "file": "server/language/detector.js"
    },
    {
      "name": "matchPattern",
      "parameters": [
        "str",
        "pattern"
      ],
      "line": 385,
      "isAsync": false,
      "isExported": false,
      "complexity": 106,
      "length": 4,
      "file": "server/language/detector.js"
    },
    {
      "name": "isImportantHiddenFile",
      "parameters": [
        "fileName"
      ],
      "line": 395,
      "isAsync": false,
      "isExported": false,
      "complexity": 139,
      "length": 4,
      "file": "server/language/detector.js"
    },
    {
      "name": "shouldIgnoreDirectory",
      "parameters": [
        "dirName"
      ],
      "line": 405,
      "isAsync": false,
      "isExported": false,
      "complexity": 265,
      "length": 8,
      "file": "server/language/detector.js"
    },
    {
      "name": "constructor",
      "parameters": [
        "options = {}"
      ],
      "line": 16,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "analyzeFiles",
      "parameters": [
        "projectData"
      ],
      "line": 38,
      "isAsync": true,
      "isExported": false,
      "complexity": 2231,
      "length": 62,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_extractProjectData",
      "parameters": [
        "projectData"
      ],
      "line": 104,
      "isAsync": false,
      "isExported": false,
      "complexity": 859,
      "length": 22,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_flattenFileStructure",
      "parameters": [
        "structure",
        "projectPath"
      ],
      "line": 130,
      "isAsync": false,
      "isExported": false,
      "complexity": 1964,
      "length": 64,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_selectFilesToAnalyze",
      "parameters": [
        "projectPath",
        "extractedData"
      ],
      "line": 198,
      "isAsync": true,
      "isExported": false,
      "complexity": 1571,
      "length": 48,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_getSourceFiles",
      "parameters": [
        "allFiles",
        "languageData"
      ],
      "line": 250,
      "isAsync": false,
      "isExported": false,
      "complexity": 298,
      "length": 8,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_getConfigFiles",
      "parameters": [
        "allFiles"
      ],
      "line": 262,
      "isAsync": false,
      "isExported": false,
      "complexity": 567,
      "length": 15,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_getTestFiles",
      "parameters": [
        "allFiles"
      ],
      "line": 281,
      "isAsync": false,
      "isExported": false,
      "complexity": 78,
      "length": 3,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_getDocFiles",
      "parameters": [
        "allFiles"
      ],
      "line": 288,
      "isAsync": false,
      "isExported": false,
      "complexity": 299,
      "length": 8,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_prioritizePythonFiles",
      "parameters": [
        "sourceFiles"
      ],
      "line": 300,
      "isAsync": false,
      "isExported": false,
      "complexity": 271,
      "length": 10,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_analyzeFilesParallel",
      "parameters": [
        "filesToAnalyze"
      ],
      "line": 314,
      "isAsync": true,
      "isExported": false,
      "complexity": 888,
      "length": 27,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_analyzeFileContent",
      "parameters": [
        "fileInfo"
      ],
      "line": 345,
      "isAsync": true,
      "isExported": false,
      "complexity": 1610,
      "length": 58,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_performContentAnalysis",
      "parameters": [
        "content",
        "fileInfo"
      ],
      "line": 407,
      "isAsync": true,
      "isExported": false,
      "complexity": 985,
      "length": 25,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_determineFileType",
      "parameters": [
        "filePath",
        "content"
      ],
      "line": 436,
      "isAsync": false,
      "isExported": false,
      "complexity": 248,
      "length": 7,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_calculateComplexity",
      "parameters": [
        "content",
        "extension"
      ],
      "line": 447,
      "isAsync": false,
      "isExported": false,
      "complexity": 701,
      "length": 19,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_analyzeStructure",
      "parameters": [
        "content",
        "extension"
      ],
      "line": 470,
      "isAsync": false,
      "isExported": false,
      "complexity": 841,
      "length": 34,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_extractDependencies",
      "parameters": [
        "content",
        "extension"
      ],
      "line": 508,
      "isAsync": false,
      "isExported": false,
      "complexity": 872,
      "length": 27,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_extractExports",
      "parameters": [
        "content",
        "extension"
      ],
      "line": 539,
      "isAsync": false,
      "isExported": false,
      "complexity": 768,
      "length": 27,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_extractFunctions",
      "parameters": [
        "content",
        "extension"
      ],
      "line": 570,
      "isAsync": false,
      "isExported": false,
      "complexity": 12207,
      "length": 425,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_extractClasses",
      "parameters": [
        "content",
        "extension"
      ],
      "line": 599,
      "isAsync": false,
      "isExported": false,
      "complexity": 210,
      "length": 11,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_analyzeComments",
      "parameters": [
        "content"
      ],
      "line": 614,
      "isAsync": false,
      "isExported": false,
      "complexity": 533,
      "length": 22,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_assessCodeQuality",
      "parameters": [
        "content",
        "extension"
      ],
      "line": 640,
      "isAsync": false,
      "isExported": false,
      "complexity": 555,
      "length": 18,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_analyzePythonContent",
      "parameters": [
        "content"
      ],
      "line": 662,
      "isAsync": false,
      "isExported": false,
      "complexity": 463,
      "length": 10,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_analyzeJavaScriptContent",
      "parameters": [
        "content"
      ],
      "line": 676,
      "isAsync": false,
      "isExported": false,
      "complexity": 498,
      "length": 10,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_isTestFile",
      "parameters": [
        "filePath"
      ],
      "line": 690,
      "isAsync": false,
      "isExported": false,
      "complexity": 229,
      "length": 5,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_isConfigFile",
      "parameters": [
        "filePath"
      ],
      "line": 696,
      "isAsync": false,
      "isExported": false,
      "complexity": 231,
      "length": 5,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_isSourceCode",
      "parameters": [
        "filePath"
      ],
      "line": 702,
      "isAsync": false,
      "isExported": false,
      "complexity": 86,
      "length": 3,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_getSourceExtensions",
      "parameters": [
        "primaryLanguage"
      ],
      "line": 706,
      "isAsync": false,
      "isExported": false,
      "complexity": 285,
      "length": 11,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_calculateFilePriority",
      "parameters": [
        "file",
        "category",
        "languageData"
      ],
      "line": 718,
      "isAsync": false,
      "isExported": false,
      "complexity": 568,
      "length": 20,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_getComplexityRating",
      "parameters": [
        "score",
        "codeLines"
      ],
      "line": 739,
      "isAsync": false,
      "isExported": false,
      "complexity": 149,
      "length": 6,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_checkIndentation",
      "parameters": [
        "lines"
      ],
      "line": 746,
      "isAsync": false,
      "isExported": false,
      "complexity": 202,
      "length": 10,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_calculateReadabilityScore",
      "parameters": [
        "lines"
      ],
      "line": 757,
      "isAsync": false,
      "isExported": false,
      "complexity": 336,
      "length": 11,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_detectJSFramework",
      "parameters": [
        "content"
      ],
      "line": 769,
      "isAsync": false,
      "isExported": false,
      "complexity": 352,
      "length": 7,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_generateAnalysisReport",
      "parameters": [
        "fileResults",
        "languageData"
      ],
      "line": 780,
      "isAsync": false,
      "isExported": false,
      "complexity": 604,
      "length": 17,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_buildDependencyGraph",
      "parameters": [
        "fileResults"
      ],
      "line": 801,
      "isAsync": false,
      "isExported": false,
      "complexity": 539,
      "length": 27,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_calculateImportanceScores",
      "parameters": [
        "fileResults",
        "dependencyGraph"
      ],
      "line": 832,
      "isAsync": false,
      "isExported": false,
      "complexity": 785,
      "length": 29,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_generateRecommendations",
      "parameters": [
        "fileResults",
        "languageData"
      ],
      "line": 865,
      "isAsync": false,
      "isExported": false,
      "complexity": 1470,
      "length": 51,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_groupByCategory",
      "parameters": [
        "fileResults"
      ],
      "line": 918,
      "isAsync": false,
      "isExported": false,
      "complexity": 239,
      "length": 9,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_calculateComplexityDistribution",
      "parameters": [
        "fileResults"
      ],
      "line": 928,
      "isAsync": false,
      "isExported": false,
      "complexity": 242,
      "length": 9,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "file => {\n      if (file.analysis.complexity?.rating"
      ],
      "line": 930,
      "isAsync": false,
      "isExported": false,
      "complexity": 120,
      "length": 5,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_calculateCodeMetrics",
      "parameters": [
        "fileResults"
      ],
      "line": 938,
      "isAsync": false,
      "isExported": false,
      "complexity": 804,
      "length": 31,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "forEach",
      "parameters": [
        "file => {\n      if (file.content"
      ],
      "line": 949,
      "isAsync": false,
      "isExported": false,
      "complexity": 474,
      "length": 15,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "_calculateQualityIndicators",
      "parameters": [
        "fileResults"
      ],
      "line": 970,
      "isAsync": false,
      "isExported": false,
      "complexity": 872,
      "length": 24,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "constructor",
      "parameters": [
        "options = {}"
      ],
      "line": 15,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "detectLanguageEnhanced",
      "parameters": [
        "projectPath",
        "step1Results",
        "workflowContext = {}"
      ],
      "line": 35,
      "isAsync": true,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "performEnhancedAnalysis",
      "parameters": [
        "baseDetection",
        "step1Results",
        "workflowContext"
      ],
      "line": 108,
      "isAsync": true,
      "isExported": false,
      "complexity": 517,
      "length": 14,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "analyzeConfigFiles",
      "parameters": [
        "step1Results"
      ],
      "line": 128,
      "isAsync": false,
      "isExported": false,
      "complexity": 951,
      "length": 31,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "analyzeDependencies",
      "parameters": [
        "step1Results"
      ],
      "line": 165,
      "isAsync": false,
      "isExported": false,
      "complexity": 850,
      "length": 27,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "inferFrameworks",
      "parameters": [
        "step1Results",
        "baseDetection"
      ],
      "line": 199,
      "isAsync": false,
      "isExported": false,
      "complexity": 1667,
      "length": 56,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "extractStructureClues",
      "parameters": [
        "step1Results"
      ],
      "line": 261,
      "isAsync": false,
      "isExported": false,
      "complexity": 1097,
      "length": 36,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "analyzeReadmeContent",
      "parameters": [
        "step1Results"
      ],
      "line": 303,
      "isAsync": false,
      "isExported": false,
      "complexity": 718,
      "length": 27,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "performCodeAnalysis",
      "parameters": [
        "projectPath",
        "step1Results"
      ],
      "line": 337,
      "isAsync": true,
      "isExported": false,
      "complexity": 936,
      "length": 31,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "synthesizeResults",
      "parameters": [
        "baseDetection",
        "enhancedAnalysis",
        "codeAnalysis",
        "step1Results"
      ],
      "line": 377,
      "isAsync": false,
      "isExported": false,
      "complexity": 1575,
      "length": 47,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "generateNextStepRecommendations",
      "parameters": [
        "detectionResult"
      ],
      "line": 430,
      "isAsync": false,
      "isExported": false,
      "complexity": 1097,
      "length": 40,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "generateAnalysisId",
      "parameters": [
        "projectPath"
      ],
      "line": 473,
      "isAsync": false,
      "isExported": false,
      "complexity": 77,
      "length": 3,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "calculateEnhancedConfidence",
      "parameters": [
        "baseDetection",
        "enhancedAnalysis"
      ],
      "line": 477,
      "isAsync": false,
      "isExported": false,
      "complexity": 467,
      "length": 17,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "calculateConfigConfidence",
      "parameters": [
        "configList"
      ],
      "line": 495,
      "isAsync": false,
      "isExported": false,
      "complexity": 58,
      "length": 3,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "extractBuildSystems",
      "parameters": [
        "scripts"
      ],
      "line": 499,
      "isAsync": false,
      "isExported": false,
      "complexity": 411,
      "length": 10,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "classifyDependencies",
      "parameters": [
        "deps",
        "type"
      ],
      "line": 510,
      "isAsync": false,
      "isExported": false,
      "complexity": 362,
      "length": 11,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "determineEcosystem",
      "parameters": [
        "frameworks"
      ],
      "line": 522,
      "isAsync": false,
      "isExported": false,
      "complexity": 240,
      "length": 9,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "calculateFrameworkConfidence",
      "parameters": [
        "framework",
        "step1Results",
        "baseDetection"
      ],
      "line": 532,
      "isAsync": false,
      "isExported": false,
      "complexity": 497,
      "length": 20,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "selectRepresentativeFiles",
      "parameters": [
        "step1Results"
      ],
      "line": 553,
      "isAsync": false,
      "isExported": false,
      "complexity": 363,
      "length": 15,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "isSourceCodeFile",
      "parameters": [
        "file"
      ],
      "line": 569,
      "isAsync": false,
      "isExported": false,
      "complexity": 125,
      "length": 4,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "getFileImportance",
      "parameters": [
        "file"
      ],
      "line": 574,
      "isAsync": false,
      "isExported": false,
      "complexity": 203,
      "length": 5,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "analyzeCodeFile",
      "parameters": [
        "filePath"
      ],
      "line": 580,
      "isAsync": true,
      "isExported": false,
      "complexity": 339,
      "length": 14,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "extractImports",
      "parameters": [
        "content"
      ],
      "line": 595,
      "isAsync": false,
      "isExported": false,
      "complexity": 495,
      "length": 18,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "analyzeSyntax",
      "parameters": [
        "content"
      ],
      "line": 614,
      "isAsync": false,
      "isExported": false,
      "complexity": 394,
      "length": 13,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "summarizeLanguagePatterns",
      "parameters": [
        "sampledFiles"
      ],
      "line": 628,
      "isAsync": false,
      "isExported": false,
      "complexity": 203,
      "length": 9,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "extractImportPatterns",
      "parameters": [
        "sampledFiles"
      ],
      "line": 638,
      "isAsync": false,
      "isExported": false,
      "complexity": 183,
      "length": 7,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "identifySyntaxFeatures",
      "parameters": [
        "sampledFiles"
      ],
      "line": 646,
      "isAsync": false,
      "isExported": false,
      "complexity": 198,
      "length": 9,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "inferTestingFramework",
      "parameters": [
        "step1Results",
        "enhancedAnalysis"
      ],
      "line": 656,
      "isAsync": false,
      "isExported": false,
      "complexity": 378,
      "length": 17,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "recommendDevelopmentEnvironment",
      "parameters": [
        "language"
      ],
      "line": 674,
      "isAsync": false,
      "isExported": false,
      "complexity": 588,
      "length": 21,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "analyzCurrentSetup",
      "parameters": [
        "step1Results"
      ],
      "line": 696,
      "isAsync": false,
      "isExported": false,
      "complexity": 319,
      "length": 10,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "identifyMissingComponents",
      "parameters": [
        "step1Results",
        "language"
      ],
      "line": 707,
      "isAsync": false,
      "isExported": false,
      "complexity": 266,
      "length": 10,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "recommendTemplates",
      "parameters": [
        "language",
        "frameworks"
      ],
      "line": 718,
      "isAsync": false,
      "isExported": false,
      "complexity": 287,
      "length": 12,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "calculateOverallConfidence",
      "parameters": [
        "detectionResult"
      ],
      "line": 731,
      "isAsync": false,
      "isExported": false,
      "complexity": 1973,
      "length": 57,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "calculatePythonSpecificConfidence",
      "parameters": [
        "detectionResult"
      ],
      "line": 793,
      "isAsync": false,
      "isExported": false,
      "complexity": 1385,
      "length": 36,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "calculatePythonFrameworkScore",
      "parameters": [
        "frameworks"
      ],
      "line": 833,
      "isAsync": false,
      "isExported": false,
      "complexity": 775,
      "length": 22,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "calculatePythonConfigScore",
      "parameters": [
        "detectionResult"
      ],
      "line": 859,
      "isAsync": false,
      "isExported": false,
      "complexity": 511,
      "length": 16,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "calculatePythonStructureScore",
      "parameters": [
        "detectionResult"
      ],
      "line": 879,
      "isAsync": false,
      "isExported": false,
      "complexity": 826,
      "length": 25,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "calculatePythonEcosystemScore",
      "parameters": [
        "detectionResult"
      ],
      "line": 908,
      "isAsync": false,
      "isExported": false,
      "complexity": 493,
      "length": 13,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "analyzeStep1Integration",
      "parameters": [
        "step1Results",
        "detectionResult"
      ],
      "line": 922,
      "isAsync": false,
      "isExported": false,
      "complexity": 244,
      "length": 7,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "checkConsistency",
      "parameters": [
        "step1Results",
        "detectionResult"
      ],
      "line": 930,
      "isAsync": false,
      "isExported": false,
      "complexity": 175,
      "length": 8,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "calculateEnhancementGain",
      "parameters": [
        "step1Results",
        "detectionResult"
      ],
      "line": 939,
      "isAsync": false,
      "isExported": false,
      "complexity": 133,
      "length": 8,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "assessDataQuality",
      "parameters": [
        "step1Results"
      ],
      "line": 948,
      "isAsync": false,
      "isExported": false,
      "complexity": 1903,
      "length": 49,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "assessStep3Readiness",
      "parameters": [
        "detectionResult"
      ],
      "line": 998,
      "isAsync": false,
      "isExported": false,
      "complexity": 327,
      "length": 15,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "identifyPythonPatterns",
      "parameters": [
        "directories",
        "structure",
        "structureClues"
      ],
      "line": 1020,
      "isAsync": false,
      "isExported": false,
      "complexity": 1403,
      "length": 40,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "detectPythonPackageManagers",
      "parameters": [
        "structure"
      ],
      "line": 1064,
      "isAsync": false,
      "isExported": false,
      "complexity": 527,
      "length": 19,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "detectPythonWebFramework",
      "parameters": [
        "structure"
      ],
      "line": 1087,
      "isAsync": false,
      "isExported": false,
      "complexity": 440,
      "length": 20,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "detectPythonProjectType",
      "parameters": [
        "directories",
        "structure"
      ],
      "line": 1111,
      "isAsync": false,
      "isExported": false,
      "complexity": 661,
      "length": 30,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "detectPythonTestFramework",
      "parameters": [
        "directories",
        "structure"
      ],
      "line": 1145,
      "isAsync": false,
      "isExported": false,
      "complexity": 441,
      "length": 17,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "detectPythonModuleSystem",
      "parameters": [
        "directories",
        "structure"
      ],
      "line": 1166,
      "isAsync": false,
      "isExported": false,
      "complexity": 362,
      "length": 15,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "detectPythonVenvType",
      "parameters": [
        "directories"
      ],
      "line": 1185,
      "isAsync": false,
      "isExported": false,
      "complexity": 292,
      "length": 12,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "getAllFiles",
      "parameters": [
        "structure"
      ],
      "line": 1201,
      "isAsync": false,
      "isExported": false,
      "complexity": 357,
      "length": 17,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "extractCommands",
      "parameters": [
        "installationText"
      ],
      "line": 1219,
      "isAsync": false,
      "isExported": false,
      "complexity": 307,
      "length": 17,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "constructor",
      "parameters": [
        "options = {}"
      ],
      "line": 17,
      "isAsync": false,
      "isExported": false,
      "complexity": 1,
      "length": 1,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "scanProject",
      "parameters": [
        "projectPath"
      ],
      "line": 39,
      "isAsync": true,
      "isExported": false,
      "complexity": 2255,
      "length": 82,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "scanDirectoryStructure",
      "parameters": [
        "projectPath",
        "currentDepth = 0"
      ],
      "line": 127,
      "isAsync": true,
      "isExported": false,
      "complexity": 1777,
      "length": 66,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "scanReadmeFiles",
      "parameters": [
        "projectPath"
      ],
      "line": 199,
      "isAsync": true,
      "isExported": false,
      "complexity": 721,
      "length": 29,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "analyzeReadmeContent",
      "parameters": [
        "content"
      ],
      "line": 234,
      "isAsync": false,
      "isExported": false,
      "complexity": 1556,
      "length": 54,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "scanConfigFiles",
      "parameters": [
        "projectPath"
      ],
      "line": 294,
      "isAsync": true,
      "isExported": false,
      "complexity": 2124,
      "length": 73,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "analyzeConfigFile",
      "parameters": [
        "filePath",
        "language"
      ],
      "line": 374,
      "isAsync": true,
      "isExported": false,
      "complexity": 1036,
      "length": 39,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "analyzePackageJson",
      "parameters": [
        "packageJson"
      ],
      "line": 419,
      "isAsync": false,
      "isExported": false,
      "complexity": 643,
      "length": 14,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "detectFrameworks",
      "parameters": [
        "packageJson"
      ],
      "line": 439,
      "isAsync": false,
      "isExported": false,
      "complexity": 629,
      "length": 26,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "analyzePackageInfo",
      "parameters": [
        "projectPath"
      ],
      "line": 471,
      "isAsync": true,
      "isExported": false,
      "complexity": 161,
      "length": 7,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "scanDevToolsConfig",
      "parameters": [
        "projectPath"
      ],
      "line": 484,
      "isAsync": true,
      "isExported": false,
      "complexity": 1345,
      "length": 46,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "calculateProjectStats",
      "parameters": [
        "projectPath"
      ],
      "line": 536,
      "isAsync": true,
      "isExported": false,
      "complexity": 152,
      "length": 7,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "performComprehensiveAnalysis",
      "parameters": [
        "scanData"
      ],
      "line": 549,
      "isAsync": false,
      "isExported": false,
      "complexity": 378,
      "length": 12,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "calculateComplexity",
      "parameters": [
        "scanData"
      ],
      "line": 567,
      "isAsync": false,
      "isExported": false,
      "complexity": 680,
      "length": 23,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "calculateScale",
      "parameters": [
        "scanData"
      ],
      "line": 596,
      "isAsync": false,
      "isExported": false,
      "complexity": 172,
      "length": 6,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "calculateMaturity",
      "parameters": [
        "scanData"
      ],
      "line": 608,
      "isAsync": false,
      "isExported": false,
      "complexity": 515,
      "length": 22,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "extractTechStackHints",
      "parameters": [
        "scanData"
      ],
      "line": 636,
      "isAsync": false,
      "isExported": false,
      "complexity": 1963,
      "length": 53,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "inferProjectType",
      "parameters": [
        "scanData"
      ],
      "line": 695,
      "isAsync": false,
      "isExported": false,
      "complexity": 509,
      "length": 18,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "inferDevelopmentStage",
      "parameters": [
        "scanData"
      ],
      "line": 719,
      "isAsync": false,
      "isExported": false,
      "complexity": 435,
      "length": 13,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "getNextStepRecommendations",
      "parameters": [
        "analysis"
      ],
      "line": 738,
      "isAsync": false,
      "isExported": false,
      "complexity": 715,
      "length": 32,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "generateScanId",
      "parameters": [
        "projectPath"
      ],
      "line": 773,
      "isAsync": false,
      "isExported": false,
      "complexity": 68,
      "length": 3,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "validateProjectPath",
      "parameters": [
        "projectPath"
      ],
      "line": 777,
      "isAsync": true,
      "isExported": false,
      "complexity": 146,
      "length": 8,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "shouldIgnore",
      "parameters": [
        "name"
      ],
      "line": 786,
      "isAsync": false,
      "isExported": false,
      "complexity": 268,
      "length": 9,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "classifyFileType",
      "parameters": [
        "fileName"
      ],
      "line": 796,
      "isAsync": false,
      "isExported": false,
      "complexity": 488,
      "length": 22,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "getConfigFileType",
      "parameters": [
        "fileName"
      ],
      "line": 819,
      "isAsync": false,
      "isExported": false,
      "complexity": 433,
      "length": 10,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "extractTomlSections",
      "parameters": [
        "content"
      ],
      "line": 830,
      "isAsync": false,
      "isExported": false,
      "complexity": 208,
      "length": 9,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "name": "getMaxDepth",
      "parameters": [
        "structure",
        "currentDepth = 0"
      ],
      "line": 840,
      "isAsync": false,
      "isExported": false,
      "complexity": 310,
      "length": 12,
      "file": "server/analyzers/project-scanner.js"
    }
  ],
  "classes": [
    {
      "name": "UltraDetailedCodeAnalyzer",
      "superClass": null,
      "line": 9,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "analyzeProject",
          "parameters": [
            "files"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const file of codeFiles"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "fileAnalysis"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_analyzeFile",
          "parameters": [
            "file"
          ],
          "isPrivate": true
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_analyzeLines",
          "parameters": [
            "content",
            "fileAnalysis"
          ],
          "isPrivate": true
        },
        {
          "name": "for",
          "parameters": [
            "let i = 0; i < lines.length; i++"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!trimmedLine"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "inBlockComment"
          ],
          "isPrivate": false
        },
        {
          "name": "_extractFunctions",
          "parameters": [
            "content",
            "fileAnalysis"
          ],
          "isPrivate": true
        },
        {
          "name": "_extractClasses",
          "parameters": [
            "content",
            "fileAnalysis"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeImportsExports",
          "parameters": [
            "content",
            "fileAnalysis"
          ],
          "isPrivate": true
        }
      ],
      "properties": [
        "totalAnalyzedFiles",
        "errors"
      ],
      "complexity": 0,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "name": "EnhancedAIContentGenerator",
      "superClass": null,
      "line": 6,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "initialize",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "generateRealProjectOverview",
          "parameters": [
            "realScanData"
          ],
          "isPrivate": false
        },
        {
          "name": "generateRealAPIDocumentation",
          "parameters": [
            "realScanData"
          ],
          "isPrivate": false
        },
        {
          "name": "generateRealModuleArchitecture",
          "parameters": [
            "realScanData"
          ],
          "isPrivate": false
        },
        {
          "name": "_generateFileTypeTable",
          "parameters": [
            "filesByExtension"
          ],
          "isPrivate": true
        },
        {
          "name": "_getFileTypeDescription",
          "parameters": [
            "ext"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateDirectoryTree",
          "parameters": [
            "directories"
          ],
          "isPrivate": true
        },
        {
          "name": "_formatLargestFiles",
          "parameters": [
            "largestFiles"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "!largestFiles || largestFiles.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_formatRecentFiles",
          "parameters": [
            "recentFiles"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "!recentFiles || recentFiles.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_formatPackageScripts",
          "parameters": [
            "scripts"
          ],
          "isPrivate": true
        },
        {
          "name": "_getScriptDescription",
          "parameters": [
            "scriptName"
          ],
          "isPrivate": true
        },
        {
          "name": "_countCodeFiles",
          "parameters": [
            "filesByExtension"
          ],
          "isPrivate": true
        },
        {
          "name": "_calculateAverageFileSize",
          "parameters": [
            "files"
          ],
          "isPrivate": true
        },
        {
          "name": "_calculateCodeDensity",
          "parameters": [
            "statistics"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateQualityAssessment",
          "parameters": [
            "realScanData"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "statistics.totalCodeLines > 20000"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "statistics.totalCodeLines > 5000"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "apiEndpoints.totalEndpoints > 100"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "apiEndpoints.totalEndpoints > 20"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "configuration.files.length > 3"
          ],
          "isPrivate": false
        },
        {
          "name": "_analyzeConfigurationFiles",
          "parameters": [
            "configuration"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "!configuration.files || configuration.files.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_getConfigDescription",
          "parameters": [
            "configName"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateDevelopmentCommands",
          "parameters": [
            "scripts"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateDependencyReport",
          "parameters": [
            "dependencies"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "!dependencies || !dependencies.analysis"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "analysis.categories"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "deps.length > 3"
          ],
          "isPrivate": false
        },
        {
          "name": "_getCategoryDisplayName",
          "parameters": [
            "category"
          ],
          "isPrivate": true
        },
        {
          "name": "_estimateMemoryUsage",
          "parameters": [
            "statistics"
          ],
          "isPrivate": true
        },
        {
          "name": "_estimateCPUUsage",
          "parameters": [
            "statistics"
          ],
          "isPrivate": true
        },
        {
          "name": "_evaluateScalability",
          "parameters": [
            "realScanData"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "moduleStructure.layers.services.length > 10"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "statistics.projectComplexity === 'high'"
          ],
          "isPrivate": false
        },
        {
          "name": "_categorizeEndpointsByMethod",
          "parameters": [
            "routes"
          ],
          "isPrivate": true
        },
        {
          "name": "_categorizeEndpointsByModule",
          "parameters": [
            "routes"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateSystemAPISection",
          "parameters": [
            "routes"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "systemRoutes.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_generateBusinessAPISection",
          "parameters": [
            "routes"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "businessRoutes.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_generateUtilityAPISection",
          "parameters": [
            "routes"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "utilityRoutes.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_analyzeMiddleware",
          "parameters": [
            "routes"
          ],
          "isPrivate": true
        },
        {
          "name": "forEach",
          "parameters": [
            "route => {\n            if (route.middleware && route.middleware.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_generateSecurityAnalysis",
          "parameters": [
            "routes"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "hasAuth"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "hasCors"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "hasHelmet"
          ],
          "isPrivate": false
        },
        {
          "name": "_generateLayerStatistics",
          "parameters": [
            "layers"
          ],
          "isPrivate": true
        },
        {
          "name": "_getLayerDisplayName",
          "parameters": [
            "layer"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateArchitectureDiagram",
          "parameters": [
            "moduleStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateLayerModules",
          "parameters": [
            "modules",
            "description"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "!modules || modules.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "modules.length > 10"
          ],
          "isPrivate": false
        },
        {
          "name": "_filterModulesByImportance",
          "parameters": [
            "modules",
            "importance"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "filtered.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_calculateAverageModuleSize",
          "parameters": [
            "modules"
          ],
          "isPrivate": true
        },
        {
          "name": "_assessCoupling",
          "parameters": [
            "moduleStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "_formatSize",
          "parameters": [
            "bytes"
          ],
          "isPrivate": true
        }
      ],
      "properties": [
        "initialized"
      ],
      "complexity": 0,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "name": "RealProjectScanner",
      "superClass": null,
      "line": 13,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "scanProject",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "_scanBasicInfo",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_scanFileStructure",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_scanDirectory",
          "parameters": [
            "dirPath",
            "structure",
            "depth"
          ],
          "isPrivate": true
        },
        {
          "name": "for",
          "parameters": [
            "const item of items"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!structure.filesByExtension[ext]"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_analyzeCode",
          "parameters": [
            "fileStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "analysis.classes.length > 0 || analysis.functions.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "analysis.isMainFile"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_analyzeFileContent",
          "parameters": [
            "content",
            "fileInfo"
          ],
          "isPrivate": true
        },
        {
          "name": "for",
          "parameters": [
            "let i = 0; i < lines.length; i++"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!line"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "inBlockComment"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "classMatch"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "funcMatch"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "importMatch"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "exportMatch"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "analysis.classes.length > 0"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "projectPath",
        "scanResults"
      ],
      "complexity": 0,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "name": "AIContentGeneratorService",
      "superClass": null,
      "line": 6,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "initialize",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "generateProjectOverview",
          "parameters": [
            "projectData"
          ],
          "isPrivate": false
        },
        {
          "name": "generateLanguageAnalysis",
          "parameters": [
            "languageData"
          ],
          "isPrivate": false
        },
        {
          "name": "generateFileAnalysis",
          "parameters": [
            "fileData"
          ],
          "isPrivate": false
        },
        {
          "name": "generateSystemArchitecture",
          "parameters": [
            "architectureData"
          ],
          "isPrivate": false
        },
        {
          "name": "generateTechStack",
          "parameters": [
            "techData"
          ],
          "isPrivate": false
        },
        {
          "name": "generateModulesCatalog",
          "parameters": [
            "moduleData"
          ],
          "isPrivate": false
        },
        {
          "name": "generateModuleDetail",
          "parameters": [
            "moduleDetailData"
          ],
          "isPrivate": false
        },
        {
          "name": "generateIntegrationContracts",
          "parameters": [
            "integrationData"
          ],
          "isPrivate": false
        },
        {
          "name": "_inferProjectType",
          "parameters": [
            "pkg"
          ],
          "isPrivate": true
        },
        {
          "name": "_formatDirectoryStructure",
          "parameters": [
            "structure",
            "depth = 0"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "structure.directories"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const dir of structure.directories"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "structure.files && depth === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const file of keyFiles"
          ],
          "isPrivate": false
        },
        {
          "name": "_analyzeTechStack",
          "parameters": [
            "pkg"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeProjectFeatures",
          "parameters": [
            "projectData"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateLanguageStats",
          "parameters": [
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "!projectStructure?.structure?.files"
          ],
          "isPrivate": false
        },
        {
          "name": "_formatDependencies",
          "parameters": [
            "deps"
          ],
          "isPrivate": true
        },
        {
          "name": "_evaluateTechStack",
          "parameters": [
            "detection",
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "projectStructure?.package?.hasTypeScript"
          ],
          "isPrivate": false
        },
        {
          "name": "_detectTestFramework",
          "parameters": [
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "_detectBuildTools",
          "parameters": [
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "_estimateCodeLines",
          "parameters": [
            "structure"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeArchitectureComponents",
          "parameters": [
            "structure"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeDevEnvironment",
          "parameters": [
            "pkg",
            "structure"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "pkg?.engines?.node"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "configFiles.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "pkg?.type === 'module'"
          ],
          "isPrivate": false
        },
        {
          "name": "_analyzePackageScripts",
          "parameters": [
            "pkg"
          ],
          "isPrivate": true
        },
        {
          "name": "_evaluateProjectQuality",
          "parameters": [
            "projectData"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "depCount > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_analyzeFileTypes",
          "parameters": [
            "structure"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateDirectoryAnalysis",
          "parameters": [
            "structure"
          ],
          "isPrivate": true
        },
        {
          "name": "_evaluateCodeOrganization",
          "parameters": [
            "structure"
          ],
          "isPrivate": true
        },
        {
          "name": "_identifyKeyFiles",
          "parameters": [
            "structure"
          ],
          "isPrivate": true
        },
        {
          "name": "_suggestImprovements",
          "parameters": [
            "structure"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeArchitecture",
          "parameters": [
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "_identifyServices",
          "parameters": [
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeDataFlow",
          "parameters": [
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeDependencies",
          "parameters": [
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "_evaluateScalability",
          "parameters": [
            "data"
          ],
          "isPrivate": true
        },
        {
          "name": "_formatDetailedDependencies",
          "parameters": [
            "deps"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeDevTools",
          "parameters": [
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "tools.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_analyzePerformance",
          "parameters": [
            "techData"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateServiceModules",
          "parameters": [
            "detectedModules",
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateRouteModules",
          "parameters": [
            "detectedModules",
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateUtilityModules",
          "parameters": [
            "detectedModules",
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateConfigModules",
          "parameters": [
            "detectedModules",
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateModuleDependencyGraph",
          "parameters": [
            "detectedModules"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeModuleResponsibilities",
          "parameters": [
            "detectedModules"
          ],
          "isPrivate": true
        },
        {
          "name": "_suggestModuleExtensions",
          "parameters": [
            "projectStructure"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateModuleMethods",
          "parameters": [
            "methods"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "!methods || methods.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_generateModuleExports",
          "parameters": [
            "exports"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateModuleDependencies",
          "parameters": [
            "dependencies"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeModuleCodeQuality",
          "parameters": [
            "codeAnalysis"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateUsageExample",
          "parameters": [
            "moduleName",
            "methods"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateAPIReference",
          "parameters": [
            "codeAnalysis"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeModuleTestCoverage",
          "parameters": [
            "moduleName",
            "moduleInfo"
          ],
          "isPrivate": true
        },
        {
          "name": "_suggestModuleImprovements",
          "parameters": [
            "codeAnalysis"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateSystemAPIContracts",
          "parameters": [
            "systemEndpoints"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateModeAPIContracts",
          "parameters": [
            "modeEndpoints"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateModuleAPIContracts",
          "parameters": [
            "moduleEndpoints"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateRequestContracts",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_generateResponseContracts",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_generateErrorContracts",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_generateModuleCommunicationContracts",
          "parameters": [
            "modules"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateWebSocketContracts",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_generateSecurityContracts",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_generateVersionCompatibilityContracts",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_generatePerformanceContracts",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_generateTestingContracts",
          "parameters": [],
          "isPrivate": true
        }
      ],
      "properties": [
        "initialized"
      ],
      "complexity": 0,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "name": "AIResponseHandlerService",
      "superClass": null,
      "line": 15,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "ensureMgKiroStructure",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const dir of dirs"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "saveDocument",
          "parameters": [
            "category",
            "filename",
            "content"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "saveDocuments",
          "parameters": [
            "documents"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const doc of documents"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!category || !filename || !content"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "errors.length > 0 && savedFiles.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "processAIPackage",
          "parameters": [
            "aiPackage"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!aiPackage || typeof aiPackage !== 'object'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!workflowId || stepIndex === undefined || !aiGeneratedContent"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "prepareDocuments",
          "parameters": [
            "stepIndex",
            "aiContent"
          ],
          "isPrivate": false
        },
        {
          "name": "switch",
          "parameters": [
            "stepIndex"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "aiContent.projectStructure"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "aiContent.languageData || aiContent.detection"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "aiContent.fileData || aiContent.projectStructure"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "aiContent.projectStructure || aiContent.languageData"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "aiContent.modulesCatalog"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "aiContent.modulesHierarchy"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "aiContent.prompts"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const moduleDoc of aiContent.moduleDocuments"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "moduleDoc.name && moduleDoc.content"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "aiContent.integrationContracts"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "aiContent.dataFlow"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "documents.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "checkMgKiroStatus",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const subdir of subdirs"
          ],
          "isPrivate": false
        },
        {
          "name": "cleanupMgKiro",
          "parameters": [
            "confirm = false"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!confirm"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "projectPath",
        "mgKiroPath",
        "aiGenerator"
      ],
      "complexity": 0,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "name": "TemplateReader",
      "superClass": null,
      "line": 14,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "readTemplate",
          "parameters": [
            "category",
            "name"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "this.cacheEnabled"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_buildTemplatePath",
          "parameters": [
            "category",
            "name"
          ],
          "isPrivate": true
        },
        {
          "name": "_findTemplateInSubdirs",
          "parameters": [
            "baseDir",
            "fileName"
          ],
          "isPrivate": true
        },
        {
          "name": "for",
          "parameters": [
            "const item of items"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "listTemplates",
          "parameters": [
            "category"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_listTemplatesRecursive",
          "parameters": [
            "dir",
            "category",
            "subPath = ''"
          ],
          "isPrivate": true
        },
        {
          "name": "for",
          "parameters": [
            "const item of items"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_getCategoryDir",
          "parameters": [
            "category"
          ],
          "isPrivate": true
        },
        {
          "name": "processTemplate",
          "parameters": [
            "templateContent",
            "variables = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!templateContent || typeof templateContent !== 'string'"
          ],
          "isPrivate": false
        },
        {
          "name": "clearCache",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getCacheStats",
          "parameters": [],
          "isPrivate": false
        }
      ],
      "properties": [
        "promptsDir",
        "cache",
        "cacheEnabled"
      ],
      "complexity": 0,
      "file": "server/services/template-reader.js"
    },
    {
      "name": "PromptManager",
      "superClass": null,
      "line": 12,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [
            "config = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "_initializeManager",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_setupGlobalVariables",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "loadPrompt",
          "parameters": [
            "category",
            "name",
            "variables = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!templateData"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "this.config.cacheEnabled"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "listPrompts",
          "parameters": [
            "category = null"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "category"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const cat of categories"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_processPrompt",
          "parameters": [
            "content",
            "variables = {}"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "!content || typeof content !== 'string'"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const [key",
            "value] of allVariables"
          ],
          "isPrivate": false
        },
        {
          "name": "_isValidCache",
          "parameters": [
            "cacheKey"
          ],
          "isPrivate": true
        },
        {
          "name": "_getCachedPrompt",
          "parameters": [
            "cacheKey",
            "variables"
          ],
          "isPrivate": true
        },
        {
          "name": "_cachePrompt",
          "parameters": [
            "cacheKey",
            "content",
            "lastModified"
          ],
          "isPrivate": true
        },
        {
          "name": "clearCache",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getStatus",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "setGlobalVariable",
          "parameters": [
            "key",
            "value"
          ],
          "isPrivate": false
        },
        {
          "name": "removeGlobalVariable",
          "parameters": [
            "key"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "config",
        "cache",
        "cacheTimestamps",
        "globalVariables",
        "templateReader"
      ],
      "complexity": 0,
      "file": "server/prompt-manager.js"
    },
    {
      "name": "ServiceBus",
      "superClass": null,
      "line": 6,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "register",
          "parameters": [
            "name",
            "serviceClass",
            "config = {}",
            "dependencies = []"
          ],
          "isPrivate": false
        },
        {
          "name": "get",
          "parameters": [
            "name"
          ],
          "isPrivate": false
        },
        {
          "name": "_initializeService",
          "parameters": [
            "name"
          ],
          "isPrivate": true
        },
        {
          "name": "for",
          "parameters": [
            "const depName of dependencies"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_checkCircularDependency",
          "parameters": [
            "serviceName",
            "visiting"
          ],
          "isPrivate": true
        },
        {
          "name": "for",
          "parameters": [
            "const dep of dependencies"
          ],
          "isPrivate": false
        },
        {
          "name": "initializeAll",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const serviceName of serviceNames"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getServiceStatus",
          "parameters": [
            "name"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "name"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const [serviceName] of this.services"
          ],
          "isPrivate": false
        },
        {
          "name": "getDependencyGraph",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const [serviceName",
            "deps] of this.dependencyGraph"
          ],
          "isPrivate": false
        },
        {
          "name": "validateDependencies",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const [serviceName",
            "dependencies] of this.dependencyGraph"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const dep of dependencies"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "reset",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getStats",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "shutdown",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const serviceName of shutdownOrder"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "instance && typeof instance.shutdown === 'function'"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "services",
        "serviceInstances",
        "serviceConfigs",
        "dependencyGraph",
        "serviceStatus",
        "initializationOrder"
      ],
      "complexity": 0,
      "file": "server/services/service-bus.js"
    },
    {
      "name": "UnifiedTemplateService",
      "superClass": null,
      "line": 17,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getTemplateByContext",
          "parameters": [
            "contextData",
            "templateRequest = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "executeIntelligentTemplateSelection",
          "parameters": [
            "contextData",
            "templateRequest"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "language === 'auto' && projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "switch",
          "parameters": [
            "selectionStrategy"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getLegacyTemplate",
          "parameters": [
            "category",
            "name",
            "variables"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!templateData"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "generateIntelligentTemplate",
          "parameters": [
            "contextData",
            "language",
            "languageInfo"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "language !== 'general' && languageInfo"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "generatedTemplate.success"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "selectHybridTemplate",
          "parameters": [
            "userIntent",
            "language",
            "languageInfo",
            "variables"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "userIntent && languageInfo"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "contextualPrompts.success"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "language && language !== 'general'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "languagePrompts.success"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "generateTemplateByModeAndStep",
          "parameters": [
            "mode",
            "step",
            "templateType",
            "contextData"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "templatePath"
          ],
          "isPrivate": false
        },
        {
          "name": "enhanceTemplate",
          "parameters": [
            "templateResult",
            "contextData",
            "language",
            "languageInfo"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "language && language !== 'general' && languageInfo"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "frameworks.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "contextData.mode"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "contextData.step"
          ],
          "isPrivate": false
        },
        {
          "name": "buildCacheKey",
          "parameters": [
            "contextData",
            "templateRequest"
          ],
          "isPrivate": false
        },
        {
          "name": "setCacheItem",
          "parameters": [
            "key",
            "value"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "this.templateCache.size >= this.maxCacheSize"
          ],
          "isPrivate": false
        },
        {
          "name": "extractTemplateContent",
          "parameters": [
            "templates"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "templates && typeof templates === 'object'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "firstTemplate && firstTemplate.content"
          ],
          "isPrivate": false
        },
        {
          "name": "formatContextualPromptsAsTemplate",
          "parameters": [
            "contextualPrompts"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "contextualPrompts.prompts"
          ],
          "isPrivate": false
        },
        {
          "name": "forEach",
          "parameters": [
            "category => {\n                content += `## ${category}\\n\\n`;\n                const prompts = contextualPrompts.prompts[category];\n                if (typeof prompts === 'object'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "contextualPrompts.suggestions"
          ],
          "isPrivate": false
        },
        {
          "name": "formatLanguagePromptsAsTemplate",
          "parameters": [
            "prompts"
          ],
          "isPrivate": false
        },
        {
          "name": "forEach",
          "parameters": [
            "category => {\n            content += `## ${category}\\n\\n`;\n            const categoryPrompts = prompts[category];\n            if (typeof categoryPrompts === 'object'"
          ],
          "isPrivate": false
        },
        {
          "name": "getDefaultTemplate",
          "parameters": [
            "variables = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "generateReasoning",
          "parameters": [
            "strategy",
            "contextData"
          ],
          "isPrivate": false
        },
        {
          "name": "findAlternativeTemplates",
          "parameters": [
            "contextData",
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "contextData.mode"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "language && language !== 'general'"
          ],
          "isPrivate": false
        },
        {
          "name": "generateSuggestions",
          "parameters": [
            "template",
            "contextData"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "template.type === 'generated'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "contextData.language === 'auto'"
          ],
          "isPrivate": false
        },
        {
          "name": "_calculateContextConfidence",
          "parameters": [
            "contextData",
            "templateRequest"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "contextData.projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "contextData.language && contextData.language !== 'auto'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "contextData.step"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "contextData.userIntent"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "contextData.mode"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "templateRequest.category && templateRequest.name"
          ],
          "isPrivate": false
        },
        {
          "name": "_selectOptimalStrategy",
          "parameters": [
            "selectionContext",
            "confidence"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "category && name"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "userIntent && detectedLanguage && detectedLanguage !== 'general'"
          ],
          "isPrivate": false
        },
        {
          "name": "_recordSelectionMetrics",
          "parameters": [
            "strategy",
            "confidence"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "confHistory.length > 100"
          ],
          "isPrivate": false
        },
        {
          "name": "generateAdvancedAITemplate",
          "parameters": [
            "contextData",
            "selectionContext",
            "confidence"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "result && result.success"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getFallbackTemplate",
          "parameters": [
            "contextData"
          ],
          "isPrivate": false
        },
        {
          "name": "getServiceStats",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "_calculateStrategyPercentages",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_analyzeConfidenceDistribution",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_calculateFallbackRate",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_calculateAISuccessRate",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_determineSystemHealth",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "clearCache",
          "parameters": [],
          "isPrivate": false
        }
      ],
      "properties": [
        "languageIntelligence",
        "templateReader",
        "templateCategories",
        "templateCache",
        "maxCacheSize",
        "cacheHitCount",
        "totalRequests",
        "intelligenceConfig",
        "performanceMetrics"
      ],
      "complexity": 0,
      "file": "server/services/unified-template-service.js"
    },
    {
      "name": "ConfigService",
      "superClass": null,
      "line": 9,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [
            "configDir = './config'"
          ],
          "isPrivate": false
        },
        {
          "name": "_loadDefaultConfig",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "_loadConfigFiles",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_mergeConfig",
          "parameters": [
            "target",
            "source"
          ],
          "isPrivate": true
        },
        {
          "name": "for",
          "parameters": [
            "const key in source"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!target[key] || typeof target[key] !== 'object'"
          ],
          "isPrivate": false
        },
        {
          "name": "_applyEnvironmentOverrides",
          "parameters": [],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "process.env.MCP_PORT"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "process.env.MCP_HOST"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "process.env.MCP_LOG_LEVEL"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "process.env.MCP_API_KEY"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "process.env.NODE_ENV"
          ],
          "isPrivate": false
        },
        {
          "name": "get",
          "parameters": [
            "path",
            "defaultValue = null"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const key of keys"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "value && typeof value === 'object' && key in value"
          ],
          "isPrivate": false
        },
        {
          "name": "set",
          "parameters": [
            "path",
            "value"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const key of keys"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!target[key] || typeof target[key] !== 'object'"
          ],
          "isPrivate": false
        },
        {
          "name": "getServerConfig",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getMCPConfig",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getPromptConfig",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getAnalyzersConfig",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getWorkflowConfig",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "validate",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!port || port < 1 || port > 65535"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!host || typeof host !== 'string'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "rateLimit.windowMs < 1000"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "rateLimit.max < 1"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "cacheTTL < 60000"
          ],
          "isPrivate": false
        },
        {
          "name": "getEnvironmentInfo",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getAll",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "reload",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "isAuthEnabled",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "validateApiKey",
          "parameters": [
            "providedKey"
          ],
          "isPrivate": false
        },
        {
          "name": "getDebugInfo",
          "parameters": [],
          "isPrivate": false
        }
      ],
      "properties": [
        "configDir",
        "config"
      ],
      "complexity": 0,
      "file": "server/services/config-service.js"
    },
    {
      "name": "LanguageTemplateGenerator",
      "superClass": null,
      "line": 15,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "generateTemplate",
          "parameters": [
            "projectPath",
            "templateName"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "loadLanguageConfig",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "loadLanguageDefaults",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "loadBaseTemplate",
          "parameters": [
            "templateName"
          ],
          "isPrivate": false
        },
        {
          "name": "loadLanguageTemplate",
          "parameters": [
            "language",
            "templateName"
          ],
          "isPrivate": false
        },
        {
          "name": "renderTemplate",
          "parameters": [
            "template",
            "defaults",
            "detection",
            "config"
          ],
          "isPrivate": false
        },
        {
          "name": "extractFrameworkVariables",
          "parameters": [
            "frameworks",
            "config"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "frameworks && frameworks.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "config.frameworks"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "frameworkConfig"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "frameworkConfig.category === 'frontend'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "frameworkConfig.category === 'backend'"
          ],
          "isPrivate": false
        },
        {
          "name": "extractProjectVariables",
          "parameters": [
            "detection"
          ],
          "isPrivate": false
        },
        {
          "name": "replaceTemplateVariables",
          "parameters": [
            "template",
            "variables"
          ],
          "isPrivate": false
        },
        {
          "name": "while",
          "parameters": [
            "matches && iterations < maxIterations"
          ],
          "isPrivate": false
        },
        {
          "name": "addLanguageSpecificNotes",
          "parameters": [
            "template",
            "language",
            "suggestions"
          ],
          "isPrivate": false
        },
        {
          "name": "generateFallbackTemplate",
          "parameters": [
            "templateName"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getLanguageDocUrl",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getBestPracticesUrl",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getCommunityUrl",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "generateMultipleTemplates",
          "parameters": [
            "projectPath",
            "templateNames"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const templateName of templateNames"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "batchGenerate",
          "parameters": [
            "requests",
            "batchOptions = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "let i = 0; i < requests.length; i++"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!request.languageDetection || !request.languageDetection.language"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "failFast"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "let i = 0; i < requests.length; i += maxConcurrency"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const chunk of chunks"
          ],
          "isPrivate": false
        },
        {
          "name": "forEach",
          "parameters": [
            "result => {\n                    if (result.success"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "failFast && errors.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "failFast"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "detector",
        "templatesPath",
        "languagesPath"
      ],
      "complexity": 0,
      "file": "server/language/template-generator.js"
    },
    {
      "name": "LanguageIntelligenceService",
      "superClass": null,
      "line": 10,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "detectProjectLanguage",
          "parameters": [
            "projectPath",
            "options = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "useCache"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getSupportedLanguages",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getLanguageFrameworks",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!this.detector.languages[language]"
          ],
          "isPrivate": false
        },
        {
          "name": "generateLanguageTemplate",
          "parameters": [
            "languageDetection",
            "options = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "useCache && result.success"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getLanguageTemplateVariants",
          "parameters": [
            "language",
            "templateName = null"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "batchGenerateTemplates",
          "parameters": [
            "requests"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getLanguageSpecificPrompts",
          "parameters": [
            "language",
            "options = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "useCache && result.success"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "generateContextualPrompts",
          "parameters": [
            "contextData"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getBestPracticesPrompts",
          "parameters": [
            "language",
            "context = 'general'"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "clearCache",
          "parameters": [
            "type = 'all'"
          ],
          "isPrivate": false
        },
        {
          "name": "switch",
          "parameters": [
            "type"
          ],
          "isPrivate": false
        },
        {
          "name": "getServiceStats",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "setCache",
          "parameters": [
            "cache",
            "key",
            "data"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "cache.size >= this.cache.maxSize"
          ],
          "isPrivate": false
        },
        {
          "name": "getLanguageCapabilities",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "generateLanguageRecommendations",
          "parameters": [
            "detection"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "detection.confidence < 50"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "detection.frameworks && detection.frameworks.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "getLanguageDisplayName",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getLanguageMaturityLevel",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "categorizeLanguages",
          "parameters": [
            "languages"
          ],
          "isPrivate": false
        },
        {
          "name": "getFrameworkDisplayName",
          "parameters": [
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "getFrameworkCategory",
          "parameters": [
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "getFrameworkPopularity",
          "parameters": [
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "getFrameworkDocumentation",
          "parameters": [
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "categorizeFrameworks",
          "parameters": [
            "frameworks"
          ],
          "isPrivate": false
        },
        {
          "name": "calculateHitRate",
          "parameters": [
            "cache"
          ],
          "isPrivate": false
        },
        {
          "name": "getPerformanceMetrics",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getAvailableTemplateTypes",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getAvailablePromptCategories",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getTemplateRecommendations",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getTemplateUsageGuidelines",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "analyzeBatchPerformance",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "generateBatchInsights",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "optimizeContextualPrompts",
          "parameters": [
            "result"
          ],
          "isPrivate": false
        },
        {
          "name": "extractLearningInsights",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "categorizeBestPractices",
          "parameters": [
            "practices"
          ],
          "isPrivate": false
        },
        {
          "name": "prioritizeBestPractices",
          "parameters": [
            "practices"
          ],
          "isPrivate": false
        },
        {
          "name": "generateActionItems",
          "parameters": [],
          "isPrivate": false
        }
      ],
      "properties": [
        "detector",
        "templateGenerator",
        "promptIntelligence",
        "cache"
      ],
      "complexity": 0,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "name": "TemplateEngineService",
      "superClass": null,
      "line": 10,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "generateTemplate",
          "parameters": [
            "languageDetection",
            "options = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "result.success"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getLanguageVariants",
          "parameters": [
            "language",
            "templateName = null"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "variants.success"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "batchGenerate",
          "parameters": [
            "requests",
            "batchOptions = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const batch of batches"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "failFast"
          ],
          "isPrivate": false
        },
        {
          "name": "forEach",
          "parameters": [
            "result => {\n                    if (result.success"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "includeAnalytics"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "searchTemplates",
          "parameters": [
            "criteria = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "includeVariants && language"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "validateTemplate",
          "parameters": [
            "templateContent",
            "validationOptions = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "checkSyntax"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "checkVariables"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "checkStructure"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getTemplateStats",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "calculateTemplateQuality",
          "parameters": [
            "templates"
          ],
          "isPrivate": false
        },
        {
          "name": "generateTemplateSuggestions",
          "parameters": [
            "result",
            "options"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "result.metadata.templateCount < 3"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!options.includeFrameworks && result.metadata.frameworks.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "findRelatedTemplates",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "availableTemplates.languages[language]"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "updatePerformanceMetrics",
          "parameters": [
            "duration"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeVariants",
          "parameters": [
            "variants"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "analysis.totalVariants > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "getVariantRecommendations",
          "parameters": [
            "language",
            "variants"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "uniqueTypes.length < 3"
          ],
          "isPrivate": false
        },
        {
          "name": "getVariantUsageStats",
          "parameters": [
            "language",
            "templateName"
          ],
          "isPrivate": false
        },
        {
          "name": "chunkArray",
          "parameters": [
            "array",
            "size"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "let i = 0; i < array.length; i += size"
          ],
          "isPrivate": false
        },
        {
          "name": "generateBatchAnalytics",
          "parameters": [
            "results",
            "errors"
          ],
          "isPrivate": false
        },
        {
          "name": "forEach",
          "parameters": [
            "result => {\n            if (result.metadata"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "result.enhancement && result.enhancement.qualityScore"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "analytics.qualityScores.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "findBaseTemplates",
          "parameters": [
            "keyword",
            "category"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "findLanguageVariants",
          "parameters": [
            "language",
            "keyword",
            "category"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "generateSearchSuggestions",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "validateTemplateSyntax",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "validateTemplateVariables",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "validateTemplateStructure",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getBaseTemplateCount",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getLanguageVariantCount",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getTotalTemplateCount",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "categorizeError",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "detectTemplateCategory",
          "parameters": [
            "name"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "templateGenerator",
        "templatesBaseDir",
        "languageVariantsDir",
        "cache",
        "performanceMetrics"
      ],
      "complexity": 0,
      "file": "server/services/template-engine-service.js"
    },
    {
      "name": "PromptIntelligence",
      "superClass": null,
      "line": 10,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getLanguageSpecificPrompts",
          "parameters": [
            "language",
            "options = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!languageConfig"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "category === 'all' || category === 'core'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "framework && languageConfig.frameworks && languageConfig.frameworks[framework]"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "bestPractices.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "includeExamples"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "examples.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "generateContextualPrompts",
          "parameters": [
            "contextData"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getBestPractices",
          "parameters": [
            "language",
            "context = 'general'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "practices.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeUserIntent",
          "parameters": [
            "userIntent",
            "currentTask"
          ],
          "isPrivate": false
        },
        {
          "name": "buildContextualPrompts",
          "parameters": [
            "detection",
            "intentAnalysis",
            "previousActions",
            "constraints"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "intentPrompts"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "languagePrompts.success"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "previousActions.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "contextualAdvice.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "constraintPrompts.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "generateSmartSuggestions",
          "parameters": [
            "detection",
            "intentAnalysis",
            "contextualPrompts"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "detection.frameworks && detection.frameworks.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "getDefaultBestPractices",
          "parameters": [
            "language",
            "context"
          ],
          "isPrivate": false
        },
        {
          "name": "getExamples",
          "parameters": [
            "language",
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "framework && examples[framework]"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getIntentPrompts",
          "parameters": [
            "intent",
            "language",
            "frameworks"
          ],
          "isPrivate": false
        },
        {
          "name": "mapIntentToCategory",
          "parameters": [
            "intent"
          ],
          "isPrivate": false
        },
        {
          "name": "getPrimaryFramework",
          "parameters": [
            "frameworks"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!frameworks || frameworks.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "generateContextualAdvice",
          "parameters": [
            "previousActions",
            "intent"
          ],
          "isPrivate": false
        },
        {
          "name": "generateConstraintPrompts",
          "parameters": [
            "constraints"
          ],
          "isPrivate": false
        },
        {
          "name": "getIntentSuggestions",
          "parameters": [
            "intent",
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getFrameworkSuggestions",
          "parameters": [
            "framework",
            "intent"
          ],
          "isPrivate": false
        },
        {
          "name": "countPrompts",
          "parameters": [
            "prompts"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "typeof category === 'object'"
          ],
          "isPrivate": false
        },
        {
          "name": "getSupportedLanguages",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "isLanguageSupported",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "detector",
        "promptsBaseDir",
        "languageVariantsDir",
        "promptCategories",
        "languagePrompts"
      ],
      "complexity": 0,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "name": "WorkflowService",
      "superClass": null,
      "line": 8,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [
            "workflowState = null"
          ],
          "isPrivate": false
        },
        {
          "name": "createWorkflow",
          "parameters": [
            "projectPath",
            "mode = 'init'"
          ],
          "isPrivate": false
        },
        {
          "name": "createWorkflowWithId",
          "parameters": [
            "workflowId",
            "projectPath",
            "mode = 'init'"
          ],
          "isPrivate": false
        },
        {
          "name": "getWorkflow",
          "parameters": [
            "workflowId"
          ],
          "isPrivate": false
        },
        {
          "name": "updateStep",
          "parameters": [
            "workflowId",
            "stepIndex",
            "status",
            "result = null",
            "error = null"
          ],
          "isPrivate": false
        },
        {
          "name": "getProgress",
          "parameters": [
            "workflowId"
          ],
          "isPrivate": false
        },
        {
          "name": "getNextStep",
          "parameters": [
            "workflow"
          ],
          "isPrivate": false
        },
        {
          "name": "validateWorkflowStep",
          "parameters": [
            "workflowId",
            "requiredStep"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!workflowId"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!workflow"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "workflow.currentStep < requiredStep"
          ],
          "isPrivate": false
        },
        {
          "name": "getStepResult",
          "parameters": [
            "workflowId",
            "stepIndex"
          ],
          "isPrivate": false
        },
        {
          "name": "getActiveWorkflows",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "cleanupExpiredWorkflows",
          "parameters": [
            "maxAge = 24 * 60 * 60 * 1000"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "this.workflowState.cleanup"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "workflowState"
      ],
      "complexity": 0,
      "file": "server/services/workflow-service.js"
    },
    {
      "name": "WorkflowState",
      "superClass": null,
      "line": 6,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "createWorkflow",
          "parameters": [
            "projectPath",
            "mode = 'init'"
          ],
          "isPrivate": false
        },
        {
          "name": "createWorkflowWithId",
          "parameters": [
            "workflowId",
            "projectPath",
            "mode = 'init'"
          ],
          "isPrivate": false
        },
        {
          "name": "getWorkflow",
          "parameters": [
            "workflowId"
          ],
          "isPrivate": false
        },
        {
          "name": "getCurrentWorkflow",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "updateStep",
          "parameters": [
            "workflowId",
            "stepIndex",
            "status",
            "result = null",
            "error = null"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!workflow"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "stepIndex < 0 || stepIndex >= workflow.steps.length"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "result"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "status === 'running'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "status === 'completed'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "allCompleted"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "status === 'failed'"
          ],
          "isPrivate": false
        },
        {
          "name": "getProgress",
          "parameters": [
            "workflowId"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!workflow"
          ],
          "isPrivate": false
        },
        {
          "name": "initializeSteps",
          "parameters": [
            "mode"
          ],
          "isPrivate": false
        },
        {
          "name": "getStepsForMode",
          "parameters": [
            "mode"
          ],
          "isPrivate": false
        },
        {
          "name": "getNextStep",
          "parameters": [
            "workflow"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "currentIndex >= workflow.steps.length"
          ],
          "isPrivate": false
        },
        {
          "name": "getApiEndpointForStep",
          "parameters": [
            "mode",
            "stepName"
          ],
          "isPrivate": false
        },
        {
          "name": "calculateDuration",
          "parameters": [
            "workflow"
          ],
          "isPrivate": false
        },
        {
          "name": "generateWorkflowId",
          "parameters": [
            "projectPath",
            "mode"
          ],
          "isPrivate": false
        },
        {
          "name": "cleanupExpiredWorkflows",
          "parameters": [
            "maxAge = 60 * 60 * 1000"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const [id",
            "workflow] of this.workflows"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "age > maxAge && workflow.status !== 'running'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "cleaned > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "getAllWorkflows",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const [id",
            "workflow] of this.workflows"
          ],
          "isPrivate": false
        },
        {
          "name": "saveWorkflow",
          "parameters": [
            "workflowId"
          ],
          "isPrivate": false
        },
        {
          "name": "restoreWorkflow",
          "parameters": [
            "workflowId"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "workflows",
        "currentWorkflow"
      ],
      "complexity": 0,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "name": "IntegrationAnalyzer",
      "superClass": null,
      "line": 16,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [
            "options = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeIntegration",
          "parameters": [
            "workflowResults"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_extractWorkflowData",
          "parameters": [
            "workflowResults"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "!structureData"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!languageData"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!filesData"
          ],
          "isPrivate": false
        },
        {
          "name": "_performAnalysisSteps",
          "parameters": [
            "extractedData"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeModuleRelations",
          "parameters": [
            "modulesData",
            "filesData",
            "languageData"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "filesData.dependencies && filesData.dependencies.edges"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "sourceModule && targetModule && sourceModule.id !== targetModule.id"
          ],
          "isPrivate": false
        },
        {
          "name": "_identifyIntegrationPoints",
          "parameters": [
            "moduleRelations",
            "filesData",
            "languageData"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeApiContracts",
          "parameters": [
            "integrationPoints",
            "filesData",
            "languageData"
          ],
          "isPrivate": true
        },
        {
          "name": "for",
          "parameters": [
            "const point of integrationPoints"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "point.type === 'api' || point.type === 'service' || point.type === 'rpc'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "contract"
          ],
          "isPrivate": false
        },
        {
          "name": "_analyzeDataFlow",
          "parameters": [
            "moduleRelations",
            "apiContracts",
            "filesData"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "flow"
          ],
          "isPrivate": false
        },
        {
          "name": "_analyzeExternalDependencies",
          "parameters": [
            "filesData",
            "modulesData",
            "languageData"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "filesData.files"
          ],
          "isPrivate": false
        },
        {
          "name": "forEach",
          "parameters": [
            "file => {\n        if (file.analysis && file.analysis.dependencies"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "dependency.securityRisk > 0.5"
          ],
          "isPrivate": false
        },
        {
          "name": "_generateContractDocument",
          "parameters": [
            "analysisSteps",
            "extractedData"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateRecommendations",
          "parameters": [
            "analysisSteps"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "analysisSteps.moduleRelations.statistics.strongRelations > analysisSteps.moduleRelations.statistics.totalRelations * 0.3"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "analysisSteps.apiContracts.statistics.totalContracts > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "undocumentedApis.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "analysisSteps.externalDeps.statistics.securityRisks > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_identifyIntegrationRisks",
          "parameters": [
            "analysisSteps"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "circularDeps.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "criticalModules.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_findModuleByPath",
          "parameters": [
            "modules",
            "path"
          ],
          "isPrivate": true
        },
        {
          "name": "_classifyRelationType",
          "parameters": [
            "sourceModule",
            "targetModule",
            "edge"
          ],
          "isPrivate": true
        },
        {
          "name": "_calculateRelationStrength",
          "parameters": [
            "source",
            "target",
            "dependencies = []"
          ],
          "isPrivate": true
        },
        {
          "name": "_groupRelationsByType",
          "parameters": [
            "relations"
          ],
          "isPrivate": true
        },
        {
          "name": "_isIntegrationPoint",
          "parameters": [
            "relation",
            "language"
          ],
          "isPrivate": true
        },
        {
          "name": "_classifyIntegrationType",
          "parameters": [
            "relation",
            "language"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateIntegrationDescription",
          "parameters": [
            "relation",
            "language"
          ],
          "isPrivate": true
        },
        {
          "name": "_extractIntegrationInterfaces",
          "parameters": [
            "relation",
            "filesData",
            "language"
          ],
          "isPrivate": true
        },
        {
          "name": "_extractRelationInterfaces",
          "parameters": [
            "relation",
            "languageData"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "relation.dependencies && relation.dependencies.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_calculateIntegrationComplexity",
          "parameters": [
            "relation"
          ],
          "isPrivate": true
        },
        {
          "name": "_assessIntegrationRisks",
          "parameters": [
            "relation"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateIntegrationRecommendations",
          "parameters": [
            "relation"
          ],
          "isPrivate": true
        },
        {
          "name": "_identifyAdditionalIntegrationPoints",
          "parameters": [
            "filesData",
            "languageData"
          ],
          "isPrivate": true
        },
        {
          "name": "_extractApiContract",
          "parameters": [
            "point",
            "filesData",
            "languageData"
          ],
          "isPrivate": true
        },
        {
          "name": "_extractDataFlow",
          "parameters": [
            "relation",
            "filesData"
          ],
          "isPrivate": true
        },
        {
          "name": "_extractApiDataFlows",
          "parameters": [
            "contract"
          ],
          "isPrivate": true
        },
        {
          "name": "_groupFlowsByType",
          "parameters": [
            "flows"
          ],
          "isPrivate": true
        },
        {
          "name": "_identifyCriticalDataPaths",
          "parameters": [
            "flows"
          ],
          "isPrivate": true
        },
        {
          "name": "_isExternalDependency",
          "parameters": [
            "dep",
            "languageData"
          ],
          "isPrivate": true
        },
        {
          "name": "_classifyDependencyType",
          "parameters": [
            "dep",
            "languageData"
          ],
          "isPrivate": true
        },
        {
          "name": "_extractVersion",
          "parameters": [
            "dep"
          ],
          "isPrivate": true
        },
        {
          "name": "_determineDependencyScope",
          "parameters": [
            "dep"
          ],
          "isPrivate": true
        },
        {
          "name": "_isDependencyCritical",
          "parameters": [
            "dep",
            "file"
          ],
          "isPrivate": true
        },
        {
          "name": "_assessSecurityRisk",
          "parameters": [
            "dep"
          ],
          "isPrivate": true
        },
        {
          "name": "_getSecurityRiskReason",
          "parameters": [
            "dep"
          ],
          "isPrivate": true
        },
        {
          "name": "_isOutdated",
          "parameters": [
            "dep"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateProjectOverview",
          "parameters": [
            "analysisSteps",
            "extractedData"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateArchitectureSummary",
          "parameters": [
            "analysisSteps"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateModuleRelationsSection",
          "parameters": [
            "moduleRelations"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateIntegrationPointsSection",
          "parameters": [
            "integrationPoints"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateApiContractsSection",
          "parameters": [
            "apiContracts"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateDataFlowSection",
          "parameters": [
            "dataFlow"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateExternalDepsSection",
          "parameters": [
            "externalDeps"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateRecommendationsSection",
          "parameters": [
            "analysisSteps"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateRisksSection",
          "parameters": [
            "analysisSteps"
          ],
          "isPrivate": true
        },
        {
          "name": "_detectCircularDependencies",
          "parameters": [
            "moduleRelations"
          ],
          "isPrivate": true
        },
        {
          "name": "for",
          "parameters": [
            "const dep of dependencies"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const module of modules"
          ],
          "isPrivate": false
        },
        {
          "name": "_identifyCriticalModules",
          "parameters": [
            "moduleRelations"
          ],
          "isPrivate": true
        }
      ],
      "properties": [
        "options",
        "analysisCache",
        "startTime",
        "integrationPoints",
        "contractRegistry"
      ],
      "complexity": 0,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "name": "Component",
      "superClass": null,
      "line": 256,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [
            "props = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "render",
          "parameters": [],
          "isPrivate": false
        }
      ],
      "properties": [
        "props"
      ],
      "complexity": 0,
      "file": "server/routes/create/modules.js"
    },
    {
      "name": "PromptService",
      "superClass": null,
      "line": 8,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [
            "config = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "loadPrompt",
          "parameters": [
            "category",
            "name",
            "variables = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "loadSystemPrompt",
          "parameters": [
            "variables = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "loadModePrompt",
          "parameters": [
            "mode",
            "variables = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "loadTemplate",
          "parameters": [
            "name",
            "variables = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "listPrompts",
          "parameters": [
            "category = null"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "setGlobalVariable",
          "parameters": [
            "key",
            "value"
          ],
          "isPrivate": false
        },
        {
          "name": "getStatus",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getCacheStats",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "clearCache",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "_getModeTemplates",
          "parameters": [
            "mode"
          ],
          "isPrivate": true
        },
        {
          "name": "isValidCategory",
          "parameters": [
            "category"
          ],
          "isPrivate": false
        },
        {
          "name": "isValidMode",
          "parameters": [
            "mode"
          ],
          "isPrivate": false
        },
        {
          "name": "destroy",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "this.promptManager && this.promptManager.destroy"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "promptManager"
      ],
      "complexity": 0,
      "file": "server/services/prompt-service.js"
    },
    {
      "name": "LanguageService",
      "superClass": null,
      "line": 10,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "detectLanguage",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "detectLanguageEnhanced",
          "parameters": [
            "projectPath",
            "step1Results",
            "context = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "generatePrompts",
          "parameters": [
            "projectPath",
            "options = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getLanguageSpecificPrompts",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "getSupportedLanguages",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "isLanguageSupported",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getLanguageDisplayName",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "extractLanguageFromWorkflow",
          "parameters": [
            "workflowResults",
            "step = 2"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!stepResult || !stepResult.detection"
          ],
          "isPrivate": false
        },
        {
          "name": "generateLanguageReport",
          "parameters": [
            "detectionResult"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!detectionResult || !detectionResult.detection"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "detector",
        "enhancedDetector",
        "promptGenerator"
      ],
      "complexity": 0,
      "file": "server/services/language-service.js"
    },
    {
      "name": "LanguagePromptGenerator",
      "superClass": null,
      "line": 13,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "generatePrompts",
          "parameters": [
            "projectPath",
            "options = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "detection.language === 'unknown'"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "buildLanguagePrompts",
          "parameters": [
            "detection"
          ],
          "isPrivate": false
        },
        {
          "name": "generateDevelopmentPrompt",
          "parameters": [
            "language",
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "generateBestPracticesPrompt",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "generateCodeReviewPrompt",
          "parameters": [
            "language",
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "generateDebuggingPrompt",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "generatePerformancePrompt",
          "parameters": [
            "language",
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "generateTestingPrompt",
          "parameters": [
            "language",
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "generateDocumentationPrompt",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "generateSecurityPrompt",
          "parameters": [
            "language",
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "initializePromptTemplates",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "initializeBestPractices",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "initializeFrameworkGuidelines",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "getLanguageDisplayName",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getLanguageKeywords",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getCommonPatterns",
          "parameters": [
            "language",
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "getCodeExamples",
          "parameters": [
            "language",
            "framework",
            "category"
          ],
          "isPrivate": false
        },
        {
          "name": "generateBestPracticesChecklist",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getCodeReviewCriteria",
          "parameters": [
            "language",
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "getDebuggingStrategies",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getDebuggingTools",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getPerformanceGuidelines",
          "parameters": [
            "language",
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "getTestingStrategy",
          "parameters": [
            "language",
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "getTestingTools",
          "parameters": [
            "language",
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "getDocumentationGuidelines",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getDocumentationTemplates",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getSecurityGuidelines",
          "parameters": [
            "language",
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "getSecurityTools",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getSecurityChecklist",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getPerformanceBenchmarks",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getTestExamples",
          "parameters": [
            "language",
            "framework"
          ],
          "isPrivate": false
        },
        {
          "name": "getReviewTemplates",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "mergePromptContent",
          "parameters": [
            "base",
            "additional"
          ],
          "isPrivate": false
        },
        {
          "name": "generateFallbackPrompts",
          "parameters": [
            "detection = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "getLanguageSpecificPrompts",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!this.promptTemplates[language]"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "detector",
        "promptTemplates",
        "bestPractices",
        "frameworkGuidelines"
      ],
      "complexity": 0,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "name": "LanguageDetector",
      "superClass": null,
      "line": 9,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "detectLanguage",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "resetWeights",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "scanProject",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const file of files"
          ],
          "isPrivate": false
        },
        {
          "name": "getProjectFiles",
          "parameters": [
            "projectPath",
            "maxDepth = 3",
            "currentDepth = 0"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const entry of entries"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeFile",
          "parameters": [
            "filePath"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeDirectory",
          "parameters": [
            "dirName"
          ],
          "isPrivate": false
        },
        {
          "name": "detectFrameworks",
          "parameters": [
            "projectPath",
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!this.languages[language]"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const indicator of indicators"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "score > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "calculateResult",
          "parameters": [],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "results.length === 0"
          ],
          "isPrivate": false
        },
        {
          "name": "getSuggestions",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "getLanguageDetails",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "matchPattern",
          "parameters": [
            "str",
            "pattern"
          ],
          "isPrivate": false
        },
        {
          "name": "isImportantHiddenFile",
          "parameters": [
            "fileName"
          ],
          "isPrivate": false
        },
        {
          "name": "shouldIgnoreDirectory",
          "parameters": [
            "dirName"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "languages"
      ],
      "complexity": 0,
      "file": "server/language/detector.js"
    },
    {
      "name": "FileContentAnalyzer",
      "superClass": null,
      "line": 15,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [
            "options = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeFiles",
          "parameters": [
            "projectData"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_extractProjectData",
          "parameters": [
            "projectData"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "result.structure?.files"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "result.structure?.subdirectories"
          ],
          "isPrivate": false
        },
        {
          "name": "_flattenFileStructure",
          "parameters": [
            "structure",
            "projectPath"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "!structure"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "file.path"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "structure.subdirectories && typeof structure.subdirectories === 'object'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "dirData && typeof dirData === 'object'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "allFiles.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_selectFilesToAnalyze",
          "parameters": [
            "projectPath",
            "extractedData"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "this.options.pythonPriority && languageData.primaryLanguage === 'python'"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const category of priorityOrder"
          ],
          "isPrivate": false
        },
        {
          "name": "_getSourceFiles",
          "parameters": [
            "allFiles",
            "languageData"
          ],
          "isPrivate": true
        },
        {
          "name": "_getConfigFiles",
          "parameters": [
            "allFiles"
          ],
          "isPrivate": true
        },
        {
          "name": "_getTestFiles",
          "parameters": [
            "allFiles"
          ],
          "isPrivate": true
        },
        {
          "name": "_getDocFiles",
          "parameters": [
            "allFiles"
          ],
          "isPrivate": true
        },
        {
          "name": "_prioritizePythonFiles",
          "parameters": [
            "sourceFiles"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeFilesParallel",
          "parameters": [
            "filesToAnalyze"
          ],
          "isPrivate": true
        },
        {
          "name": "for",
          "parameters": [
            "let i = 0; i < filesToAnalyze.length; i += batchSize"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const file of batch"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "fileError"
          ],
          "isPrivate": false
        },
        {
          "name": "_analyzeFileContent",
          "parameters": [
            "fileInfo"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "realSize === 0 || !realSize"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "statError"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "realSize > this.options.maxFileSize"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "_performContentAnalysis",
          "parameters": [
            "content",
            "fileInfo"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "extension === '.py'"
          ],
          "isPrivate": false
        },
        {
          "name": "_determineFileType",
          "parameters": [
            "filePath",
            "content"
          ],
          "isPrivate": true
        },
        {
          "name": "_calculateComplexity",
          "parameters": [
            "content",
            "extension"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeStructure",
          "parameters": [
            "content",
            "extension"
          ],
          "isPrivate": true
        },
        {
          "name": "_extractDependencies",
          "parameters": [
            "content",
            "extension"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "extension === '.py'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "pythonImports"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "jsImports"
          ],
          "isPrivate": false
        },
        {
          "name": "_extractExports",
          "parameters": [
            "content",
            "extension"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "extension === '.py'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "allMatch"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "items"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "exportMatches"
          ],
          "isPrivate": false
        },
        {
          "name": "_extractFunctions",
          "parameters": [
            "content",
            "extension"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "extension === '.py'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "pyFunctions"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "jsFunctions"
          ],
          "isPrivate": false
        },
        {
          "name": "_extractClasses",
          "parameters": [
            "content",
            "extension"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeComments",
          "parameters": [
            "content"
          ],
          "isPrivate": true
        },
        {
          "name": "_assessCodeQuality",
          "parameters": [
            "content",
            "extension"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzePythonContent",
          "parameters": [
            "content"
          ],
          "isPrivate": true
        },
        {
          "name": "_analyzeJavaScriptContent",
          "parameters": [
            "content"
          ],
          "isPrivate": true
        },
        {
          "name": "_isTestFile",
          "parameters": [
            "filePath"
          ],
          "isPrivate": true
        },
        {
          "name": "_isConfigFile",
          "parameters": [
            "filePath"
          ],
          "isPrivate": true
        },
        {
          "name": "_isSourceCode",
          "parameters": [
            "filePath"
          ],
          "isPrivate": true
        },
        {
          "name": "_getSourceExtensions",
          "parameters": [
            "primaryLanguage"
          ],
          "isPrivate": true
        },
        {
          "name": "_calculateFilePriority",
          "parameters": [
            "file",
            "category",
            "languageData"
          ],
          "isPrivate": true
        },
        {
          "name": "_getComplexityRating",
          "parameters": [
            "score",
            "codeLines"
          ],
          "isPrivate": true
        },
        {
          "name": "_checkIndentation",
          "parameters": [
            "lines"
          ],
          "isPrivate": true
        },
        {
          "name": "_calculateReadabilityScore",
          "parameters": [
            "lines"
          ],
          "isPrivate": true
        },
        {
          "name": "_detectJSFramework",
          "parameters": [
            "content"
          ],
          "isPrivate": true
        },
        {
          "name": "_generateAnalysisReport",
          "parameters": [
            "fileResults",
            "languageData"
          ],
          "isPrivate": true
        },
        {
          "name": "_buildDependencyGraph",
          "parameters": [
            "fileResults"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "file.analysis.dependencies"
          ],
          "isPrivate": false
        },
        {
          "name": "_calculateImportanceScores",
          "parameters": [
            "fileResults",
            "dependencyGraph"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "file.analysis.complexity"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "file.content"
          ],
          "isPrivate": false
        },
        {
          "name": "_generateRecommendations",
          "parameters": [
            "fileResults",
            "languageData"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "highComplexityFiles.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "lowDocumentedFiles.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "languageData.primaryLanguage === 'python'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "noTypeHints.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "_groupByCategory",
          "parameters": [
            "fileResults"
          ],
          "isPrivate": true
        },
        {
          "name": "_calculateComplexityDistribution",
          "parameters": [
            "fileResults"
          ],
          "isPrivate": true
        },
        {
          "name": "forEach",
          "parameters": [
            "file => {\n      if (file.analysis.complexity?.rating"
          ],
          "isPrivate": false
        },
        {
          "name": "_calculateCodeMetrics",
          "parameters": [
            "fileResults"
          ],
          "isPrivate": true
        },
        {
          "name": "forEach",
          "parameters": [
            "file => {\n      if (file.content"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "file.analysis.functions"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "file.analysis.classes"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "file.analysis.complexity?.cyclomaticComplexity"
          ],
          "isPrivate": false
        },
        {
          "name": "_calculateQualityIndicators",
          "parameters": [
            "fileResults"
          ],
          "isPrivate": true
        },
        {
          "name": "if",
          "parameters": [
            "sourceFiles.length > 0"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "options",
        "analysisCache",
        "startTime"
      ],
      "complexity": 0,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "name": "EnhancedLanguageDetector",
      "superClass": null,
      "line": 14,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [
            "options = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "detectLanguageEnhanced",
          "parameters": [
            "projectPath",
            "step1Results",
            "workflowContext = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "performEnhancedAnalysis",
          "parameters": [
            "baseDetection",
            "step1Results",
            "workflowContext"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeConfigFiles",
          "parameters": [
            "step1Results"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "configList && configList.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const config of configList"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "config.type === 'npm-package' && config.analysis"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "config.analysis.scripts"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeDependencies",
          "parameters": [
            "step1Results"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const config of jsConfigs"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "config.analysis?.dependencies"
          ],
          "isPrivate": false
        },
        {
          "name": "inferFrameworks",
          "parameters": [
            "step1Results",
            "baseDetection"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "baseDetection.frameworks && baseDetection.frameworks.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const framework of baseDetection.frameworks"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "typeof framework === 'object' && framework.name"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "typeof framework === 'string'"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const hint of step1Frameworks"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const framework of frameworkInference.detected"
          ],
          "isPrivate": false
        },
        {
          "name": "extractStructureClues",
          "parameters": [
            "step1Results"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeReadmeContent",
          "parameters": [
            "step1Results"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "analysis.techStack"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "analysis.installation"
          ],
          "isPrivate": false
        },
        {
          "name": "performCodeAnalysis",
          "parameters": [
            "projectPath",
            "step1Results"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "analysis"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "synthesizeResults",
          "parameters": [
            "baseDetection",
            "enhancedAnalysis",
            "codeAnalysis",
            "step1Results"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "codeAnalysis && !codeAnalysis.error"
          ],
          "isPrivate": false
        },
        {
          "name": "generateNextStepRecommendations",
          "parameters": [
            "detectionResult"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "detectionResult.primaryLanguage.confidence > 80"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "complexity === 'high'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "frameworks.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "generateAnalysisId",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "calculateEnhancedConfidence",
          "parameters": [
            "baseDetection",
            "enhancedAnalysis"
          ],
          "isPrivate": false
        },
        {
          "name": "calculateConfigConfidence",
          "parameters": [
            "configList"
          ],
          "isPrivate": false
        },
        {
          "name": "extractBuildSystems",
          "parameters": [
            "scripts"
          ],
          "isPrivate": false
        },
        {
          "name": "classifyDependencies",
          "parameters": [
            "deps",
            "type"
          ],
          "isPrivate": false
        },
        {
          "name": "determineEcosystem",
          "parameters": [
            "frameworks"
          ],
          "isPrivate": false
        },
        {
          "name": "calculateFrameworkConfidence",
          "parameters": [
            "framework",
            "step1Results",
            "baseDetection"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "jsConfigs"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const config of jsConfigs"
          ],
          "isPrivate": false
        },
        {
          "name": "selectRepresentativeFiles",
          "parameters": [
            "step1Results"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "structure?.files"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const file of structure.files"
          ],
          "isPrivate": false
        },
        {
          "name": "isSourceCodeFile",
          "parameters": [
            "file"
          ],
          "isPrivate": false
        },
        {
          "name": "getFileImportance",
          "parameters": [
            "file"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeCodeFile",
          "parameters": [
            "filePath"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "extractImports",
          "parameters": [
            "content"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const pattern of patterns"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeSyntax",
          "parameters": [
            "content"
          ],
          "isPrivate": false
        },
        {
          "name": "summarizeLanguagePatterns",
          "parameters": [
            "sampledFiles"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const file of sampledFiles"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const hint of file.syntaxHints"
          ],
          "isPrivate": false
        },
        {
          "name": "extractImportPatterns",
          "parameters": [
            "sampledFiles"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const file of sampledFiles"
          ],
          "isPrivate": false
        },
        {
          "name": "identifySyntaxFeatures",
          "parameters": [
            "sampledFiles"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const file of sampledFiles"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const hint of file.syntaxHints"
          ],
          "isPrivate": false
        },
        {
          "name": "inferTestingFramework",
          "parameters": [
            "step1Results",
            "enhancedAnalysis"
          ],
          "isPrivate": false
        },
        {
          "name": "recommendDevelopmentEnvironment",
          "parameters": [
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzCurrentSetup",
          "parameters": [
            "step1Results"
          ],
          "isPrivate": false
        },
        {
          "name": "identifyMissingComponents",
          "parameters": [
            "step1Results",
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "recommendTemplates",
          "parameters": [
            "language",
            "frameworks"
          ],
          "isPrivate": false
        },
        {
          "name": "calculateOverallConfidence",
          "parameters": [
            "detectionResult"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "isPython"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "frameworks.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "calculatePythonSpecificConfidence",
          "parameters": [
            "detectionResult"
          ],
          "isPrivate": false
        },
        {
          "name": "calculatePythonFrameworkScore",
          "parameters": [
            "frameworks"
          ],
          "isPrivate": false
        },
        {
          "name": "calculatePythonConfigScore",
          "parameters": [
            "detectionResult"
          ],
          "isPrivate": false
        },
        {
          "name": "calculatePythonStructureScore",
          "parameters": [
            "detectionResult"
          ],
          "isPrivate": false
        },
        {
          "name": "calculatePythonEcosystemScore",
          "parameters": [
            "detectionResult"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeStep1Integration",
          "parameters": [
            "step1Results",
            "detectionResult"
          ],
          "isPrivate": false
        },
        {
          "name": "checkConsistency",
          "parameters": [
            "step1Results",
            "detectionResult"
          ],
          "isPrivate": false
        },
        {
          "name": "calculateEnhancementGain",
          "parameters": [
            "step1Results",
            "detectionResult"
          ],
          "isPrivate": false
        },
        {
          "name": "assessDataQuality",
          "parameters": [
            "step1Results"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "depth < 70"
          ],
          "isPrivate": false
        },
        {
          "name": "assessStep3Readiness",
          "parameters": [
            "detectionResult"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "detectionResult.primaryLanguage.confidence < 60"
          ],
          "isPrivate": false
        },
        {
          "name": "identifyPythonPatterns",
          "parameters": [
            "directories",
            "structure",
            "structureClues"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "packageManagers.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "webFramework"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "projectType"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "testFramework"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "moduleSystem"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "venvType"
          ],
          "isPrivate": false
        },
        {
          "name": "detectPythonPackageManagers",
          "parameters": [
            "structure"
          ],
          "isPrivate": false
        },
        {
          "name": "detectPythonWebFramework",
          "parameters": [
            "structure"
          ],
          "isPrivate": false
        },
        {
          "name": "detectPythonProjectType",
          "parameters": [
            "directories",
            "structure"
          ],
          "isPrivate": false
        },
        {
          "name": "detectPythonTestFramework",
          "parameters": [
            "directories",
            "structure"
          ],
          "isPrivate": false
        },
        {
          "name": "detectPythonModuleSystem",
          "parameters": [
            "directories",
            "structure"
          ],
          "isPrivate": false
        },
        {
          "name": "detectPythonVenvType",
          "parameters": [
            "directories"
          ],
          "isPrivate": false
        },
        {
          "name": "getAllFiles",
          "parameters": [
            "structure"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "structure.files"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "structure.subdirectories"
          ],
          "isPrivate": false
        },
        {
          "name": "extractCommands",
          "parameters": [
            "installationText"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const pattern of patterns"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "options",
        "baseDetector",
        "analysisCache"
      ],
      "complexity": 0,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "name": "ProjectScanner",
      "superClass": null,
      "line": 16,
      "isExported": false,
      "methods": [
        {
          "name": "constructor",
          "parameters": [
            "options = {}"
          ],
          "isPrivate": false
        },
        {
          "name": "scanProject",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "this.options.enableCaching"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "scanDirectoryStructure",
          "parameters": [
            "projectPath",
            "currentDepth = 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "currentDepth > this.options.maxDepth"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const entry of entries"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "currentDepth < this.options.maxDepth"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "tasks.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const { name",
            "structure: subStructure } of subResults"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "subStructure"
          ],
          "isPrivate": false
        },
        {
          "name": "scanReadmeFiles",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const fileName of readmeFiles"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!results.content"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeReadmeContent",
          "parameters": [
            "content"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const keyword of techKeywords"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "installMatch"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "usageMatch"
          ],
          "isPrivate": false
        },
        {
          "name": "scanConfigFiles",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const pattern of patterns"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const match of matching"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "languageConfigs.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzeConfigFile",
          "parameters": [
            "filePath",
            "language"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "fileName === 'package.json'"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "e"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzePackageJson",
          "parameters": [
            "packageJson"
          ],
          "isPrivate": false
        },
        {
          "name": "detectFrameworks",
          "parameters": [
            "packageJson"
          ],
          "isPrivate": false
        },
        {
          "name": "analyzePackageInfo",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "scanDevToolsConfig",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "for",
          "parameters": [
            "const file of devFiles"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "file === 'Makefile'"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "calculateProjectStats",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "performComprehensiveAnalysis",
          "parameters": [
            "scanData"
          ],
          "isPrivate": false
        },
        {
          "name": "calculateComplexity",
          "parameters": [
            "scanData"
          ],
          "isPrivate": false
        },
        {
          "name": "calculateScale",
          "parameters": [
            "scanData"
          ],
          "isPrivate": false
        },
        {
          "name": "calculateMaturity",
          "parameters": [
            "scanData"
          ],
          "isPrivate": false
        },
        {
          "name": "extractTechStackHints",
          "parameters": [
            "scanData"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "scanData.configs?.detected"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "scanData.readme?.analysis?.techStack"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "packageAnalysis?.frameworks"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "packageAnalysis?.dependencies"
          ],
          "isPrivate": false
        },
        {
          "name": "inferProjectType",
          "parameters": [
            "scanData"
          ],
          "isPrivate": false
        },
        {
          "name": "inferDevelopmentStage",
          "parameters": [
            "scanData"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "version"
          ],
          "isPrivate": false
        },
        {
          "name": "getNextStepRecommendations",
          "parameters": [
            "analysis"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "analysis.techStackHints.length > 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "analysis.complexity === 'high'"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "analysis.maturity === 'low'"
          ],
          "isPrivate": false
        },
        {
          "name": "generateScanId",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "validateProjectPath",
          "parameters": [
            "projectPath"
          ],
          "isPrivate": false
        },
        {
          "name": "catch",
          "parameters": [
            "error"
          ],
          "isPrivate": false
        },
        {
          "name": "shouldIgnore",
          "parameters": [
            "name"
          ],
          "isPrivate": false
        },
        {
          "name": "classifyFileType",
          "parameters": [
            "fileName"
          ],
          "isPrivate": false
        },
        {
          "name": "getConfigFileType",
          "parameters": [
            "fileName"
          ],
          "isPrivate": false
        },
        {
          "name": "extractTomlSections",
          "parameters": [
            "content"
          ],
          "isPrivate": false
        },
        {
          "name": "getMaxDepth",
          "parameters": [
            "structure",
            "currentDepth = 0"
          ],
          "isPrivate": false
        },
        {
          "name": "if",
          "parameters": [
            "!structure || !structure.subdirectories"
          ],
          "isPrivate": false
        }
      ],
      "properties": [
        "options",
        "scanCache",
        "scanResults"
      ],
      "complexity": 0,
      "file": "server/analyzers/project-scanner.js"
    }
  ],
  "modules": [],
  "imports": [
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 6,
      "isExternal": true,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 7,
      "isExternal": true,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "type": "ES6",
      "items": " RealProjectScanner ",
      "from": "./server/analyzers/real-project-scanner.js",
      "line": 8,
      "isExternal": false,
      "file": "test-ultra-detailed-analyzer.js"
    },
    {
      "type": "ES6",
      "items": " UltraDetailedCodeAnalyzer ",
      "from": "./server/analyzers/ultra-detailed-code-analyzer.js",
      "line": 9,
      "isExternal": false,
      "file": "test-ultra-detailed-analyzer.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 10,
      "isExternal": true,
      "file": "test-ultra-detailed-analyzer.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 11,
      "isExternal": true,
      "file": "test-ultra-detailed-analyzer.js"
    },
    {
      "type": "ES6",
      "items": " RealProjectScanner ",
      "from": "./server/analyzers/real-project-scanner.js",
      "line": 8,
      "isExternal": false,
      "file": "test-enhanced-real-ai-content.js"
    },
    {
      "type": "ES6",
      "items": " EnhancedAIContentGenerator ",
      "from": "./server/services/enhanced-ai-content-generator.js",
      "line": 9,
      "isExternal": false,
      "file": "test-enhanced-real-ai-content.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 10,
      "isExternal": true,
      "file": "test-enhanced-real-ai-content.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 11,
      "isExternal": true,
      "file": "test-enhanced-real-ai-content.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 6,
      "isExternal": true,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 7,
      "isExternal": true,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "type": "ES6",
      "items": " fileURLToPath ",
      "from": "url",
      "line": 8,
      "isExternal": true,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "type": "ES6",
      "items": " RealProjectScanner ",
      "from": "./server/analyzers/real-project-scanner.js",
      "line": 8,
      "isExternal": false,
      "file": "test-real-project-scanner.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 9,
      "isExternal": true,
      "file": "test-real-project-scanner.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 10,
      "isExternal": true,
      "file": "test-real-project-scanner.js"
    },
    {
      "type": "ES6",
      "items": "AIContentGeneratorService",
      "from": "./server/services/ai-content-generator.js",
      "line": 8,
      "isExternal": false,
      "file": "test-complete-ai-content.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 9,
      "isExternal": true,
      "file": "test-complete-ai-content.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 10,
      "isExternal": true,
      "file": "test-complete-ai-content.js"
    },
    {
      "type": "ES6",
      "items": "AIContentGeneratorService",
      "from": "./server/services/ai-content-generator.js",
      "line": 8,
      "isExternal": false,
      "file": "test-enhanced-ai-content.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 9,
      "isExternal": true,
      "file": "test-enhanced-ai-content.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 10,
      "isExternal": true,
      "file": "test-enhanced-ai-content.js"
    },
    {
      "type": "ES6",
      "items": " AIResponseHandlerService ",
      "from": "./server/services/ai-response-handler.js",
      "line": 7,
      "isExternal": false,
      "file": "test-ai-content-generation.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs/promises",
      "line": 8,
      "isExternal": true,
      "file": "test-ai-content-generation.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 9,
      "isExternal": true,
      "file": "test-ai-content-generation.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs/promises",
      "line": 7,
      "isExternal": true,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 8,
      "isExternal": true,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "type": "ES6",
      "items": " fileURLToPath ",
      "from": "url",
      "line": 9,
      "isExternal": true,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "type": "ES6",
      "items": "AIContentGeneratorService",
      "from": "./ai-content-generator.js",
      "line": 10,
      "isExternal": false,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/init/language.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/init/language.js"
    },
    {
      "type": "ES6",
      "items": " AIResponseHandlerService ",
      "from": "../../services/ai-response-handler.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/init/language.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/init/structure.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/init/structure.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/init/data.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/init/data.js"
    },
    {
      "type": "ES6",
      "items": " AIResponseHandlerService ",
      "from": "./server/services/ai-response-handler.js",
      "line": 7,
      "isExternal": false,
      "file": "test-init-no-user.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs/promises",
      "line": 8,
      "isExternal": true,
      "file": "test-init-no-user.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 9,
      "isExternal": true,
      "file": "test-init-no-user.js"
    },
    {
      "type": "ES6",
      "items": " AIResponseHandlerService ",
      "from": "./server/services/ai-response-handler.js",
      "line": 7,
      "isExternal": false,
      "file": "test-fixed-structure.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs/promises",
      "line": 8,
      "isExternal": true,
      "file": "test-fixed-structure.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 9,
      "isExternal": true,
      "file": "test-fixed-structure.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 8,
      "isExternal": true,
      "file": "test-split-modules.js"
    },
    {
      "type": "ES6",
      "items": " createModulesAnalysisRoutes ",
      "from": "./server/routes/init/modules-analysis.js",
      "line": 9,
      "isExternal": false,
      "file": "test-split-modules.js"
    },
    {
      "type": "ES6",
      "items": " createModulesDocsRoutes ",
      "from": "./server/routes/init/modules-docs.js",
      "line": 10,
      "isExternal": false,
      "file": "test-split-modules.js"
    },
    {
      "type": "ES6",
      "items": "WorkflowService",
      "from": "./server/services/workflow-service.js",
      "line": 11,
      "isExternal": false,
      "file": "test-split-modules.js"
    },
    {
      "type": "ES6",
      "items": " WorkflowState ",
      "from": "./server/services/workflow-state-service.js",
      "line": 12,
      "isExternal": false,
      "file": "test-split-modules.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createHealthRoutes ",
      "from": "./system/health.js",
      "line": 9,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createMCPRoutes ",
      "from": "./system/mcp.js",
      "line": 10,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createPromptsRoutes ",
      "from": "./system/prompts.js",
      "line": 11,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createStructureRoutes ",
      "from": "./init/structure.js",
      "line": 14,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createLanguageRoutes ",
      "from": "./init/language.js",
      "line": 15,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createFilesRoutes ",
      "from": "./init/files.js",
      "line": 16,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createDocumentsRoutes ",
      "from": "./init/documents.js",
      "line": 17,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createModulesAnalysisRoutes ",
      "from": "./init/modules-analysis.js",
      "line": 18,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createModulesDocsRoutes ",
      "from": "./init/modules-docs.js",
      "line": 19,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createLanguagePromptsRoutes ",
      "from": "./init/prompts.js",
      "line": 20,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createContractsRoutes ",
      "from": "./init/contracts.js",
      "line": 21,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createInitDataRoutes ",
      "from": "./init/data.js",
      "line": 22,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createCreateModeRoutes ",
      "from": "./create/index.js",
      "line": 25,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createFixModeRoutes ",
      "from": "./fix/index.js",
      "line": 28,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " createAnalyzeModeRoutes ",
      "from": "./analyze/index.js",
      "line": 31,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": "languageIntelligenceRouter",
      "from": "./language/index.js",
      "line": 34,
      "isExternal": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": " Router ",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "ES6",
      "items": "contractsRouter",
      "from": "./contracts.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "ES6",
      "items": "dataRouter",
      "from": "./data.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "ES6",
      "items": "documentsRouter",
      "from": "./documents.js",
      "line": 9,
      "isExternal": false,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "ES6",
      "items": "filesRouter",
      "from": "./files.js",
      "line": 10,
      "isExternal": false,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "ES6",
      "items": "languageRouter",
      "from": "./language.js",
      "line": 11,
      "isExternal": false,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "ES6",
      "items": "modulesAnalysisRouter",
      "from": "./modules-analysis.js",
      "line": 12,
      "isExternal": false,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "ES6",
      "items": "modulesDocsRouter",
      "from": "./modules-docs.js",
      "line": 13,
      "isExternal": false,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "ES6",
      "items": "promptsRouter",
      "from": "./prompts.js",
      "line": 14,
      "isExternal": false,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "ES6",
      "items": "structureRouter",
      "from": "./structure.js",
      "line": 15,
      "isExternal": false,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "CommonJS",
      "items": " success ",
      "line": 39,
      "isExternal": true,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "CommonJS",
      "items": " success ",
      "line": 51,
      "isExternal": true,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 7,
      "isExternal": true,
      "file": "server/routes/init/modules-docs.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/init/modules-docs.js"
    },
    {
      "type": "ES6",
      "items": " AIResponseHandlerService ",
      "from": "../../services/ai-response-handler.js",
      "line": 9,
      "isExternal": false,
      "file": "server/routes/init/modules-docs.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 7,
      "isExternal": true,
      "file": "server/routes/init/modules-analysis.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/init/modules-analysis.js"
    },
    {
      "type": "ES6",
      "items": " AIResponseHandlerService ",
      "from": "../../services/ai-response-handler.js",
      "line": 9,
      "isExternal": false,
      "file": "server/routes/init/modules-analysis.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/init/contracts.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/init/contracts.js"
    },
    {
      "type": "ES6",
      "items": " AIResponseHandlerService ",
      "from": "../../services/ai-response-handler.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/init/contracts.js"
    },
    {
      "type": "ES6",
      "items": " AIResponseHandlerService ",
      "from": "./server/services/ai-response-handler.js",
      "line": 8,
      "isExternal": false,
      "file": "test-ai-response-handler.js"
    },
    {
      "type": "ES6",
      "items": "WorkflowService",
      "from": "./server/services/workflow-service.js",
      "line": 9,
      "isExternal": false,
      "file": "test-ai-response-handler.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 10,
      "isExternal": true,
      "file": "test-ai-response-handler.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs/promises",
      "line": 11,
      "isExternal": true,
      "file": "test-ai-response-handler.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/init/documents.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/init/documents.js"
    },
    {
      "type": "ES6",
      "items": " AIResponseHandlerService ",
      "from": "../../services/ai-response-handler.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/init/documents.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 6,
      "isExternal": true,
      "file": "server/services/template-reader.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 7,
      "isExternal": true,
      "file": "server/services/template-reader.js"
    },
    {
      "type": "ES6",
      "items": " fileURLToPath ",
      "from": "url",
      "line": 8,
      "isExternal": true,
      "file": "server/services/template-reader.js"
    },
    {
      "type": "ES6",
      "items": " dirname ",
      "from": "path",
      "line": 9,
      "isExternal": true,
      "file": "server/services/template-reader.js"
    },
    {
      "type": "ES6",
      "items": "TemplateReader",
      "from": "./services/template-reader.js",
      "line": 6,
      "isExternal": false,
      "file": "server/prompt-manager.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/init/files.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/init/files.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 9,
      "isExternal": true,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": " WebSocketServer ",
      "from": "ws",
      "line": 10,
      "isExternal": true,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": "cors",
      "from": "cors",
      "line": 11,
      "isExternal": true,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": "helmet",
      "from": "helmet",
      "line": 12,
      "isExternal": true,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": "compression",
      "from": "compression",
      "line": 13,
      "isExternal": true,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": "rateLimit",
      "from": "express-rate-limit",
      "line": 14,
      "isExternal": true,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": " createServer ",
      "from": "http",
      "line": 15,
      "isExternal": true,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": " readFileSync, existsSync ",
      "from": "fs",
      "line": 16,
      "isExternal": true,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": " join, dirname ",
      "from": "path",
      "line": 17,
      "isExternal": true,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": " fileURLToPath ",
      "from": "url",
      "line": 18,
      "isExternal": true,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": "ConfigService",
      "from": "./server/services/config-service.js",
      "line": 21,
      "isExternal": false,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": " PromptManager ",
      "from": "./server/prompt-manager.js",
      "line": 22,
      "isExternal": false,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": "PromptService",
      "from": "./server/services/prompt-service.js",
      "line": 23,
      "isExternal": false,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": " ProjectScanner ",
      "from": "./server/analyzers/project-scanner.js",
      "line": 24,
      "isExternal": false,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": " WorkflowState ",
      "from": "./server/services/workflow-state-service.js",
      "line": 25,
      "isExternal": false,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": "WorkflowService",
      "from": "./server/services/workflow-service.js",
      "line": 26,
      "isExternal": false,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": " EnhancedLanguageDetector ",
      "from": "./server/analyzers/enhanced-language-detector.js",
      "line": 27,
      "isExternal": false,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": " FileContentAnalyzer ",
      "from": "./server/analyzers/file-content-analyzer.js",
      "line": 28,
      "isExternal": false,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": "UnifiedTemplateService",
      "from": "./server/services/unified-template-service.js",
      "line": 29,
      "isExternal": false,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": " createAppRoutes ",
      "from": "./server/routes/index.js",
      "line": 30,
      "isExternal": false,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": " Router ",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/system/index.js"
    },
    {
      "type": "ES6",
      "items": " createHealthRoutes ",
      "from": "./health.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/system/index.js"
    },
    {
      "type": "ES6",
      "items": " createMCPRoutes ",
      "from": "./mcp.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/system/index.js"
    },
    {
      "type": "ES6",
      "items": " createPromptsRoutes ",
      "from": "./prompts.js",
      "line": 9,
      "isExternal": false,
      "file": "server/routes/system/index.js"
    },
    {
      "type": "ES6",
      "items": " Router ",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/language/templates.js"
    },
    {
      "type": "ES6",
      "items": "LanguageIntelligenceService",
      "from": "../../services/language-intelligence-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/language/templates.js"
    },
    {
      "type": "ES6",
      "items": "TemplateEngineService",
      "from": "../../services/template-engine-service.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/language/templates.js"
    },
    {
      "type": "ES6",
      "items": "UnifiedTemplateService",
      "from": "../../services/unified-template-service.js",
      "line": 9,
      "isExternal": false,
      "file": "server/routes/language/templates.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 10,
      "isExternal": false,
      "file": "server/routes/language/templates.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/system/mcp.js"
    },
    {
      "type": "ES6",
      "items": " success, error ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/system/mcp.js"
    },
    {
      "type": "ES6",
      "items": " getServiceBus ",
      "from": "./service-bus.js",
      "line": 6,
      "isExternal": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": "ConfigService",
      "from": "./config-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": " PromptManager ",
      "from": "../prompt-manager.js",
      "line": 8,
      "isExternal": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": " ProjectScanner ",
      "from": "../analyzers/project-scanner.js",
      "line": 9,
      "isExternal": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": " WorkflowState ",
      "from": "./workflow-state-service.js",
      "line": 10,
      "isExternal": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": "WorkflowService",
      "from": "./workflow-service.js",
      "line": 11,
      "isExternal": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": " EnhancedLanguageDetector ",
      "from": "../analyzers/enhanced-language-detector.js",
      "line": 12,
      "isExternal": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": " FileContentAnalyzer ",
      "from": "../analyzers/file-content-analyzer.js",
      "line": 13,
      "isExternal": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": "UnifiedTemplateService",
      "from": "./unified-template-service.js",
      "line": 14,
      "isExternal": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": "LanguageIntelligenceService",
      "from": "./language-intelligence-service.js",
      "line": 15,
      "isExternal": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": "TemplateReader",
      "from": "./template-reader.js",
      "line": 16,
      "isExternal": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 6,
      "isExternal": true,
      "file": "server/services/unified-template-service.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 7,
      "isExternal": true,
      "file": "server/services/unified-template-service.js"
    },
    {
      "type": "ES6",
      "items": "crypto",
      "from": "crypto",
      "line": 8,
      "isExternal": true,
      "file": "server/services/unified-template-service.js"
    },
    {
      "type": "ES6",
      "items": " fileURLToPath ",
      "from": "url",
      "line": 9,
      "isExternal": true,
      "file": "server/services/unified-template-service.js"
    },
    {
      "type": "ES6",
      "items": " dirname ",
      "from": "path",
      "line": 10,
      "isExternal": true,
      "file": "server/services/unified-template-service.js"
    },
    {
      "type": "ES6",
      "items": "LanguageIntelligenceService",
      "from": "./language-intelligence-service.js",
      "line": 11,
      "isExternal": false,
      "file": "server/services/unified-template-service.js"
    },
    {
      "type": "ES6",
      "items": "TemplateReader",
      "from": "./template-reader.js",
      "line": 12,
      "isExternal": false,
      "file": "server/services/unified-template-service.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/system/prompts.js"
    },
    {
      "type": "ES6",
      "items": " success, error ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/system/prompts.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/system/health.js"
    },
    {
      "type": "ES6",
      "items": " success, error ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/system/health.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/fix/issues.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/fix/issues.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/fix/index.js"
    },
    {
      "type": "ES6",
      "items": " createIssuesRoutes ",
      "from": "./issues.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/fix/index.js"
    },
    {
      "type": "ES6",
      "items": " createDiagnosisRoutes ",
      "from": "./diagnosis.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/fix/index.js"
    },
    {
      "type": "ES6",
      "items": " createFixesRoutes ",
      "from": "./fixes.js",
      "line": 9,
      "isExternal": false,
      "file": "server/routes/fix/index.js"
    },
    {
      "type": "ES6",
      "items": " success, error ",
      "from": "../../services/response-service.js",
      "line": 10,
      "isExternal": false,
      "file": "server/routes/fix/index.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/analyze/security.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/analyze/security.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/analyze/index.js"
    },
    {
      "type": "ES6",
      "items": " createQualityRoutes ",
      "from": "./quality.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/analyze/index.js"
    },
    {
      "type": "ES6",
      "items": " createPerformanceRoutes ",
      "from": "./performance.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/analyze/index.js"
    },
    {
      "type": "ES6",
      "items": " createDependenciesRoutes ",
      "from": "./dependencies.js",
      "line": 9,
      "isExternal": false,
      "file": "server/routes/analyze/index.js"
    },
    {
      "type": "ES6",
      "items": " createSecurityRoutes ",
      "from": "./security.js",
      "line": 10,
      "isExternal": false,
      "file": "server/routes/analyze/index.js"
    },
    {
      "type": "ES6",
      "items": " createReportsRoutes ",
      "from": "./reports.js",
      "line": 11,
      "isExternal": false,
      "file": "server/routes/analyze/index.js"
    },
    {
      "type": "ES6",
      "items": " success, error ",
      "from": "../../services/response-service.js",
      "line": 12,
      "isExternal": false,
      "file": "server/routes/analyze/index.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/analyze/dependencies.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/analyze/dependencies.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/analyze/performance.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/analyze/performance.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/create/features.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/create/features.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/create/index.js"
    },
    {
      "type": "ES6",
      "items": " createModuleRoutes ",
      "from": "./modules.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/create/index.js"
    },
    {
      "type": "ES6",
      "items": " createAPIRoutes ",
      "from": "./api.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/create/index.js"
    },
    {
      "type": "ES6",
      "items": " createFeatureRoutes ",
      "from": "./features.js",
      "line": 9,
      "isExternal": false,
      "file": "server/routes/create/index.js"
    },
    {
      "type": "ES6",
      "items": " createDataRoutes ",
      "from": "./data.js",
      "line": 10,
      "isExternal": false,
      "file": "server/routes/create/index.js"
    },
    {
      "type": "ES6",
      "items": " success, error ",
      "from": "../../services/response-service.js",
      "line": 11,
      "isExternal": false,
      "file": "server/routes/create/index.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 7,
      "isExternal": true,
      "file": "server/routes/init/prompts.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/init/prompts.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 6,
      "isExternal": true,
      "file": "server/services/config-service.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 7,
      "isExternal": true,
      "file": "server/services/config-service.js"
    },
    {
      "type": "ES6",
      "items": " Router ",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/language/prompts.js"
    },
    {
      "type": "ES6",
      "items": "LanguageIntelligenceService",
      "from": "../../services/language-intelligence-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/language/prompts.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/language/prompts.js"
    },
    {
      "type": "ES6",
      "items": " Router ",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/language/detection.js"
    },
    {
      "type": "ES6",
      "items": "LanguageIntelligenceService",
      "from": "../../services/language-intelligence-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/language/detection.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/language/detection.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 6,
      "isExternal": true,
      "file": "server/language/template-generator.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 7,
      "isExternal": true,
      "file": "server/language/template-generator.js"
    },
    {
      "type": "ES6",
      "items": " fileURLToPath ",
      "from": "url",
      "line": 8,
      "isExternal": true,
      "file": "server/language/template-generator.js"
    },
    {
      "type": "ES6",
      "items": " dirname ",
      "from": "path",
      "line": 9,
      "isExternal": true,
      "file": "server/language/template-generator.js"
    },
    {
      "type": "ES6",
      "items": "LanguageDetector",
      "from": "./detector.js",
      "line": 10,
      "isExternal": false,
      "file": "server/language/template-generator.js"
    },
    {
      "type": "ES6",
      "items": "LanguageDetector",
      "from": "../language/detector.js",
      "line": 6,
      "isExternal": false,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "type": "ES6",
      "items": "LanguageTemplateGenerator",
      "from": "../language/template-generator.js",
      "line": 7,
      "isExternal": false,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "type": "ES6",
      "items": "PromptIntelligence",
      "from": "../language/prompt-intelligence.js",
      "line": 8,
      "isExternal": false,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "type": "ES6",
      "items": " Router ",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/language/index.js"
    },
    {
      "type": "ES6",
      "items": "detectionRouter",
      "from": "./detection.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/language/index.js"
    },
    {
      "type": "ES6",
      "items": "templatesRouter",
      "from": "./templates.js",
      "line": 8,
      "isExternal": false,
      "file": "server/routes/language/index.js"
    },
    {
      "type": "ES6",
      "items": "promptsRouter",
      "from": "./prompts.js",
      "line": 9,
      "isExternal": false,
      "file": "server/routes/language/index.js"
    },
    {
      "type": "ES6",
      "items": "LanguageTemplateGenerator",
      "from": "../language/template-generator.js",
      "line": 6,
      "isExternal": false,
      "file": "server/services/template-engine-service.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 7,
      "isExternal": true,
      "file": "server/services/template-engine-service.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 8,
      "isExternal": true,
      "file": "server/services/template-engine-service.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 6,
      "isExternal": true,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 7,
      "isExternal": true,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "type": "ES6",
      "items": "LanguageDetector",
      "from": "./detector.js",
      "line": 8,
      "isExternal": false,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "type": "ES6",
      "items": " WorkflowState ",
      "from": "./workflow-state-service.js",
      "line": 6,
      "isExternal": false,
      "file": "server/services/workflow-service.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/create/data.js"
    },
    {
      "type": "ES6",
      "items": " success, error ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/create/data.js"
    },
    {
      "type": "ES6",
      "items": " jest ",
      "from": "@jest/globals",
      "line": 6,
      "isExternal": true,
      "file": "tests/integration/create-requirements-routes.test.js"
    },
    {
      "type": "ES6",
      "items": "request",
      "from": "supertest",
      "line": 7,
      "isExternal": true,
      "file": "tests/integration/create-requirements-routes.test.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 8,
      "isExternal": true,
      "file": "tests/integration/create-requirements-routes.test.js"
    },
    {
      "type": "ES6",
      "items": " createFeatureRoutes ",
      "from": "../../server/routes/create/features.js",
      "line": 9,
      "isExternal": false,
      "file": "tests/integration/create-requirements-routes.test.js"
    },
    {
      "type": "ES6",
      "items": " describe, test, expect, beforeAll, afterAll, beforeEach, afterEach, jest ",
      "from": "@jest/globals",
      "line": 6,
      "isExternal": true,
      "file": "tests/integration/contracts-routes.test.js"
    },
    {
      "type": "ES6",
      "items": "request",
      "from": "supertest",
      "line": 7,
      "isExternal": true,
      "file": "tests/integration/contracts-routes.test.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 8,
      "isExternal": true,
      "file": "tests/integration/contracts-routes.test.js"
    },
    {
      "type": "ES6",
      "items": " createContractsRoutes ",
      "from": "../../server/routes/init/contracts.js",
      "line": 9,
      "isExternal": false,
      "file": "tests/integration/contracts-routes.test.js"
    },
    {
      "type": "ES6",
      "items": " IntegrationAnalyzer ",
      "from": "../../server/analyzers/integration-analyzer.js",
      "line": 10,
      "isExternal": false,
      "file": "tests/integration/contracts-routes.test.js"
    },
    {
      "type": "ES6",
      "items": " describe, test, expect, beforeEach, afterEach, jest ",
      "from": "@jest/globals",
      "line": 6,
      "isExternal": true,
      "file": "tests/unit/integration-analyzer.test.js"
    },
    {
      "type": "ES6",
      "items": " IntegrationAnalyzer ",
      "from": "../../server/analyzers/integration-analyzer.js",
      "line": 7,
      "isExternal": false,
      "file": "tests/unit/integration-analyzer.test.js"
    },
    {
      "type": "ES6",
      "items": " promises as fs ",
      "from": "fs",
      "line": 13,
      "isExternal": true,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 14,
      "isExternal": true,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "type": "ES6",
      "items": " describe, test, expect, beforeEach, afterEach, jest ",
      "from": "@jest/globals",
      "line": 6,
      "isExternal": true,
      "file": "tests/unit/template-generation.test.js"
    },
    {
      "type": "ES6",
      "items": " promises as fs ",
      "from": "fs",
      "line": 7,
      "isExternal": true,
      "file": "tests/unit/template-generation.test.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 8,
      "isExternal": true,
      "file": "tests/unit/template-generation.test.js"
    },
    {
      "type": "ES6",
      "items": " jest ",
      "from": "@jest/globals",
      "line": 6,
      "isExternal": true,
      "file": "tests/setup.js"
    },
    {
      "type": "ES6",
      "items": " promises as fs ",
      "from": "fs",
      "line": 7,
      "isExternal": true,
      "file": "tests/setup.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 8,
      "isExternal": true,
      "file": "tests/setup.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/create/api.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/create/api.js"
    },
    {
      "type": "ES6",
      "items": " authenticate ",
      "from": "./middleware/auth.js",
      "line": 567,
      "isExternal": false,
      "file": "server/routes/create/api.js"
    },
    {
      "type": "CommonJS",
      "items": "Joi",
      "line": 457,
      "isExternal": true,
      "file": "server/routes/create/api.js"
    },
    {
      "type": "CommonJS",
      "items": "request",
      "line": 490,
      "isExternal": true,
      "file": "server/routes/create/api.js"
    },
    {
      "type": "CommonJS",
      "items": "app",
      "line": 491,
      "isExternal": true,
      "file": "server/routes/create/api.js"
    },
    {
      "type": "ES6",
      "items": "express",
      "from": "express",
      "line": 6,
      "isExternal": true,
      "file": "server/routes/create/modules.js"
    },
    {
      "type": "ES6",
      "items": " success, error, workflowSuccess ",
      "from": "../../services/response-service.js",
      "line": 7,
      "isExternal": false,
      "file": "server/routes/create/modules.js"
    },
    {
      "type": "ES6",
      "items": " PromptManager ",
      "from": "../prompt-manager.js",
      "line": 6,
      "isExternal": false,
      "file": "server/services/prompt-service.js"
    },
    {
      "type": "ES6",
      "items": "LanguageDetector",
      "from": "../language/detector.js",
      "line": 6,
      "isExternal": false,
      "file": "server/services/language-service.js"
    },
    {
      "type": "ES6",
      "items": " EnhancedLanguageDetector ",
      "from": "../analyzers/enhanced-language-detector.js",
      "line": 7,
      "isExternal": false,
      "file": "server/services/language-service.js"
    },
    {
      "type": "ES6",
      "items": "LanguagePromptGenerator",
      "from": "../language/language-prompt-generator.js",
      "line": 8,
      "isExternal": false,
      "file": "server/services/language-service.js"
    },
    {
      "type": "ES6",
      "items": "LanguageDetector",
      "from": "./detector.js",
      "line": 6,
      "isExternal": false,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 7,
      "isExternal": true,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "type": "ES6",
      "items": " fileURLToPath ",
      "from": "url",
      "line": 8,
      "isExternal": true,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "type": "ES6",
      "items": "fs",
      "from": "fs",
      "line": 6,
      "isExternal": true,
      "file": "server/language/detector.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 7,
      "isExternal": true,
      "file": "server/language/detector.js"
    },
    {
      "type": "ES6",
      "items": " promises as fs ",
      "from": "fs",
      "line": 12,
      "isExternal": true,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 13,
      "isExternal": true,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "type": "ES6",
      "items": " promises as fs ",
      "from": "fs",
      "line": 6,
      "isExternal": true,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 7,
      "isExternal": true,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "type": "ES6",
      "items": "LanguageDetector",
      "from": "../language/detector.js",
      "line": 8,
      "isExternal": false,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "type": "ES6",
      "items": " promises as fs ",
      "from": "fs",
      "line": 6,
      "isExternal": true,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "type": "ES6",
      "items": "path",
      "from": "path",
      "line": 7,
      "isExternal": true,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "type": "ES6",
      "items": " fileURLToPath ",
      "from": "url",
      "line": 8,
      "isExternal": true,
      "file": "server/analyzers/project-scanner.js"
    }
  ],
  "exports": [
    {
      "type": "ES6",
      "items": "class",
      "line": 9,
      "isDefault": false,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "type": "ES6",
      "items": "UltraDetailedCodeAnalyzer",
      "line": 740,
      "isDefault": true,
      "file": "server/analyzers/ultra-detailed-code-analyzer.js"
    },
    {
      "type": "ES6",
      "items": "class",
      "line": 6,
      "isDefault": false,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "type": "ES6",
      "items": "EnhancedAIContentGenerator",
      "line": 756,
      "isDefault": true,
      "file": "server/services/enhanced-ai-content-generator.js"
    },
    {
      "type": "ES6",
      "items": "class",
      "line": 13,
      "isDefault": false,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "type": "ES6",
      "items": "RealProjectScanner",
      "line": 658,
      "isDefault": true,
      "file": "server/analyzers/real-project-scanner.js"
    },
    {
      "type": "ES6",
      "items": "AIContentGeneratorService",
      "line": 1362,
      "isDefault": true,
      "file": "server/services/ai-content-generator.js"
    },
    {
      "type": "ES6",
      "items": "class",
      "line": 15,
      "isDefault": false,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "type": "ES6",
      "items": "AIResponseHandlerService",
      "line": 356,
      "isDefault": true,
      "file": "server/services/ai-response-handler.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 15,
      "isDefault": false,
      "file": "server/routes/init/language.js"
    },
    {
      "type": "ES6",
      "items": "createLanguageRoutes",
      "line": 377,
      "isDefault": true,
      "file": "server/routes/init/language.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/init/structure.js"
    },
    {
      "type": "ES6",
      "items": "createStructureRoutes",
      "line": 183,
      "isDefault": true,
      "file": "server/routes/init/structure.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/init/data.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 187,
      "isDefault": true,
      "file": "server/routes/init/data.js"
    },
    {
      "type": "ES6",
      "items": " testRoutesRegistration, testModulesAnalysisRoute, testModulesDocsRoute, testResponsibilitySeparation ",
      "line": 299,
      "isDefault": false,
      "file": "test-split-modules.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 42,
      "isDefault": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 186,
      "isDefault": false,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": "createAppRoutes",
      "line": 198,
      "isDefault": true,
      "file": "server/routes/index.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 23,
      "isDefault": false,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "ES6",
      "items": " createInitRoutes as default ",
      "line": 72,
      "isDefault": true,
      "file": "server/routes/init/index.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 16,
      "isDefault": false,
      "file": "server/routes/init/modules-docs.js"
    },
    {
      "type": "ES6",
      "items": "createModulesDocsRoutes",
      "line": 365,
      "isDefault": true,
      "file": "server/routes/init/modules-docs.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 16,
      "isDefault": false,
      "file": "server/routes/init/modules-analysis.js"
    },
    {
      "type": "ES6",
      "items": "createModulesAnalysisRoutes",
      "line": 381,
      "isDefault": true,
      "file": "server/routes/init/modules-analysis.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 15,
      "isDefault": false,
      "file": "server/routes/init/contracts.js"
    },
    {
      "type": "ES6",
      "items": "createContractsRoutes",
      "line": 518,
      "isDefault": true,
      "file": "server/routes/init/contracts.js"
    },
    {
      "type": "ES6",
      "items": " testAIResponseHandler, testWorkflowIntegration, verifyGeneratedFiles ",
      "line": 264,
      "isDefault": false,
      "file": "test-ai-response-handler.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 15,
      "isDefault": false,
      "file": "server/routes/init/documents.js"
    },
    {
      "type": "ES6",
      "items": "createDocumentsRoutes",
      "line": 450,
      "isDefault": true,
      "file": "server/routes/init/documents.js"
    },
    {
      "type": "ES6",
      "items": "TemplateReader",
      "line": 242,
      "isDefault": true,
      "file": "server/services/template-reader.js"
    },
    {
      "type": "ES6",
      "items": "class",
      "line": 12,
      "isDefault": false,
      "file": "server/prompt-manager.js"
    },
    {
      "type": "ES6",
      "items": "PromptManager",
      "line": 262,
      "isDefault": true,
      "file": "server/prompt-manager.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/init/files.js"
    },
    {
      "type": "ES6",
      "items": "createFilesRoutes",
      "line": 350,
      "isDefault": true,
      "file": "server/routes/init/files.js"
    },
    {
      "type": "ES6",
      "items": " loadConfig, setupGracefulShutdown, main, createApp, setupWebSocket ",
      "line": 476,
      "isDefault": false,
      "file": "index.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 17,
      "isDefault": false,
      "file": "server/routes/system/index.js"
    },
    {
      "type": "ES6",
      "items": "createSystemRoutes",
      "line": 32,
      "isDefault": true,
      "file": "server/routes/system/index.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 13,
      "isDefault": false,
      "file": "server/services/response-service.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 29,
      "isDefault": false,
      "file": "server/services/response-service.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 44,
      "isDefault": false,
      "file": "server/services/response-service.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 68,
      "isDefault": false,
      "file": "server/services/response-service.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 87,
      "isDefault": false,
      "file": "server/services/response-service.js"
    },
    {
      "type": "ES6",
      "items": "default",
      "line": 97,
      "isDefault": true,
      "file": "server/services/response-service.js"
    },
    {
      "type": "ES6",
      "items": "router",
      "line": 453,
      "isDefault": true,
      "file": "server/routes/language/templates.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/system/mcp.js"
    },
    {
      "type": "ES6",
      "items": "createMCPRoutes",
      "line": 112,
      "isDefault": true,
      "file": "server/routes/system/mcp.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 22,
      "isDefault": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": "async",
      "line": 74,
      "isDefault": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 89,
      "isDefault": false,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": "default",
      "line": 108,
      "isDefault": true,
      "file": "server/services/service-registry.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 277,
      "isDefault": false,
      "file": "server/services/service-bus.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 287,
      "isDefault": false,
      "file": "server/services/service-bus.js"
    },
    {
      "type": "ES6",
      "items": "ServiceBus",
      "line": 294,
      "isDefault": true,
      "file": "server/services/service-bus.js"
    },
    {
      "type": "ES6",
      "items": "UnifiedTemplateService",
      "line": 908,
      "isDefault": true,
      "file": "server/services/unified-template-service.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "type": "ES6",
      "items": "createDiagnosisRoutes",
      "line": 929,
      "isDefault": true,
      "file": "server/routes/fix/diagnosis.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/system/prompts.js"
    },
    {
      "type": "ES6",
      "items": "createPromptsRoutes",
      "line": 225,
      "isDefault": true,
      "file": "server/routes/system/prompts.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/system/health.js"
    },
    {
      "type": "ES6",
      "items": "createHealthRoutes",
      "line": 110,
      "isDefault": true,
      "file": "server/routes/system/health.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "type": "ES6",
      "items": "createFixesRoutes",
      "line": 1776,
      "isDefault": true,
      "file": "server/routes/fix/fixes.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/fix/issues.js"
    },
    {
      "type": "ES6",
      "items": "createIssuesRoutes",
      "line": 1472,
      "isDefault": true,
      "file": "server/routes/fix/issues.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 17,
      "isDefault": false,
      "file": "server/routes/fix/index.js"
    },
    {
      "type": "ES6",
      "items": "createFixModeRoutes",
      "line": 505,
      "isDefault": true,
      "file": "server/routes/fix/index.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "type": "ES6",
      "items": "createQualityRoutes",
      "line": 1043,
      "isDefault": true,
      "file": "server/routes/analyze/quality.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/analyze/security.js"
    },
    {
      "type": "ES6",
      "items": "createSecurityRoutes",
      "line": 906,
      "isDefault": true,
      "file": "server/routes/analyze/security.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 19,
      "isDefault": false,
      "file": "server/routes/analyze/index.js"
    },
    {
      "type": "ES6",
      "items": "createAnalyzeModeRoutes",
      "line": 650,
      "isDefault": true,
      "file": "server/routes/analyze/index.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "type": "ES6",
      "items": "createReportsRoutes",
      "line": 795,
      "isDefault": true,
      "file": "server/routes/analyze/reports.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/analyze/dependencies.js"
    },
    {
      "type": "ES6",
      "items": "createDependenciesRoutes",
      "line": 338,
      "isDefault": true,
      "file": "server/routes/analyze/dependencies.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/analyze/performance.js"
    },
    {
      "type": "ES6",
      "items": "createPerformanceRoutes",
      "line": 312,
      "isDefault": true,
      "file": "server/routes/analyze/performance.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/create/features.js"
    },
    {
      "type": "ES6",
      "items": "createFeatureRoutes",
      "line": 3378,
      "isDefault": true,
      "file": "server/routes/create/features.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 18,
      "isDefault": false,
      "file": "server/routes/create/index.js"
    },
    {
      "type": "ES6",
      "items": "createCreateModeRoutes",
      "line": 301,
      "isDefault": true,
      "file": "server/routes/create/index.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 30,
      "isDefault": false,
      "file": "server/routes/init/prompts.js"
    },
    {
      "type": "ES6",
      "items": "createLanguagePromptsRoutes",
      "line": 329,
      "isDefault": true,
      "file": "server/routes/init/prompts.js"
    },
    {
      "type": "ES6",
      "items": "ConfigService",
      "line": 361,
      "isDefault": true,
      "file": "server/services/config-service.js"
    },
    {
      "type": "ES6",
      "items": "router",
      "line": 502,
      "isDefault": true,
      "file": "server/routes/language/prompts.js"
    },
    {
      "type": "ES6",
      "items": "router",
      "line": 323,
      "isDefault": true,
      "file": "server/routes/language/detection.js"
    },
    {
      "type": "ES6",
      "items": "LanguageTemplateGenerator",
      "line": 561,
      "isDefault": true,
      "file": "server/language/template-generator.js"
    },
    {
      "type": "ES6",
      "items": "LanguageIntelligenceService",
      "line": 619,
      "isDefault": true,
      "file": "server/services/language-intelligence-service.js"
    },
    {
      "type": "ES6",
      "items": "router",
      "line": 96,
      "isDefault": true,
      "file": "server/routes/language/index.js"
    },
    {
      "type": "ES6",
      "items": "TemplateEngineService",
      "line": 583,
      "isDefault": true,
      "file": "server/services/template-engine-service.js"
    },
    {
      "type": "ES6",
      "items": "PromptIntelligence",
      "line": 564,
      "isDefault": true,
      "file": "server/language/prompt-intelligence.js"
    },
    {
      "type": "ES6",
      "items": "WorkflowService",
      "line": 143,
      "isDefault": true,
      "file": "server/services/workflow-service.js"
    },
    {
      "type": "ES6",
      "items": "class",
      "line": 6,
      "isDefault": false,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "type": "ES6",
      "items": "WorkflowState",
      "line": 361,
      "isDefault": true,
      "file": "server/services/workflow-state-service.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/create/data.js"
    },
    {
      "type": "ES6",
      "items": "createDataRoutes",
      "line": 632,
      "isDefault": true,
      "file": "server/routes/create/data.js"
    },
    {
      "type": "ES6",
      "items": "class",
      "line": 16,
      "isDefault": false,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "type": "ES6",
      "items": "IntegrationAnalyzer",
      "line": 838,
      "isDefault": true,
      "file": "server/analyzers/integration-analyzer.js"
    },
    {
      "type": "ES6",
      "items": "default",
      "line": 6,
      "isDefault": true,
      "file": "jest.config.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/create/api.js"
    },
    {
      "type": "ES6",
      "items": "createAPIRoutes",
      "line": 637,
      "isDefault": true,
      "file": "server/routes/create/api.js"
    },
    {
      "type": "ES6",
      "items": "function",
      "line": 14,
      "isDefault": false,
      "file": "server/routes/create/modules.js"
    },
    {
      "type": "ES6",
      "items": "default",
      "line": 216,
      "isDefault": true,
      "file": "server/routes/create/modules.js"
    },
    {
      "type": "ES6",
      "items": "Component",
      "line": 272,
      "isDefault": true,
      "file": "server/routes/create/modules.js"
    },
    {
      "type": "ES6",
      "items": "createModuleRoutes",
      "line": 523,
      "isDefault": true,
      "file": "server/routes/create/modules.js"
    },
    {
      "type": "ES6",
      "items": "PromptService",
      "line": 201,
      "isDefault": true,
      "file": "server/services/prompt-service.js"
    },
    {
      "type": "ES6",
      "items": "LanguageService",
      "line": 195,
      "isDefault": true,
      "file": "server/services/language-service.js"
    },
    {
      "type": "ES6",
      "items": "LanguagePromptGenerator",
      "line": 813,
      "isDefault": true,
      "file": "server/language/language-prompt-generator.js"
    },
    {
      "type": "ES6",
      "items": "LanguageDetector",
      "line": 415,
      "isDefault": true,
      "file": "server/language/detector.js"
    },
    {
      "type": "ES6",
      "items": "class",
      "line": 15,
      "isDefault": false,
      "file": "server/analyzers/file-content-analyzer.js"
    },
    {
      "type": "ES6",
      "items": "class",
      "line": 14,
      "isDefault": false,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "type": "ES6",
      "items": "EnhancedLanguageDetector",
      "line": 1238,
      "isDefault": true,
      "file": "server/analyzers/enhanced-language-detector.js"
    },
    {
      "type": "ES6",
      "items": "class",
      "line": 16,
      "isDefault": false,
      "file": "server/analyzers/project-scanner.js"
    },
    {
      "type": "ES6",
      "items": "ProjectScanner",
      "line": 854,
      "isDefault": true,
      "file": "server/analyzers/project-scanner.js"
    }
  ],
  "complexity": {
    "cyclomaticComplexity": 1241325,
    "cognitiveComplexity": 10072,
    "maintenanceIndex": 0,
    "technicalDebt": [
      {
        "type": "LongMethod",
        "function": "analyzeProject",
        "line": 20,
        "length": 83,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_analyzeFile",
        "line": 109,
        "length": 61,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_analyzeLines",
        "line": 174,
        "length": 52,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_extractFunctions",
        "line": 230,
        "length": 105,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_calculateComplexity",
        "line": 376,
        "length": 54,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_identifyPatterns",
        "line": 469,
        "length": 272,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_extractFunctionBody",
        "line": 513,
        "length": 228,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_analyzeClassMembers",
        "line": 541,
        "length": 198,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_mergeFileAnalysis",
        "line": 641,
        "length": 77,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js"
      },
      {
        "type": "DeepNesting",
        "depth": 10,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "testUltraDetailedAnalyzer",
        "line": 13,
        "length": 144,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "test-ultra-detailed-analyzer.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "test-ultra-detailed-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "testEnhancedRealAIContent",
        "line": 13,
        "length": 135,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "test-enhanced-real-ai-content.js"
      },
      {
        "type": "LongMethod",
        "function": "generateRealProjectOverview",
        "line": 23,
        "length": 111,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/services/enhanced-ai-content-generator.js"
      },
      {
        "type": "LongMethod",
        "function": "generateRealAPIDocumentation",
        "line": 140,
        "length": 72,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/services/enhanced-ai-content-generator.js"
      },
      {
        "type": "LongMethod",
        "function": "generateRealModuleArchitecture",
        "line": 218,
        "length": 80,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/services/enhanced-ai-content-generator.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/services/enhanced-ai-content-generator.js"
      },
      {
        "type": "LongMethod",
        "function": "_scanDirectory",
        "line": 123,
        "length": 56,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/real-project-scanner.js"
      },
      {
        "type": "LongMethod",
        "function": "_analyzeFileContent",
        "line": 237,
        "length": 93,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/real-project-scanner.js"
      },
      {
        "type": "DeepNesting",
        "depth": 7,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/analyzers/real-project-scanner.js"
      },
      {
        "type": "LongMethod",
        "function": "testRealProjectScanner",
        "line": 12,
        "length": 106,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "test-real-project-scanner.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "test-real-project-scanner.js"
      },
      {
        "type": "LongMethod",
        "function": "testCompleteAIContent",
        "line": 54,
        "length": 131,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "test-complete-ai-content.js"
      },
      {
        "type": "LongMethod",
        "function": "generateProjectOverview",
        "line": 26,
        "length": 63,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/services/ai-content-generator.js"
      },
      {
        "type": "LongMethod",
        "function": "generateModuleDetail",
        "line": 320,
        "length": 65,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/services/ai-content-generator.js"
      },
      {
        "type": "LongMethod",
        "function": "generateIntegrationContracts",
        "line": 391,
        "length": 63,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/services/ai-content-generator.js"
      },
      {
        "type": "LongMethod",
        "function": "testEnhancedContent",
        "line": 63,
        "length": 92,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "test-enhanced-ai-content.js"
      },
      {
        "type": "LongMethod",
        "function": "testAIContentGeneration",
        "line": 11,
        "length": 203,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "test-ai-content-generation.js"
      },
      {
        "type": "DeepNesting",
        "depth": 7,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "test-ai-content-generation.js"
      },
      {
        "type": "LongMethod",
        "function": "prepareDocuments",
        "line": 163,
        "length": 128,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/services/ai-response-handler.js"
      },
      {
        "type": "DeepNesting",
        "depth": 8,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/services/ai-response-handler.js"
      },
      {
        "type": "LongMethod",
        "function": "createLanguageRoutes",
        "line": 15,
        "length": 304,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/init/language.js"
      },
      {
        "type": "LongMethod",
        "function": "_generateLanguageReport",
        "line": 325,
        "length": 51,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/init/language.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/init/language.js"
      },
      {
        "type": "LongMethod",
        "function": "createStructureRoutes",
        "line": 14,
        "length": 95,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/init/structure.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/init/structure.js"
      },
      {
        "type": "LongMethod",
        "function": "createInitDataRoutes",
        "line": 14,
        "length": 171,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/init/data.js"
      },
      {
        "type": "LongMethod",
        "function": "testInitModeNoUser",
        "line": 11,
        "length": 209,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "test-init-no-user.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "test-init-no-user.js"
      },
      {
        "type": "LongMethod",
        "function": "testFixedStructure",
        "line": 11,
        "length": 100,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "test-fixed-structure.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "test-fixed-structure.js"
      },
      {
        "type": "LongMethod",
        "function": "testRoutesRegistration",
        "line": 44,
        "length": 63,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "test-split-modules.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "test-split-modules.js"
      },
      {
        "type": "LongMethod",
        "function": "createAppRoutes",
        "line": 42,
        "length": 137,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/index.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/index.js"
      },
      {
        "type": "LongMethod",
        "function": "createModulesDocsRoutes",
        "line": 16,
        "length": 335,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/init/modules-docs.js"
      },
      {
        "type": "DeepNesting",
        "depth": 7,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/init/modules-docs.js"
      },
      {
        "type": "LongMethod",
        "function": "createModulesAnalysisRoutes",
        "line": 16,
        "length": 352,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/init/modules-analysis.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/init/modules-analysis.js"
      },
      {
        "type": "LongMethod",
        "function": "createContractsRoutes",
        "line": 15,
        "length": 482,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/init/contracts.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/init/contracts.js"
      },
      {
        "type": "LongMethod",
        "function": "testAIResponseHandler",
        "line": 18,
        "length": 89,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "test-ai-response-handler.js"
      },
      {
        "type": "LongMethod",
        "function": "testWorkflowIntegration",
        "line": 111,
        "length": 75,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "test-ai-response-handler.js"
      },
      {
        "type": "LongMethod",
        "function": "createDocumentsRoutes",
        "line": 15,
        "length": 434,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/init/documents.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/init/documents.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/services/template-reader.js"
      },
      {
        "type": "LongMethod",
        "function": "createFilesRoutes",
        "line": 14,
        "length": 313,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/init/files.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/init/files.js"
      },
      {
        "type": "LongMethod",
        "function": "setupWebSocket",
        "line": 212,
        "length": 90,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "index.js"
      },
      {
        "type": "LongMethod",
        "function": "handleWebSocketMessage",
        "line": 306,
        "length": 51,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "index.js"
      },
      {
        "type": "LongMethod",
        "function": "startServer",
        "line": 408,
        "length": 52,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "index.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "index.js"
      },
      {
        "type": "DeepNesting",
        "depth": 7,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/language/templates.js"
      },
      {
        "type": "LongMethod",
        "function": "createMCPRoutes",
        "line": 14,
        "length": 79,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/system/mcp.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/system/mcp.js"
      },
      {
        "type": "LongMethod",
        "function": "constructor",
        "line": 18,
        "length": 71,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/services/unified-template-service.js"
      },
      {
        "type": "LongMethod",
        "function": "executeIntelligentTemplateSelection",
        "line": 134,
        "length": 111,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/services/unified-template-service.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/services/unified-template-service.js"
      },
      {
        "type": "LongMethod",
        "function": "createDiagnosisRoutes",
        "line": 14,
        "length": 319,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/fix/diagnosis.js"
      },
      {
        "type": "LongMethod",
        "function": "_generateFixSuggestions",
        "line": 457,
        "length": 52,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/fix/diagnosis.js"
      },
      {
        "type": "DeepNesting",
        "depth": 7,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/fix/diagnosis.js"
      },
      {
        "type": "LongMethod",
        "function": "createPromptsRoutes",
        "line": 14,
        "length": 183,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/system/prompts.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/system/prompts.js"
      },
      {
        "type": "LongMethod",
        "function": "createHealthRoutes",
        "line": 14,
        "length": 95,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/system/health.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/system/health.js"
      },
      {
        "type": "LongMethod",
        "function": "createFixesRoutes",
        "line": 14,
        "length": 1761,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/fix/fixes.js"
      },
      {
        "type": "LongMethod",
        "function": "_performFixVerification",
        "line": 686,
        "length": 65,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/fix/fixes.js"
      },
      {
        "type": "LongMethod",
        "function": "_generatePatch",
        "line": 903,
        "length": 55,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/fix/fixes.js"
      },
      {
        "type": "DeepNesting",
        "depth": 7,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/fix/fixes.js"
      },
      {
        "type": "LongMethod",
        "function": "createIssuesRoutes",
        "line": 14,
        "length": 1457,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/fix/issues.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/fix/issues.js"
      },
      {
        "type": "LongMethod",
        "function": "createFixModeRoutes",
        "line": 17,
        "length": 487,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/fix/index.js"
      },
      {
        "type": "DeepNesting",
        "depth": 8,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/fix/index.js"
      },
      {
        "type": "LongMethod",
        "function": "createQualityRoutes",
        "line": 14,
        "length": 532,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/analyze/quality.js"
      },
      {
        "type": "LongMethod",
        "function": "_performQualityAnalysis",
        "line": 555,
        "length": 62,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/analyze/quality.js"
      },
      {
        "type": "LongMethod",
        "function": "_generateQualityRecommendations",
        "line": 682,
        "length": 53,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/analyze/quality.js"
      },
      {
        "type": "DeepNesting",
        "depth": 7,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/analyze/quality.js"
      },
      {
        "type": "LongMethod",
        "function": "createSecurityRoutes",
        "line": 14,
        "length": 483,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/analyze/security.js"
      },
      {
        "type": "LongMethod",
        "function": "_performSecurityAnalysis",
        "line": 506,
        "length": 86,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/analyze/security.js"
      },
      {
        "type": "LongMethod",
        "function": "_analyzeSecurityConfiguration",
        "line": 697,
        "length": 54,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/analyze/security.js"
      },
      {
        "type": "LongMethod",
        "function": "_generateSecurityReport",
        "line": 775,
        "length": 70,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/analyze/security.js"
      },
      {
        "type": "DeepNesting",
        "depth": 7,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/analyze/security.js"
      },
      {
        "type": "LongMethod",
        "function": "createAnalyzeModeRoutes",
        "line": 19,
        "length": 476,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/analyze/index.js"
      },
      {
        "type": "DeepNesting",
        "depth": 8,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/analyze/index.js"
      },
      {
        "type": "LongMethod",
        "function": "createReportsRoutes",
        "line": 14,
        "length": 284,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/analyze/reports.js"
      },
      {
        "type": "LongMethod",
        "function": "_collectAllAnalysisData",
        "line": 306,
        "length": 51,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/analyze/reports.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/analyze/reports.js"
      },
      {
        "type": "LongMethod",
        "function": "createDependenciesRoutes",
        "line": 14,
        "length": 290,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/analyze/dependencies.js"
      },
      {
        "type": "DeepNesting",
        "depth": 7,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/analyze/dependencies.js"
      },
      {
        "type": "LongMethod",
        "function": "createPerformanceRoutes",
        "line": 14,
        "length": 264,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/analyze/performance.js"
      },
      {
        "type": "DeepNesting",
        "depth": 7,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/analyze/performance.js"
      },
      {
        "type": "LongMethod",
        "function": "createFeatureRoutes",
        "line": 14,
        "length": 1560,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/features.js"
      },
      {
        "type": "LongMethod",
        "function": "_generateTaskBreakdown",
        "line": 1582,
        "length": 71,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/features.js"
      },
      {
        "type": "LongMethod",
        "function": "_validateRequirements",
        "line": 2282,
        "length": 75,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/features.js"
      },
      {
        "type": "LongMethod",
        "function": "_analyzeFeasibility",
        "line": 2395,
        "length": 57,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/features.js"
      },
      {
        "type": "LongMethod",
        "function": "_identifyRequirementRisks",
        "line": 2535,
        "length": 51,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/features.js"
      },
      {
        "type": "LongMethod",
        "function": "_generateRequirementsRecommendations",
        "line": 2592,
        "length": 63,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/features.js"
      },
      {
        "type": "LongMethod",
        "function": "_generateArchitectureReport",
        "line": 3056,
        "length": 51,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/features.js"
      },
      {
        "type": "LongMethod",
        "function": "_generateContractsReport",
        "line": 3167,
        "length": 81,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/features.js"
      },
      {
        "type": "LongMethod",
        "function": "_generateTodoReport",
        "line": 3254,
        "length": 63,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/features.js"
      },
      {
        "type": "LongMethod",
        "function": "_generateTechDesignReport",
        "line": 3323,
        "length": 54,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/features.js"
      },
      {
        "type": "DeepNesting",
        "depth": 7,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/create/features.js"
      },
      {
        "type": "LongMethod",
        "function": "createCreateModeRoutes",
        "line": 18,
        "length": 282,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/index.js"
      },
      {
        "type": "DeepNesting",
        "depth": 8,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/create/index.js"
      },
      {
        "type": "LongMethod",
        "function": "createLanguagePromptsRoutes",
        "line": 30,
        "length": 298,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/init/prompts.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/init/prompts.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/services/config-service.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/language/prompts.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/language/detection.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/language/template-generator.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/services/language-intelligence-service.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/services/template-engine-service.js"
      },
      {
        "type": "LongMethod",
        "function": "constructor",
        "line": 11,
        "length": 84,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/language/prompt-intelligence.js"
      },
      {
        "type": "LongMethod",
        "function": "generateContextualPrompts",
        "line": 173,
        "length": 51,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/language/prompt-intelligence.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/language/prompt-intelligence.js"
      },
      {
        "type": "LongMethod",
        "function": "createDataRoutes",
        "line": 14,
        "length": 267,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/data.js"
      },
      {
        "type": "LongMethod",
        "function": "_getDefaultAnalysisTemplates",
        "line": 474,
        "length": 57,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/data.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/create/data.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "tests/integration/create-requirements-routes.test.js"
      },
      {
        "type": "LongMethod",
        "function": "createMockWorkflow",
        "line": 524,
        "length": 111,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "tests/integration/contracts-routes.test.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "tests/integration/contracts-routes.test.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "tests/unit/integration-analyzer.test.js"
      },
      {
        "type": "LongMethod",
        "function": "analyzeIntegration",
        "line": 38,
        "length": 71,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/integration-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_analyzeModuleRelations",
        "line": 189,
        "length": 70,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/integration-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_analyzeExternalDependencies",
        "line": 393,
        "length": 52,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/integration-analyzer.js"
      },
      {
        "type": "DeepNesting",
        "depth": 8,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/analyzers/integration-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "createMockTemplateVariables",
        "line": 437,
        "length": 107,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "tests/unit/template-generation.test.js"
      },
      {
        "type": "LongMethod",
        "function": "_generateBuiltinContractDocument",
        "line": 575,
        "length": 198,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "tests/unit/template-generation.test.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "tests/unit/template-generation.test.js"
      },
      {
        "type": "LongMethod",
        "function": "createAPIRoutes",
        "line": 14,
        "length": 195,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/api.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/create/api.js"
      },
      {
        "type": "LongMethod",
        "function": "createModuleRoutes",
        "line": 14,
        "length": 149,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/routes/create/modules.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/routes/create/modules.js"
      },
      {
        "type": "LongMethod",
        "function": "initializeBestPractices",
        "line": 361,
        "length": 115,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/language/language-prompt-generator.js"
      },
      {
        "type": "LongMethod",
        "function": "constructor",
        "line": 10,
        "length": 111,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/language/detector.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/language/detector.js"
      },
      {
        "type": "LongMethod",
        "function": "analyzeFiles",
        "line": 38,
        "length": 62,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/file-content-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_flattenFileStructure",
        "line": 130,
        "length": 64,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/file-content-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_analyzeFileContent",
        "line": 345,
        "length": 58,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/file-content-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_extractFunctions",
        "line": 570,
        "length": 425,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/file-content-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "_generateRecommendations",
        "line": 865,
        "length": 51,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/file-content-analyzer.js"
      },
      {
        "type": "DeepNesting",
        "depth": 6,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/analyzers/file-content-analyzer.js"
      },
      {
        "type": "LongMethod",
        "function": "inferFrameworks",
        "line": 199,
        "length": 56,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/enhanced-language-detector.js"
      },
      {
        "type": "LongMethod",
        "function": "calculateOverallConfidence",
        "line": 731,
        "length": 57,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/enhanced-language-detector.js"
      },
      {
        "type": "LongMethod",
        "function": "scanProject",
        "line": 39,
        "length": 82,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/project-scanner.js"
      },
      {
        "type": "LongMethod",
        "function": "scanDirectoryStructure",
        "line": 127,
        "length": 66,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/project-scanner.js"
      },
      {
        "type": "LongMethod",
        "function": "analyzeReadmeContent",
        "line": 234,
        "length": 54,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/project-scanner.js"
      },
      {
        "type": "LongMethod",
        "function": "scanConfigFiles",
        "line": 294,
        "length": 73,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/project-scanner.js"
      },
      {
        "type": "LongMethod",
        "function": "extractTechStackHints",
        "line": 636,
        "length": 53,
        "suggestion": "考虑将长方法拆分为多个较小的方法",
        "file": "server/analyzers/project-scanner.js"
      },
      {
        "type": "DeepNesting",
        "depth": 5,
        "suggestion": "考虑重构以减少嵌套层级",
        "file": "server/analyzers/project-scanner.js"
      }
    ],
    "averageFunctionComplexity": 1079
  },
  "fileDetails": [
    {
      "path": "server/routes/create/features.js",
      "size": 125413,
      "lines": {
        "total": 3378,
        "code": 2545,
        "comments": 446,
        "blank": 405
      },
      "functions": 65,
      "classes": 0,
      "complexity": {
        "cyclomatic": 115527,
        "cognitive": 779,
        "nestingDepth": 7
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 需求分类和优先级\n                categorizedRequirements: await _categorizeRequirements(requirements),",
            "lines": [
              51,
              52
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 需求验证和完整性检查\n                validation: _validateRequirements(requirements, context),",
            "lines": [
              54,
              55
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 需求分解为用户故事\n                userStories: await _decomposeToUserStories(requirements, stakeholders),",
            "lines": [
              57,
              58
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 可行性分析\n                feasibilityAnalysis: _analyzeFeasibility(requirements, constraints, language),",
            "lines": [
              60,
              61
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 优先级评估\n                priorityAssessment: _assessPriority(requirements, businessGoals),",
            "lines": [
              63,
              64
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 依赖关系分析\n                dependencies: _analyzeDependencies(requirements),",
            "lines": [
              66,
              67
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const designResult = mockTechDesignResult;",
            "lines": [
              216,
              217
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              93,
              221
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "tokensReduced: '预计48%令牌消耗',\n                    aiAnalysisTemplate: 'tech-design-analysis.md',\n                    aiDocumentTemplate: 'tech-design-generation.md'",
            "lines": [
              211,
              252
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisTemplate: 'tech-design-analysis.md',\n                    aiDocumentTemplate: 'tech-design-generation.md'\n                }",
            "lines": [
              212,
              253
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiDocumentTemplate: 'tech-design-generation.md'\n                }\n            };",
            "lines": [
              213,
              254
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n            console.error('[TechDesign] 技术设计文档生成失败:', err);",
            "lines": [
              264,
              265
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成详细技术设计报告\n            const report = _generateTechDesignReport(designResult);",
            "lines": [
              306,
              307
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                featureId,",
            "lines": [
              117,
              323
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const aiAnalysisPackage = {\n                // 项目数据\n                projectData: {",
            "lines": [
              136,
              342
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 项目数据\n                projectData: {\n                    featureId,",
            "lines": [
              137,
              343
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysisDate: new Date().toISOString()\n                },",
            "lines": [
              144,
              350
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 元数据\n                metadata: {\n                    workflowId,",
            "lines": [
              155,
              361
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    workflowId,\n                    mode: 'create',",
            "lines": [
              156,
              362
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              161,
              367
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "]\n                        },\n                        {",
            "lines": [
              382,
              392
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString(),\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              208,
              427
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const todoResult = mockTodoResult;",
            "lines": [
              435,
              436
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为已完成\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              220,
              439
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              93,
              440
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisPackage // 包含AI分析数据包\n                    });\n                }",
            "lines": [
              226,
              445
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n            \n            const executionTime = Date.now() - startTime;",
            "lines": [
              229,
              448
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n            \n            // AI驱动架构响应数据",
            "lines": [
              231,
              450
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI驱动架构响应数据\n            const responseData = {\n                // AI分析数据包 (提供给AI使用)",
            "lines": [
              233,
              452
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const responseData = {\n                // AI分析数据包 (提供给AI使用)\n                aiAnalysisPackage,",
            "lines": [
              234,
              453
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI分析数据包 (提供给AI使用)\n                aiAnalysisPackage,",
            "lines": [
              235,
              454
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisPackage,\n                \n                // 模拟分析结果 (实际由AI生成)",
            "lines": [
              236,
              455
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI元数据\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              242,
              461
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    mode: 'ai-driven',\n                    workflowId,",
            "lines": [
              243,
              462
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "tokensReduced: '预计45%令牌消耗',\n                    aiAnalysisTemplate: 'todo-generation-analysis.md',\n                    aiDocumentTemplate: 'todo-generation.md'",
            "lines": [
              430,
              471
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisTemplate: 'todo-generation-analysis.md',\n                    aiDocumentTemplate: 'todo-generation.md'\n                }",
            "lines": [
              431,
              472
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiDocumentTemplate: 'todo-generation.md'\n                }\n            };",
            "lines": [
              432,
              473
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n            console.error('[TodoGeneration] 开发任务分解失败:', err);",
            "lines": [
              483,
              484
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为失败\n            if (req.body.workflowId) {",
            "lines": [
              267,
              486
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n            \n            return error(res, err.message, 500, {",
            "lines": [
              271,
              490
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { featureId } = req.params;\n            const { workflowId } = req.query;",
            "lines": [
              285,
              504
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { featureId } = req.params;\n            const { workflowId } = req.query;",
            "lines": [
              286,
              505
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { workflowId } = req.query;\n            \n            if (!featureId) {",
            "lines": [
              287,
              506
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!featureId) {\n                return error(res, '功能ID不能为空', 400);",
            "lines": [
              288,
              507
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!featureId) {\n                return error(res, '功能ID不能为空', 400);\n            }",
            "lines": [
              289,
              508
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              294,
              513
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {",
            "lines": [
              295,
              514
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {\n                    return error(res, `工作流不存在: ${workflowId}`, 404);",
            "lines": [
              296,
              515
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                    return error(res, `工作流不存在: ${workflowId}`, 404);\n                }",
            "lines": [
              297,
              516
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成详细任务报告\n            const report = _generateTodoReport(todoResult);",
            "lines": [
              525,
              526
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              314,
              533
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                featureId,",
            "lines": [
              117,
              542
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "language = 'javascript',\n                projectContext = {},\n                workflowId",
            "lines": [
              122,
              547
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "projectContext = {},\n                workflowId\n            } = req.body;",
            "lines": [
              123,
              548
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const aiAnalysisPackage = {\n                // 项目数据\n                projectData: {",
            "lines": [
              136,
              561
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 项目数据\n                projectData: {\n                    featureId,",
            "lines": [
              137,
              562
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "language,\n                    projectContext,\n                    analysisDate: new Date().toISOString()",
            "lines": [
              142,
              567
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "projectContext,\n                    analysisDate: new Date().toISOString()\n                },",
            "lines": [
              143,
              568
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysisDate: new Date().toISOString()\n                },",
            "lines": [
              144,
              569
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 元数据\n                metadata: {\n                    workflowId,",
            "lines": [
              155,
              580
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    workflowId,\n                    mode: 'create',",
            "lines": [
              156,
              581
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              161,
              586
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n                },\n                workflowIntegration: {",
            "lines": [
              197,
              633
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString(),\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              208,
              644
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const archResult = mockArchResult;",
            "lines": [
              652,
              653
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为已完成\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              220,
              656
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              93,
              657
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisPackage // 包含AI分析数据包\n                    });\n                }",
            "lines": [
              226,
              662
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n            \n            const executionTime = Date.now() - startTime;",
            "lines": [
              229,
              665
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n            \n            // AI驱动架构响应数据",
            "lines": [
              231,
              667
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI驱动架构响应数据\n            const responseData = {\n                // AI分析数据包 (提供给AI使用)",
            "lines": [
              233,
              669
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const responseData = {\n                // AI分析数据包 (提供给AI使用)\n                aiAnalysisPackage,",
            "lines": [
              234,
              670
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI分析数据包 (提供给AI使用)\n                aiAnalysisPackage,",
            "lines": [
              235,
              671
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisPackage,\n                \n                // 模拟分析结果 (实际由AI生成)",
            "lines": [
              236,
              672
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI元数据\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              242,
              678
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    mode: 'ai-driven',\n                    workflowId,",
            "lines": [
              243,
              679
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "tokensReduced: '预计47%令牌消耗',\n                    aiAnalysisTemplate: 'architecture-generation-analysis.md',\n                    aiDocumentTemplate: 'architecture-generation.md'",
            "lines": [
              647,
              688
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisTemplate: 'architecture-generation-analysis.md',\n                    aiDocumentTemplate: 'architecture-generation.md'\n                }",
            "lines": [
              648,
              689
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiDocumentTemplate: 'architecture-generation.md'\n                }\n            };",
            "lines": [
              649,
              690
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n            console.error('[ArchGeneration] 代码架构生成失败:', err);",
            "lines": [
              700,
              701
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为失败\n            if (req.body.workflowId) {",
            "lines": [
              267,
              703
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n            \n            return error(res, err.message, 500, {",
            "lines": [
              271,
              707
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                featureId,",
            "lines": [
              117,
              721
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const aiAnalysisPackage = {\n                // 项目数据\n                projectData: {",
            "lines": [
              136,
              739
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 项目数据\n                projectData: {\n                    featureId,",
            "lines": [
              137,
              740
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysisDate: new Date().toISOString()\n                },",
            "lines": [
              144,
              746
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 元数据\n                metadata: {\n                    workflowId,",
            "lines": [
              155,
              757
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    workflowId,\n                    mode: 'create',",
            "lines": [
              156,
              758
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              161,
              763
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "},\n                    modules: [\n                        {",
            "lines": [
              607,
              774
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "modules: [\n                        {\n                            name: 'UserModule',",
            "lines": [
              608,
              775
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "]\n                        },\n                        {",
            "lines": [
              382,
              794
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "},\n                        {\n                            name: 'AuthModule',",
            "lines": [
              615,
              795
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n                },\n                workflowIntegration: {",
            "lines": [
              197,
              822
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysisDuration: 180,\n                timestamp: new Date().toISOString(),\n                metadata: {",
            "lines": [
              207,
              832
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString(),\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              208,
              833
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const modulesResult = mockModulesResult;",
            "lines": [
              841,
              842
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为已完成\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              220,
              845
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              93,
              846
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisPackage // 包含AI分析数据包\n                    });\n                }",
            "lines": [
              226,
              851
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n            \n            const executionTime = Date.now() - startTime;",
            "lines": [
              229,
              854
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n            \n            // AI驱动架构响应数据",
            "lines": [
              231,
              856
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI驱动架构响应数据\n            const responseData = {\n                // AI分析数据包 (提供给AI使用)",
            "lines": [
              233,
              858
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const responseData = {\n                // AI分析数据包 (提供给AI使用)\n                aiAnalysisPackage,",
            "lines": [
              234,
              859
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI分析数据包 (提供给AI使用)\n                aiAnalysisPackage,",
            "lines": [
              235,
              860
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisPackage,\n                \n                // 模拟分析结果 (实际由AI生成)",
            "lines": [
              236,
              861
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI元数据\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              242,
              867
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    mode: 'ai-driven',\n                    workflowId,",
            "lines": [
              243,
              868
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "tokensReduced: '预计46%令牌消耗',\n                    aiAnalysisTemplate: 'module-documentation-analysis.md',\n                    aiDocumentTemplate: 'module-documentation-generation.md'",
            "lines": [
              836,
              877
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisTemplate: 'module-documentation-analysis.md',\n                    aiDocumentTemplate: 'module-documentation-generation.md'\n                }",
            "lines": [
              837,
              878
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiDocumentTemplate: 'module-documentation-generation.md'\n                }\n            };",
            "lines": [
              838,
              879
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n            console.error('[ModulesGeneration] 模块文档生成失败:', err);",
            "lines": [
              889,
              890
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为失败\n            if (req.body.workflowId) {",
            "lines": [
              267,
              892
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n            \n            return error(res, err.message, 500, {",
            "lines": [
              271,
              896
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                featureId,",
            "lines": [
              117,
              910
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "language = 'javascript',\n                workflowId\n            } = req.body;",
            "lines": [
              726,
              915
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const aiAnalysisPackage = {\n                // 项目数据\n                projectData: {",
            "lines": [
              136,
              928
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 项目数据\n                projectData: {\n                    featureId,",
            "lines": [
              137,
              929
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "language,\n                    analysisDate: new Date().toISOString()\n                },",
            "lines": [
              745,
              934
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysisDate: new Date().toISOString()\n                },",
            "lines": [
              144,
              935
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 元数据\n                metadata: {\n                    workflowId,",
            "lines": [
              155,
              946
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    workflowId,\n                    mode: 'create',",
            "lines": [
              156,
              947
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              161,
              952
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "]\n                },\n                workflowIntegration: {",
            "lines": [
              416,
              1025
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString(),\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              208,
              1036
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const contractsResult = mockContractsResult;",
            "lines": [
              1044,
              1045
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为已完成\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              220,
              1048
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              93,
              1049
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisPackage // 包含AI分析数据包\n                    });\n                }",
            "lines": [
              226,
              1054
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n            \n            const executionTime = Date.now() - startTime;",
            "lines": [
              229,
              1057
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n            \n            // AI驱动架构响应数据",
            "lines": [
              231,
              1059
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI驱动架构响应数据\n            const responseData = {\n                // AI分析数据包 (提供给AI使用)",
            "lines": [
              233,
              1061
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const responseData = {\n                // AI分析数据包 (提供给AI使用)\n                aiAnalysisPackage,",
            "lines": [
              234,
              1062
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI分析数据包 (提供给AI使用)\n                aiAnalysisPackage,",
            "lines": [
              235,
              1063
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisPackage,\n                \n                // 模拟分析结果 (实际由AI生成)",
            "lines": [
              236,
              1064
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI元数据\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              242,
              1070
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    mode: 'ai-driven',\n                    workflowId,",
            "lines": [
              243,
              1071
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "tokensReduced: '预计50%令牌消耗',\n                    aiAnalysisTemplate: 'integration-contracts-update-analysis.md',\n                    aiDocumentTemplate: 'integration-contracts-update-generation.md'",
            "lines": [
              1039,
              1080
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisTemplate: 'integration-contracts-update-analysis.md',\n                    aiDocumentTemplate: 'integration-contracts-update-generation.md'\n                }",
            "lines": [
              1040,
              1081
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiDocumentTemplate: 'integration-contracts-update-generation.md'\n                }\n            };",
            "lines": [
              1041,
              1082
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n            console.error('[ContractsUpdate] 集成契约更新失败:', err);",
            "lines": [
              1093,
              1094
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为失败\n            if (req.body.workflowId) {",
            "lines": [
              267,
              1096
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n            \n            return error(res, err.message, 500, {",
            "lines": [
              271,
              1100
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { featureId } = req.params;\n            const { workflowId } = req.query;",
            "lines": [
              285,
              1114
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { featureId } = req.params;\n            const { workflowId } = req.query;",
            "lines": [
              286,
              1115
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { workflowId } = req.query;\n            \n            if (!featureId) {",
            "lines": [
              287,
              1116
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!featureId) {\n                return error(res, '功能ID不能为空', 400);",
            "lines": [
              288,
              1117
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!featureId) {\n                return error(res, '功能ID不能为空', 400);\n            }",
            "lines": [
              289,
              1118
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              294,
              1123
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {",
            "lines": [
              295,
              1124
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {\n                    return error(res, `工作流不存在: ${workflowId}`, 404);",
            "lines": [
              296,
              1125
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                    return error(res, `工作流不存在: ${workflowId}`, 404);\n                }",
            "lines": [
              297,
              1126
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成详细架构报告\n            const report = _generateArchitectureReport(archResult);",
            "lines": [
              1135,
              1136
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              314,
              1143
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { featureId } = req.params;\n            const { workflowId } = req.query;",
            "lines": [
              285,
              1152
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { featureId } = req.params;\n            const { workflowId } = req.query;",
            "lines": [
              286,
              1153
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { workflowId } = req.query;\n            \n            if (!featureId) {",
            "lines": [
              287,
              1154
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!featureId) {\n                return error(res, '功能ID不能为空', 400);",
            "lines": [
              288,
              1155
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!featureId) {\n                return error(res, '功能ID不能为空', 400);\n            }",
            "lines": [
              289,
              1156
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              294,
              1161
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {",
            "lines": [
              295,
              1162
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {\n                    return error(res, `工作流不存在: ${workflowId}`, 404);",
            "lines": [
              296,
              1163
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                    return error(res, `工作流不存在: ${workflowId}`, 404);\n                }",
            "lines": [
              297,
              1164
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成详细模块报告\n            const report = _generateModulesReport(modulesResult);",
            "lines": [
              1173,
              1174
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              314,
              1181
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { featureId } = req.params;\n            const { workflowId } = req.query;",
            "lines": [
              285,
              1190
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { featureId } = req.params;\n            const { workflowId } = req.query;",
            "lines": [
              286,
              1191
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { workflowId } = req.query;\n            \n            if (!featureId) {",
            "lines": [
              287,
              1192
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!featureId) {\n                return error(res, '功能ID不能为空', 400);",
            "lines": [
              288,
              1193
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!featureId) {\n                return error(res, '功能ID不能为空', 400);\n            }",
            "lines": [
              289,
              1194
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              294,
              1199
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {",
            "lines": [
              295,
              1200
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {\n                    return error(res, `工作流不存在: ${workflowId}`, 404);",
            "lines": [
              296,
              1201
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                    return error(res, `工作流不存在: ${workflowId}`, 404);\n                }",
            "lines": [
              297,
              1202
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成详细契约报告\n            const report = _generateContractsReport(contractsResult);",
            "lines": [
              1211,
              1212
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              314,
              1219
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 规范化用户故事格式\n                normalizedStories: _normalizeUserStories(userStories),",
            "lines": [
              1252,
              1253
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 故事优先级排序\n                prioritizedStories: _prioritizeUserStories(userStories),",
            "lines": [
              1263,
              1264
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 史诗分组\n                epics: _groupIntoEpics(userStories),",
            "lines": [
              1266,
              1267
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              72,
              1272
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              74,
              1274
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              92,
              1293
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              93,
              1294
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              102,
              1303
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              30,
              1325
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成任务分解\n                tasks: await _generateTaskBreakdown(featureName, requirements, complexity),",
            "lines": [
              1350,
              1351
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 估算时间和资源\n                estimation: _generateEstimation(requirements, complexity),",
            "lines": [
              1353,
              1354
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 技术方案\n                technicalDesign: await _generateTechnicalDesign(featureName, requirements, language, promptService),",
            "lines": [
              1356,
              1357
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 里程碑规划\n                milestones: _generateMilestones(featureName, requirements),",
            "lines": [
              1359,
              1360
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              72,
              1365
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              74,
              1367
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              92,
              1385
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              93,
              1386
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              102,
              1395
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                featureName,",
            "lines": [
              1318,
              1410
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              30,
              1416
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} = req.body;\n            \n            if (!featureName) {",
            "lines": [
              1327,
              1418
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!featureName) {\n                return error(res, '功能名称不能为空', 400);",
            "lines": [
              1328,
              1419
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!featureName) {\n                return error(res, '功能名称不能为空', 400);\n            }",
            "lines": [
              1329,
              1420
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "language,\n                created: new Date().toISOString(),",
            "lines": [
              1348,
              1431
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 数据模型\n                dataModel: _generateDataModel(dataFlow, language),",
            "lines": [
              1441,
              1442
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 集成方案\n                integrations: _generateIntegrationDesign(integrations),",
            "lines": [
              1444,
              1445
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 部署架构\n                deployment: _generateDeploymentArchitecture(featureName),",
            "lines": [
              1447,
              1448
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              72,
              1453
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              74,
              1455
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              92,
              1471
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              93,
              1472
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              102,
              1481
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                featureName,",
            "lines": [
              1318,
              1496
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              30,
              1501
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} = req.body;\n            \n            if (!featureName) {",
            "lines": [
              1327,
              1503
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!featureName) {\n                return error(res, '功能名称不能为空', 400);",
            "lines": [
              1328,
              1504
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!featureName) {\n                return error(res, '功能名称不能为空', 400);\n            }",
            "lines": [
              1329,
              1505
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "feature: featureName,\n                language,\n                created: new Date().toISOString(),",
            "lines": [
              1430,
              1515
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "language,\n                created: new Date().toISOString(),",
            "lines": [
              1348,
              1516
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 原型组件\n                components: await _generatePrototypeComponents(featureName, language, promptService),",
            "lines": [
              1518,
              1519
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 模拟数据\n                mockData: _generateMockData(mockData, userFlows),",
            "lines": [
              1521,
              1522
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 用户流程\n                userFlows: _generateUserFlowPrototypes(userFlows, language),",
            "lines": [
              1524,
              1525
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 交互原型\n                interactions: _generateInteractionPrototypes(userFlows),",
            "lines": [
              1527,
              1528
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              72,
              1533
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              74,
              1535
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              92,
              1552
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              93,
              1553
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              102,
              1562
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const additionalHours = requirements.length * (complexity === 'high' ? 8 : complexity === 'medium' ? 4 : 2);\n    const totalHours = baseHours[complexity] + additionalHours;",
            "lines": [
              1666,
              1667
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "components: _generateTechnicalComponents(featureName, language),\n            dataFlow: _generateTechnicalDataFlow(requirements),\n            apis: _generateTechnicalAPIs(featureName, requirements),",
            "lines": [
              1712,
              1722
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "dataFlow: _generateTechnicalDataFlow(requirements),\n            apis: _generateTechnicalAPIs(featureName, requirements),\n            database: _generateDatabaseDesign(featureName, requirements),",
            "lines": [
              1713,
              1723
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "apis: _generateTechnicalAPIs(featureName, requirements),\n            database: _generateDatabaseDesign(featureName, requirements),\n            security: _generateSecurityConsiderations(requirements),",
            "lines": [
              1714,
              1724
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "database: _generateDatabaseDesign(featureName, requirements),\n            security: _generateSecurityConsiderations(requirements),\n            performance: _generatePerformanceConsiderations(requirements)",
            "lines": [
              1715,
              1725
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "security: _generateSecurityConsiderations(requirements),\n            performance: _generatePerformanceConsiderations(requirements)\n        };",
            "lines": [
              1716,
              1726
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "},\n        {\n            endpoint: `/${featureName.toLowerCase()}/:id`,",
            "lines": [
              1908,
              1913
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _suggestDesignPatterns(components, integrations) {\n    const patterns = ['Repository Pattern', 'Service Layer Pattern'];",
            "lines": [
              2038,
              2039
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n        const template = await unifiedTemplateService.getTemplateByContext({\n            mode: 'create',",
            "lines": [
              1694,
              2090
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "language\n        }, {\n            category: 'document-templates',",
            "lines": [
              1699,
              2095
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "score: 0,\n            issues: [],\n            suggestions: []",
            "lines": [
              2285,
              2290
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "score: 0,\n            issues: [],\n            suggestions: []",
            "lines": [
              2285,
              2295
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "score: 0,\n            issues: [],\n            suggestions: []",
            "lines": [
              2285,
              2300
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 复杂度可行性\n    analysis.factors.complexity.score = Math.max(60, 100 - requirements.length * 5);",
            "lines": [
              2433,
              2434
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "requirements.forEach((req, index) => {\n        const requirement = typeof req === 'string' ? req : req.description;",
            "lines": [
              2482,
              2483
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n        const template = await unifiedTemplateService.getTemplateByContext({\n            mode: 'create',",
            "lines": [
              1694,
              2785
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _estimateStoryPoints(description) {\n    if (!description) return 3;",
            "lines": [
              2926,
              2927
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _identifyEpic(requirement) {\n    const req = typeof requirement === 'string' ? requirement : requirement.description || '';",
            "lines": [
              2958,
              2959
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "requirements.forEach(req => {\n        const requirement = typeof req === 'string' ? req : req.description || '';",
            "lines": [
              2974,
              2975
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return Math.min(1.0, complexityScore / totalRequirements);\n}",
            "lines": [
              2984,
              2985
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _assessBusinessValue(requirement, businessGoals) {\n    const req = typeof requirement === 'string' ? requirement : requirement.description || '';",
            "lines": [
              2987,
              2988
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _assessImplementationEffort(requirement) {\n    const req = typeof requirement === 'string' ? requirement : requirement.description || '';",
            "lines": [
              3007,
              3008
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const highEffortKeywords = ['集成', '算法', '复杂', '多个'];\n    const lowEffortKeywords = ['简单', '基础', '标准'];",
            "lines": [
              3010,
              3011
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _assessRiskLevel(requirement) {\n    const req = typeof requirement === 'string' ? requirement : requirement.description || '';",
            "lines": [
              3018,
              3019
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const highRiskKeywords = ['新技术', '第三方', '复杂', '未知'];\n    const lowRiskKeywords = ['标准', '成熟', '简单'];",
            "lines": [
              3021,
              3022
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _generateImplementationSequence(groups) {\n    const sequence = [];",
            "lines": [
              3029,
              3030
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 集成指南\n        integrationGuide: modulesResult.moduleDocumentation.integrationGuide || {},",
            "lines": [
              3132,
              3133
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 风险评估\n        riskAssessment: todoResult.taskBreakdown.riskAssessment,",
            "lines": [
              3288,
              3289
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createFeatureRoutes",
            "line": 14,
            "length": 1560,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_generateTaskBreakdown",
            "line": 1582,
            "length": 71,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_validateRequirements",
            "line": 2282,
            "length": 75,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_analyzeFeasibility",
            "line": 2395,
            "length": 57,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_identifyRequirementRisks",
            "line": 2535,
            "length": 51,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_generateRequirementsRecommendations",
            "line": 2592,
            "length": 63,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_generateArchitectureReport",
            "line": 3056,
            "length": 51,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_generateContractsReport",
            "line": 3167,
            "length": 81,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_generateTodoReport",
            "line": 3254,
            "length": 63,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_generateTechDesignReport",
            "line": 3323,
            "length": 54,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 7,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/fix/fixes.js",
      "size": 63083,
      "lines": {
        "total": 1776,
        "code": 1340,
        "comments": 235,
        "blank": 209
      },
      "functions": 15,
      "classes": 0,
      "complexity": {
        "cyclomatic": 58707,
        "cognitive": 616,
        "nestingDepth": 7
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 应用修复\n            const applyResult = await _applyFixChanges(fixCode, files, language, promptService);",
            "lines": [
              70,
              71
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                issueId,",
            "lines": [
              23,
              144
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} = req.body;\n            \n            if (!issueId) {",
            "lines": [
              32,
              151
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);",
            "lines": [
              33,
              152
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);\n            }",
            "lines": [
              34,
              153
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const startTime = Date.now();\n\n            // 获取问题信息",
            "lines": [
              44,
              159
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取问题信息\n            const issue = _getIssueById(issueId);",
            "lines": [
              45,
              160
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取问题信息\n            const issue = _getIssueById(issueId);\n            if (!issue) {",
            "lines": [
              46,
              161
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const issue = _getIssueById(issueId);\n            if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);",
            "lines": [
              47,
              162
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              48,
              163
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              49,
              164
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "issue.updatedAt = new Date().toISOString();\n\n            // 如果有工作流ID，更新工作流状态",
            "lines": [
              116,
              214
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              118,
              216
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              119,
              217
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              128,
              226
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "issueId: req.body.issueId\n            });\n        }",
            "lines": [
              134,
              232
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                issueId,",
            "lines": [
              23,
              242
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} = req.body;\n            \n            if (!issueId) {",
            "lines": [
              32,
              248
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);",
            "lines": [
              33,
              249
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);\n            }",
            "lines": [
              34,
              250
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const startTime = Date.now();\n\n            // 获取问题信息",
            "lines": [
              44,
              256
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取问题信息\n            const issue = _getIssueById(issueId);",
            "lines": [
              45,
              257
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取问题信息\n            const issue = _getIssueById(issueId);\n            if (!issue) {",
            "lines": [
              46,
              258
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const issue = _getIssueById(issueId);\n            if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);",
            "lines": [
              47,
              259
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              48,
              260
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              49,
              261
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ");\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              178,
              274
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "issue.updatedAt = new Date().toISOString();\n\n            // 如果有工作流ID，更新工作流状态",
            "lines": [
              116,
              318
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              118,
              320
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              119,
              321
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              128,
              330
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "issueId: req.body.issueId\n            });\n        }",
            "lines": [
              134,
              336
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);",
            "lines": [
              33,
              348
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);\n            }",
            "lines": [
              34,
              349
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const issue = _getIssueById(issueId);\n            if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);",
            "lines": [
              47,
              355
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              48,
              356
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              49,
              357
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 构建修复历史\n            const history = _buildFixHistory(issue);",
            "lines": [
              359,
              360
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              128,
              375
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                issueId,",
            "lines": [
              23,
              388
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} = req.body;\n            \n            if (!issueId) {",
            "lines": [
              32,
              394
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);",
            "lines": [
              33,
              395
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);\n            }",
            "lines": [
              34,
              396
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const issue = _getIssueById(issueId);\n            if (!issue) {",
            "lines": [
              354,
              401
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const issue = _getIssueById(issueId);\n            if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);",
            "lines": [
              47,
              402
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              48,
              403
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              49,
              404
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成补丁文件\n            const patch = await _generatePatch(issue.fix, format, includeTests);",
            "lines": [
              410,
              411
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              118,
              435
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              119,
              436
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              128,
              443
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              379,
              447
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "* @param {string} fixCode - 修复代码\n * @param {Array} files - 文件列表\n * @param {string} language - 编程语言",
            "lines": [
              475,
              538
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "verificationResult.testDetails.push(testResult);\n    }",
            "lines": [
              721,
              722
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "verificationResult.success = false;\n        }\n    }",
            "lines": [
              734,
              745
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return history.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n}",
            "lines": [
              875,
              876
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const solutionResult = mockSolutionResult;",
            "lines": [
              1168,
              1169
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const solutionResult = workflow.results.step_4;\n            let solution;",
            "lines": [
              1235,
              1236
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              379,
              1275
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                workflowId,",
            "lines": [
              1005,
              1284
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { \n                workflowId,\n                issueId,",
            "lines": [
              1006,
              1285
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} = req.body;\n            \n            if (!workflowId && !issueId) {",
            "lines": [
              1012,
              1292
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId && !issueId) {\n                return error(res, '工作流ID或问题ID不能为空', 400);",
            "lines": [
              1013,
              1293
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId && !issueId) {\n                return error(res, '工作流ID或问题ID不能为空', 400);\n            }",
            "lines": [
              1014,
              1294
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, '工作流ID或问题ID不能为空', 400);\n            }",
            "lines": [
              1015,
              1295
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "impactAssessment: workflowId ? 'step_3_results' : null\n                },",
            "lines": [
              1038,
              1318
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 元数据\n                metadata: {\n                    workflowId,",
            "lines": [
              1049,
              1329
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    workflowId,\n                    mode: 'fix',",
            "lines": [
              1050,
              1330
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              1054,
              1334
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysisDuration: Date.now() - startTime,\n                timestamp: new Date().toISOString(),\n                metadata: {",
            "lines": [
              1160,
              1400
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString(),\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              1161,
              1401
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const executionResult = mockExecutionResult;",
            "lines": [
              1408,
              1409
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新工作流状态\n            if (workflowId) {\n                let workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              1172,
              1412
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                let workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {",
            "lines": [
              1173,
              1413
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "let workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {\n                    workflowService.createWorkflowWithId(workflowId, '/unknown', 'fix');",
            "lines": [
              1174,
              1414
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                    workflowService.createWorkflowWithId(workflowId, '/unknown', 'fix');\n                    workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              1175,
              1415
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowService.createWorkflowWithId(workflowId, '/unknown', 'fix');\n                    workflow = workflowService.getWorkflow(workflowId);\n                }",
            "lines": [
              1176,
              1416
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflow = workflowService.getWorkflow(workflowId);\n                }\n                if (workflow) {",
            "lines": [
              1177,
              1417
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const responseData = {\n                // AI分析数据包\n                aiAnalysisPackage,",
            "lines": [
              1184,
              1424
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI元数据\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              1192,
              1432
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    mode: 'ai-driven',\n                    workflowId,",
            "lines": [
              1193,
              1433
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              1225,
              1464
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              1226,
              1465
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              379,
              1505
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                workflowId,",
            "lines": [
              1005,
              1514
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { \n                workflowId,\n                issueId,",
            "lines": [
              1006,
              1515
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} = req.body;\n            \n            if (!workflowId && !issueId) {",
            "lines": [
              1012,
              1521
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId && !issueId) {\n                return error(res, '工作流ID或问题ID不能为空', 400);",
            "lines": [
              1013,
              1522
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId && !issueId) {\n                return error(res, '工作流ID或问题ID不能为空', 400);\n            }",
            "lines": [
              1014,
              1523
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, '工作流ID或问题ID不能为空', 400);\n            }",
            "lines": [
              1015,
              1524
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 元数据\n                metadata: {\n                    workflowId,",
            "lines": [
              1049,
              1558
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    workflowId,\n                    mode: 'fix',",
            "lines": [
              1050,
              1559
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              1054,
              1563
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n                            ],\n                            backupCreated: true,",
            "lines": [
              1587,
              1603
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "},\n                        {\n                            file: 'src/auth/middleware.js',",
            "lines": [
              1351,
              1625
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysisDuration: Date.now() - startTime,\n                timestamp: new Date().toISOString(),\n                metadata: {",
            "lines": [
              1160,
              1658
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString(),\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              1161,
              1659
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const docsUpdateResult = mockDocsUpdateResult;",
            "lines": [
              1666,
              1667
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新工作流状态\n            if (workflowId) {\n                let workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              1172,
              1670
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                let workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {",
            "lines": [
              1173,
              1671
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "let workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {\n                    workflowService.createWorkflowWithId(workflowId, '/unknown', 'fix');",
            "lines": [
              1174,
              1672
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                    workflowService.createWorkflowWithId(workflowId, '/unknown', 'fix');\n                    workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              1175,
              1673
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowService.createWorkflowWithId(workflowId, '/unknown', 'fix');\n                    workflow = workflowService.getWorkflow(workflowId);\n                }",
            "lines": [
              1176,
              1674
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflow = workflowService.getWorkflow(workflowId);\n                }\n                if (workflow) {",
            "lines": [
              1177,
              1675
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const responseData = {\n                // AI分析数据包\n                aiAnalysisPackage,",
            "lines": [
              1184,
              1682
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI元数据\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              1192,
              1691
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    mode: 'ai-driven',\n                    workflowId,",
            "lines": [
              1193,
              1692
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              1225,
              1723
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              1226,
              1724
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              379,
              1769
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createFixesRoutes",
            "line": 14,
            "length": 1761,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_performFixVerification",
            "line": 686,
            "length": 65,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_generatePatch",
            "line": 903,
            "length": 55,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 7,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/fix/issues.js",
      "size": 53093,
      "lines": {
        "total": 1472,
        "code": 1100,
        "comments": 182,
        "blank": 194
      },
      "functions": 17,
      "classes": 0,
      "complexity": {
        "cyclomatic": 49446,
        "cognitive": 405,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 简单的内存存储，实际应用中应该使用数据库\n    const issues = new Map();",
            "lines": [
              17,
              18
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const startTime = Date.now();\n            const issueId = `ISSUE-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;",
            "lines": [
              48,
              49
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 自动分析\n                analysis: await _analyzeIssue(title, description, stackTrace, promptService),",
            "lines": [
              67,
              68
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 建议的标签\n                tags: _generateIssueTags(title, description, category, language),",
            "lines": [
              70,
              71
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 相似问题\n                similarIssues: _findSimilarIssues(title, description, issues),",
            "lines": [
              73,
              74
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 排序（按创建时间倒序）\n            filteredIssues.sort((a, b) => new Date(b.created) - new Date(a.created));",
            "lines": [
              154,
              155
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              112,
              179
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取问题历史记录\n            const history = _getIssueHistory(issue);",
            "lines": [
              205,
              206
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取相关文件\n            const relatedFiles = await _getRelatedFiles(issue, promptService);",
            "lines": [
              208,
              209
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              112,
              223
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              183,
              227
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);",
            "lines": [
              194,
              239
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);\n            }",
            "lines": [
              195,
              240
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const issue = issues.get(issueId);\n            if (!issue) {",
            "lines": [
              200,
              256
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const issue = issues.get(issueId);\n            if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);",
            "lines": [
              201,
              257
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              202,
              258
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              203,
              259
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              112,
              302
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              183,
              306
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);",
            "lines": [
              194,
              318
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);\n            }",
            "lines": [
              195,
              319
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const issue = issues.get(issueId);\n            if (!issue) {",
            "lines": [
              200,
              324
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const issue = issues.get(issueId);\n            if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);",
            "lines": [
              201,
              325
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              202,
              326
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              203,
              327
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 或者真正删除（根据业务需求）\n            // issues.delete(issueId);",
            "lines": [
              334,
              335
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              112,
              345
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              183,
              349
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "possibleCauses: _extractPossibleCauses(description, stackTrace),\n            affectedComponents: _extractAffectedComponents(description, stackTrace),\n            suggestedKeywords: _extractKeywords(title + ' ' + description),",
            "lines": [
              415,
              423
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "affectedComponents: _extractAffectedComponents(description, stackTrace),\n            suggestedKeywords: _extractKeywords(title + ' ' + description),\n            complexity: _assessComplexity(description, stackTrace)",
            "lines": [
              416,
              424
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "suggestedKeywords: _extractKeywords(title + ' ' + description),\n            complexity: _assessComplexity(description, stackTrace)\n        };",
            "lines": [
              417,
              425
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "for (const [id, issue] of issuesMap) {\n        if (issue.deleted) continue;",
            "lines": [
              473,
              474
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "* @param {string} title - 问题标题\n * @param {string} description - 问题描述\n * @param {string} stackTrace - 堆栈跟踪",
            "lines": [
              389,
              500
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "let totalResolutionTime = 0;\n    let resolvedCount = 0;",
            "lines": [
              590,
              591
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "allIssues.forEach(issue => {\n        if (issue.deleted) return;",
            "lines": [
              593,
              594
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 按状态统计\n        stats.byStatus[issue.status] = (stats.byStatus[issue.status] || 0) + 1;",
            "lines": [
              596,
              597
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 按严重程度统计\n        stats.bySeverity[issue.severity] = (stats.bySeverity[issue.severity] || 0) + 1;",
            "lines": [
              599,
              600
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 按类别统计\n        stats.byCategory[issue.category] = (stats.byCategory[issue.category] || 0) + 1;",
            "lines": [
              602,
              603
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 按语言统计\n        stats.byLanguage[issue.language] = (stats.byLanguage[issue.language] || 0) + 1;",
            "lines": [
              605,
              606
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return components.length > 0 ? components : ['未知组件'];\n}",
            "lines": [
              707,
              708
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _assessComplexity(description, stackTrace) {\n    let complexity = 1;",
            "lines": [
              719,
              720
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return causes[category]?.[language] || causes[category]?.default || causes.bug.default;\n}",
            "lines": [
              747,
              748
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return fixes[category]?.[language] || fixes[category]?.default || fixes.bug.default;\n}",
            "lines": [
              764,
              765
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              298,
              846
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const scopeResult = mockScopeResult;",
            "lines": [
              902,
              903
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              183,
              1004
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId && !issueId) {\n                return error(res, '工作流ID或问题ID不能为空', 400);",
            "lines": [
              959,
              1021
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId && !issueId) {\n                return error(res, '工作流ID或问题ID不能为空', 400);\n            }",
            "lines": [
              960,
              1022
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, '工作流ID或问题ID不能为空', 400);\n            }",
            "lines": [
              961,
              1023
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 元数据\n                metadata: {\n                    workflowId,",
            "lines": [
              841,
              1050
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    workflowId,\n                    mode: 'fix',",
            "lines": [
              842,
              1051
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              298,
              1055
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n                },\n                analysisMetrics: {",
            "lines": [
              885,
              1107
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysisDuration: Date.now() - startTime,\n                timestamp: new Date().toISOString(),\n                metadata: {",
            "lines": [
              894,
              1115
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString(),\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              895,
              1116
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const docsResult = mockDocsResult;",
            "lines": [
              1123,
              1124
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新工作流状态\n            if (workflowId) {\n                let workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              906,
              1127
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                let workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {",
            "lines": [
              907,
              1128
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflow = workflowService.getWorkflow(workflowId);\n                }\n                if (workflow) {",
            "lines": [
              912,
              1132
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI元数据\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              927,
              1147
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    mode: 'ai-driven',\n                    workflowId,",
            "lines": [
              928,
              1148
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const docsResult = workflow.results.step_2;\n            const threshold = parseFloat(relevanceThreshold);",
            "lines": [
              1189,
              1190
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              183,
              1217
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                workflowId,",
            "lines": [
              1013,
              1226
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { \n                workflowId,\n                issueId,",
            "lines": [
              1014,
              1227
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} = req.body;\n            \n            if (!workflowId && !issueId) {",
            "lines": [
              1020,
              1233
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId && !issueId) {\n                return error(res, '工作流ID或问题ID不能为空', 400);",
            "lines": [
              959,
              1234
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId && !issueId) {\n                return error(res, '工作流ID或问题ID不能为空', 400);\n            }",
            "lines": [
              960,
              1235
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, '工作流ID或问题ID不能为空', 400);\n            }",
            "lines": [
              961,
              1236
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 元数据\n                metadata: {\n                    workflowId,",
            "lines": [
              841,
              1269
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    workflowId,\n                    mode: 'fix',",
            "lines": [
              842,
              1270
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              298,
              1274
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysisDuration: Date.now() - startTime,\n                timestamp: new Date().toISOString(),\n                metadata: {",
            "lines": [
              894,
              1348
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString(),\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              895,
              1349
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const impactResult = mockImpactResult;",
            "lines": [
              1356,
              1357
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新工作流状态\n            if (workflowId) {\n                let workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              906,
              1360
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                let workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {",
            "lines": [
              907,
              1361
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "let workflow = workflowService.getWorkflow(workflowId);\n                if (!workflow) {\n                    workflowService.createWorkflowWithId(workflowId, '/unknown', 'fix');",
            "lines": [
              1129,
              1362
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                    workflowService.createWorkflowWithId(workflowId, '/unknown', 'fix');\n                    workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              1130,
              1363
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowService.createWorkflowWithId(workflowId, '/unknown', 'fix');\n                    workflow = workflowService.getWorkflow(workflowId);\n                }",
            "lines": [
              1131,
              1364
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflow = workflowService.getWorkflow(workflowId);\n                }\n                if (workflow) {",
            "lines": [
              912,
              1365
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const responseData = {\n                // AI分析数据包\n                aiAnalysisPackage,",
            "lines": [
              1139,
              1372
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI元数据\n                metadata: {\n                    mode: 'ai-driven',",
            "lines": [
              927,
              1381
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "metadata: {\n                    mode: 'ai-driven',\n                    workflowId,",
            "lines": [
              928,
              1382
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              1179,
              1413
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              1180,
              1414
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              183,
              1465
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createIssuesRoutes",
            "line": 14,
            "length": 1457,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/analyzers/enhanced-language-detector.js",
      "size": 39183,
      "lines": {
        "total": 1238,
        "code": 828,
        "comments": 251,
        "blank": 204
      },
      "functions": 52,
      "classes": 1,
      "complexity": {
        "cyclomatic": 36320,
        "cognitive": 169,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "console.log(`[EnhancedLanguageDetector] 开始增强语言检测: ${projectPath}`);\n    const startTime = Date.now();",
            "lines": [
              37,
              38
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 5. 生成下一步建议\n      finalResult.nextStepRecommendations = this.generateNextStepRecommendations(finalResult);",
            "lines": [
              64,
              65
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log(`[EnhancedLanguageDetector] 语言检测完成 (${Date.now() - startTime}ms)`);\n      return result;",
            "lines": [
              91,
              92
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 计算增强置信度\n    analysis.enhancedConfidence = this.calculateEnhancedConfidence(baseDetection, analysis);",
            "lines": [
              116,
              117
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const configs = step1Results.configs;\n    if (!configs) return configAnalysis;",
            "lines": [
              135,
              136
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const configs = step1Results.configs;\n    if (!configs?.byLanguage?.javascript) return depAnalysis;",
            "lines": [
              173,
              174
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "frameworkInference.detected = Array.from(normalizedFrameworks);\n    frameworkInference.ecosystem = this.determineEcosystem(frameworkInference.detected);",
            "lines": [
              240,
              241
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const structure = step1Results.structure;\n    if (!structure) return structureClues;",
            "lines": [
              268,
              269
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 分析目录结构模式\n    const directories = structure.directories || [];",
            "lines": [
              271,
              272
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// Python 项目模式深度识别\n    this.identifyPythonPatterns(directories, structure, structureClues);",
            "lines": [
              280,
              281
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const readme = step1Results.readme;\n    if (!readme?.found || !readme.analysis) return readmeAnalysis;",
            "lines": [
              310,
              311
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "calculateEnhancedConfidence(baseDetection, enhancedAnalysis) {\n    let confidence = baseDetection.confidence;",
            "lines": [
              476,
              477
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "calculateFrameworkConfidence(framework, step1Results, baseDetection) {\n    let confidence = 50; // 基础置信度",
            "lines": [
              531,
              532
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return files.sort((a, b) => this.getFileImportance(b) - this.getFileImportance(a));\n  }",
            "lines": [
              565,
              566
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// Python 语法特征\n    if (/def |class |if __name__/.test(content)) hints.push('python-syntax');",
            "lines": [
              621,
              622
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return recommendations[language] || recommendations.javascript;\n  }",
            "lines": [
              692,
              693
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "recommendTemplates(language, frameworks) {\n    const templates = [`${language}-architecture`, `${language}-modules`];",
            "lines": [
              717,
              718
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 多包管理器并存额外加分\n    if (packageManagers.length > 1) score += 5;",
            "lines": [
              869,
              870
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const features = detectionResult.codeInsights?.syntaxFeatures || [];\n    const frameworks = detectionResult.techStack.frameworks || [];",
            "lines": [
              910,
              911
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const hasTechStackHints = step1Results.analysis?.techStackHints?.length > 0;\n    if (hasTechStackHints) reliability += 30;",
            "lines": [
              967,
              968
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const frameworkCount = step1Results.analysis?.techStackHints?.length || 0;\n    depth += Math.min(25, frameworkCount * 25); // 框架检测得分",
            "lines": [
              975,
              976
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const structureDepth = step1Results.structure?.stats?.depth || 0;\n    depth += Math.min(20, structureDepth * 3); // 项目结构深度得分",
            "lines": [
              978,
              979
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "inferFrameworks",
            "line": 199,
            "length": 56,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "calculateOverallConfidence",
            "line": 731,
            "length": 57,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/services/ai-content-generator.js",
      "size": 39911,
      "lines": {
        "total": 1362,
        "code": 471,
        "comments": 561,
        "blank": 330
      },
      "functions": 64,
      "classes": 1,
      "complexity": {
        "cyclomatic": 33333,
        "cognitive": 558,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "### 生产依赖\n${this._formatDependencies(projectStructure?.package?.dependencies)}",
            "lines": [
              113,
              114
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 开发依赖  \n${this._formatDependencies(projectStructure?.package?.devDependencies)}",
            "lines": [
              116,
              117
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 核心服务\n${this._identifyServices(projectStructure)}",
            "lines": [
              205,
              206
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { projectStructure, languageData } = techData;\n        const pkg = projectStructure?.package || {};",
            "lines": [
              233,
              234
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 核心依赖 (${pkg.dependencyCount || 0}个)\n${this._formatDetailedDependencies(pkg.dependencies)}",
            "lines": [
              247,
              248
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 开发依赖 (${pkg.devDependencyCount || 0}个)  \n${this._formatDetailedDependencies(pkg.devDependencies)}",
            "lines": [
              250,
              251
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 服务层模块\n${this._generateServiceModules(detectedModules, projectStructure)}",
            "lines": [
              284,
              285
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 路由层模块\n${this._generateRouteModules(detectedModules, projectStructure)}",
            "lines": [
              287,
              288
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 工具层模块\n${this._generateUtilityModules(detectedModules, projectStructure)}",
            "lines": [
              290,
              291
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 配置模块\n${this._generateConfigModules(detectedModules, projectStructure)}",
            "lines": [
              293,
              294
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 主要方法\n${this._generateModuleMethods(codeAnalysis?.methods)}",
            "lines": [
              340,
              341
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 导出接口\n${this._generateModuleExports(codeAnalysis?.exports)}",
            "lines": [
              343,
              344
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 依赖关系\n${this._generateModuleDependencies(codeAnalysis?.dependencies)}",
            "lines": [
              346,
              347
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 系统级API\n${this._generateSystemAPIContracts(apiEndpoints?.system)}",
            "lines": [
              403,
              404
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 模式管理API\n${this._generateModeAPIContracts(apiEndpoints?.modes)}",
            "lines": [
              406,
              407
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 模块管理API\n${this._generateModuleAPIContracts(apiEndpoints?.modules)}",
            "lines": [
              409,
              410
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const indent = '  '.repeat(depth);\n        let result = '';",
            "lines": [
              474,
              475
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const deps = pkg.dependencies || [];\n        const features = [];",
            "lines": [
              502,
              503
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const files = projectStructure.structure.files;\n        const stats = {};",
            "lines": [
              552,
              553
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return deps.map(dep => `- \\`${dep}\\``).join('\\n');\n    }",
            "lines": [
              575,
              576
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "scriptAnalysis.push(`- \\`npm run ${name}\\`${description} → \\`${command}\\``);\n        });",
            "lines": [
              718,
              719
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n        \n        if (structure?.directories?.includes('tests')) {",
            "lines": [
              530,
              742
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "keyFiles.push(`- \\`${f.name}\\` - ${desc}`);\n        });",
            "lines": [
              837,
              838
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_analyzeDataFlow(projectStructure) { \n        return `系统采用标准的分层架构数据流:",
            "lines": [
              907,
              908
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "**生产依赖**: ${prodDeps} 个 - 运行时必需的核心库\n**开发依赖**: ${devDeps} 个 - 开发和测试工具",
            "lines": [
              926,
              927
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_analyzePerformance(techData) { \n        return `性能特性分析:",
            "lines": [
              994,
              995
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return serviceModules.map(module => `- **${module}**`).join('\\n');\n    }",
            "lines": [
              1023,
              1024
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return routeModules.map(module => `- **${module}**`).join('\\n');\n    }",
            "lines": [
              1036,
              1037
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return utilityModules.map(module => `- **${module}**`).join('\\n');\n    }",
            "lines": [
              1047,
              1048
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return configModules.map(module => `- **${module}**`).join('\\n');\n    }",
            "lines": [
              1058,
              1059
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_generateModuleDependencyGraph(detectedModules) {\n        return `模块依赖关系图:",
            "lines": [
              1061,
              1062
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_analyzeModuleResponsibilities(detectedModules) {\n        return `核心职责分析:",
            "lines": [
              1084,
              1085
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_suggestModuleExtensions(projectStructure) {\n        return `扩展建议:",
            "lines": [
              1095,
              1096
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return methods.map(method => `- \\`${method.name}()\\` - ${method.description || '核心方法'}`).join('\\n');\n    }",
            "lines": [
              1110,
              1111
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_analyzeModuleCodeQuality(codeAnalysis) {\n        return `代码质量评估:",
            "lines": [
              1121,
              1122
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_generateAPIReference(codeAnalysis) {\n        return `API接口参考:",
            "lines": [
              1135,
              1136
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_analyzeModuleTestCoverage(moduleName, moduleInfo) {\n        return `测试覆盖情况:",
            "lines": [
              1152,
              1153
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_suggestModuleImprovements(codeAnalysis) {\n        return `优化建议:",
            "lines": [
              1162,
              1163
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_generateRequestContracts() {\n        return `标准请求格式:",
            "lines": [
              1208,
              1209
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_generateResponseContracts() {\n        return `标准响应格式:",
            "lines": [
              1223,
              1224
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_generateErrorContracts() {\n        return `错误代码规范:",
            "lines": [
              1250,
              1251
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_generateModuleCommunicationContracts(modules) {\n        return `模块间通信规范:",
            "lines": [
              1261,
              1262
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_generateWebSocketContracts() {\n        return `WebSocket通信契约:",
            "lines": [
              1274,
              1275
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_generateSecurityContracts() {\n        return `安全规范:",
            "lines": [
              1296,
              1297
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_generateVersionCompatibilityContracts() {\n        return `版本兼容性:",
            "lines": [
              1312,
              1313
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_generatePerformanceContracts() {\n        return `性能契约:",
            "lines": [
              1327,
              1328
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_generateTestingContracts() {\n        return `测试契约:",
            "lines": [
              1344,
              1345
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "generateProjectOverview",
            "line": 26,
            "length": 63,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "generateModuleDetail",
            "line": 320,
            "length": 65,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "generateIntegrationContracts",
            "line": 391,
            "length": 63,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/routes/analyze/quality.js",
      "size": 34976,
      "lines": {
        "total": 1043,
        "code": 805,
        "comments": 132,
        "blank": 112
      },
      "functions": 12,
      "classes": 0,
      "complexity": {
        "cyclomatic": 32923,
        "cognitive": 253,
        "nestingDepth": 7
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                targetPath = '.',",
            "lines": [
              23,
              118
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              29,
              123
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              65,
              143
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              67,
              145
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              92,
              166
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              93,
              167
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              102,
              176
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                targetPath = '.',",
            "lines": [
              23,
              191
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              29,
              196
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              67,
              212
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "executionTime,\n                    timestamp: new Date().toISOString()\n                },",
            "lines": [
              153,
              221
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                },\n                summary: {",
            "lines": [
              80,
              222
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              92,
              234
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              93,
              235
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              102,
              244
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                targetPath = '.',",
            "lines": [
              23,
              259
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              29,
              264
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "language,\n                promptService\n            );",
            "lines": [
              45,
              275
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              65,
              287
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              67,
              289
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysis: {\n                    targetPath,\n                    language,",
            "lines": [
              149,
              293
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "executionTime,\n                    timestamp: new Date().toISOString()\n                },",
            "lines": [
              153,
              298
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                },\n                summary: {",
            "lines": [
              80,
              299
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              92,
              310
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              93,
              311
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              102,
              320
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                targetPath = '.',",
            "lines": [
              23,
              335
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { \n                targetPath = '.',\n                analysisDepth = 'standard',",
            "lines": [
              119,
              336
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "includeMetrics = true,\n                includeRecommendations = true,\n                workflowId,",
            "lines": [
              27,
              339
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "includeRecommendations = true,\n                workflowId,\n                language = 'javascript'",
            "lines": [
              28,
              340
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              29,
              341
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} = req.body;\n            \n            if (!targetPath) {",
            "lines": [
              31,
              343
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!targetPath) {\n                return error(res, '分析目标路径不能为空', 400);",
            "lines": [
              32,
              344
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!targetPath) {\n                return error(res, '分析目标路径不能为空', 400);\n            }",
            "lines": [
              33,
              345
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, '分析目标路径不能为空', 400);\n            }",
            "lines": [
              34,
              346
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              375,
              443
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              472,
              540
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "},\n            {\n                file: 'src/utils.js',",
            "lines": [
              635,
              846
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "impact: 'maintainability'\n            },\n            {",
            "lines": [
              898,
              907
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return factors > 0 ? Math.round(score / factors) : 0;\n}",
            "lines": [
              1026,
              1027
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createQualityRoutes",
            "line": 14,
            "length": 532,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_performQualityAnalysis",
            "line": 555,
            "length": 62,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_generateQualityRecommendations",
            "line": 682,
            "length": 53,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 7,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/services/unified-template-service.js",
      "size": 33168,
      "lines": {
        "total": 908,
        "code": 662,
        "comments": 151,
        "blank": 114
      },
      "functions": 31,
      "classes": 1,
      "complexity": {
        "cyclomatic": 30694,
        "cognitive": 218,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);",
            "lines": [
              13,
              14
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 3. 执行智能模板选择\n            const result = await this.executeIntelligentTemplateSelection(contextData, templateRequest);",
            "lines": [
              114,
              115
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 4. 缓存结果\n            this.setCacheItem(cacheKey, result);",
            "lines": [
              117,
              118
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "result.responseTime = Date.now() - startTime;\n            result.fromCache = false;",
            "lines": [
              120,
              121
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 计算上下文置信度分数\n        const contextConfidence = this._calculateContextConfidence(contextData, templateRequest);",
            "lines": [
              170,
              171
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 记录性能指标\n        this._recordSelectionMetrics(selectionStrategy, contextConfidence);",
            "lines": [
              177,
              178
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// Process template with variables\n            const processedContent = this.templateReader.processTemplate(templateData.content, variables);",
            "lines": [
              256,
              257
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "formatContextualPromptsAsTemplate(contextualPrompts) {\n        let content = '# 上下文感知模板\\n\\n';",
            "lines": [
              472,
              473
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "formatLanguagePromptsAsTemplate(prompts) {\n        let content = '# 语言特定模板\\n\\n';",
            "lines": [
              498,
              499
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "getDefaultTemplate(variables = {}) {\n        return `# 默认模板",
            "lines": [
              515,
              516
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "generateSuggestions(template, contextData) {\n        const suggestions = [];",
            "lines": [
              561,
              562
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "let high = 0, medium = 0, low = 0;\n        const thresholds = this.intelligenceConfig.confidenceThresholds;",
            "lines": [
              848,
              849
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "constructor",
            "line": 18,
            "length": 71,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "executeIntelligentTemplateSelection",
            "line": 134,
            "length": 111,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Middleware"
      ]
    },
    {
      "path": "server/analyzers/file-content-analyzer.js",
      "size": 31072,
      "lines": {
        "total": 994,
        "code": 684,
        "comments": 174,
        "blank": 144
      },
      "functions": 43,
      "classes": 1,
      "complexity": {
        "cyclomatic": 29418,
        "cognitive": 477,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import { promises as fs } from 'fs';\nimport path from 'path';",
            "lines": [
              11,
              12
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n      console.log('[FileContentAnalyzer] 开始文件内容分析');",
            "lines": [
              40,
              41
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 并行分析文件内容\n      const fileAnalysisResults = await this._analyzeFilesParallel(filesToAnalyze);",
            "lines": [
              60,
              61
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成综合分析报告\n      const analysisReport = this._generateAnalysisReport(fileAnalysisResults, languageData);",
            "lines": [
              63,
              64
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log(`[FileContentAnalyzer] 文件内容分析完成 (${result.analysis.analysisTime}ms)`);\n      return result;",
            "lines": [
              86,
              87
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 按优先级排序\n    selectedFiles.sort((a, b) => b.priority - a.priority);",
            "lines": [
              240,
              241
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return selectedFiles.slice(0, this.options.maxFilesToAnalyze);\n  }",
            "lines": [
              243,
              244
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 读取文件内容\n      const content = await fs.readFile(fileInfo.fullPath, 'utf8');",
            "lines": [
              371,
              372
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 分析文件内容\n      const analysis = await this._performContentAnalysis(content, fileInfo);",
            "lines": [
              374,
              375
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 缓存结果\n      this.analysisCache.set(cacheKey, result);",
            "lines": [
              388,
              389
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (match) dependencies.add(match[1]);\n        });\n      }",
            "lines": [
              517,
              528
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "lines.forEach(line => {\n      const trimmed = line.trim();",
            "lines": [
              481,
              618
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_calculateFilePriority(file, category, languageData) {\n    let priority = 0;",
            "lines": [
              717,
              718
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "scores[file.relativePath] = Math.min(score, 1000); // 最高1000分\n    });",
            "lines": [
              855,
              856
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "analyzeFiles",
            "line": 38,
            "length": 62,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_flattenFileStructure",
            "line": 130,
            "length": 64,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_analyzeFileContent",
            "line": 345,
            "length": 58,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_extractFunctions",
            "line": 570,
            "length": 425,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_generateRecommendations",
            "line": 865,
            "length": 51,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/routes/analyze/security.js",
      "size": 30965,
      "lines": {
        "total": 906,
        "code": 703,
        "comments": 102,
        "blank": 101
      },
      "functions": 9,
      "classes": 0,
      "complexity": {
        "cyclomatic": 28581,
        "cognitive": 214,
        "nestingDepth": 7
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                targetPath = '.',",
            "lines": [
              23,
              98
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              28,
              102
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              52,
              117
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "executionTime,\n                    timestamp: new Date().toISOString()\n                },",
            "lines": [
              61,
              125
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              73,
              135
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              74,
              136
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              83,
              145
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                targetPath = '.',",
            "lines": [
              23,
              158
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              28,
              162
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ");\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              115,
              175
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              52,
              177
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysis: {\n                    targetPath,\n                    language,",
            "lines": [
              56,
              181
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "executionTime,\n                    timestamp: new Date().toISOString()\n                },",
            "lines": [
              61,
              185
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              73,
              196
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              74,
              197
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              83,
              206
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              149,
              210
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                targetPath = '.',",
            "lines": [
              23,
              219
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 收集所有安全分析数据\n            const securityData = await _collectSecurityData(targetPath);",
            "lines": [
              230,
              231
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ");\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              115,
              240
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              52,
              242
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              73,
              255
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              74,
              256
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              149,
              279
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                targetPath = '.',",
            "lines": [
              23,
              288
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              28,
              295
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              251,
              330
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              251,
              402
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              149,
              431
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              149,
              491
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createSecurityRoutes",
            "line": 14,
            "length": 483,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_performSecurityAnalysis",
            "line": 506,
            "length": 86,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_analyzeSecurityConfiguration",
            "line": 697,
            "length": 54,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_generateSecurityReport",
            "line": 775,
            "length": 70,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 7,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/fix/diagnosis.js",
      "size": 29713,
      "lines": {
        "total": 929,
        "code": 723,
        "comments": 81,
        "blank": 125
      },
      "functions": 50,
      "classes": 0,
      "complexity": {
        "cyclomatic": 27894,
        "cognitive": 215,
        "nestingDepth": 7
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 执行诊断分析\n            const diagnosis = await _performDiagnosis(issue, context, language, promptService);",
            "lines": [
              46,
              47
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成修复建议\n            diagnosis.fixSuggestions = await _generateFixSuggestions(issue, diagnosis, promptService);",
            "lines": [
              59,
              60
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              29,
              113
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const diagnosis = await _performDiagnosis(issue, context, language, promptService);\n                    const fixSuggestions = await _generateFixSuggestions(issue, diagnosis, promptService);",
            "lines": [
              135,
              136
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              63,
              156
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              83,
              179
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              84,
              180
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              93,
              189
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);",
            "lines": [
              32,
              207
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);\n            }",
            "lines": [
              33,
              208
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const issue = _getIssueById(issueId);\n            if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);",
            "lines": [
              42,
              214
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              43,
              215
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              44,
              216
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              29,
              259
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} = req.body;\n            \n            if (!issueId) {",
            "lines": [
              31,
              261
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);",
            "lines": [
              32,
              262
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issueId) {\n                return error(res, '问题ID不能为空', 400);\n            }",
            "lines": [
              33,
              263
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const issue = _getIssueById(issueId);\n            if (!issue) {",
            "lines": [
              213,
              268
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const issue = _getIssueById(issueId);\n            if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);",
            "lines": [
              42,
              269
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!issue) {\n                return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              43,
              270
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, `问题不存在: ${issueId}`, 404);\n            }",
            "lines": [
              44,
              271
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 保存旧的诊断结果\n            const oldDiagnosis = issue.diagnosis;",
            "lines": [
              275,
              276
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 比较新旧诊断结果\n            const comparison = _compareDiagnoses(oldDiagnosis, newDiagnosis);",
            "lines": [
              282,
              283
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              63,
              286
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "},\n                analysis: {\n                    executionTime,",
            "lines": [
              165,
              296
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              83,
              313
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              84,
              314
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              93,
              323
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              245,
              327
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "rootCause: await _identifyRootCause(issue, context),\n            affectedComponents: _identifyAffectedComponents(issue),\n            impactAssessment: _assessImpact(issue, context),",
            "lines": [
              383,
              397
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "affectedComponents: _identifyAffectedComponents(issue),\n            impactAssessment: _assessImpact(issue, context),\n            reproductionSteps: _generateReproductionSteps(issue, context),",
            "lines": [
              384,
              398
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "impactAssessment: _assessImpact(issue, context),\n            reproductionSteps: _generateReproductionSteps(issue, context),\n            environmentFactors: _analyzeEnvironmentFactors(issue, context),",
            "lines": [
              385,
              399
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "reproductionSteps: _generateReproductionSteps(issue, context),\n            environmentFactors: _analyzeEnvironmentFactors(issue, context),\n            codePathAnalysis: _analyzeCodePath(issue),",
            "lines": [
              386,
              400
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "environmentFactors: _analyzeEnvironmentFactors(issue, context),\n            codePathAnalysis: _analyzeCodePath(issue),\n            similarIssuesAnalysis: _analyzeSimilarIssues(issue),",
            "lines": [
              387,
              401
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "codePathAnalysis: _analyzeCodePath(issue),\n            similarIssuesAnalysis: _analyzeSimilarIssues(issue),\n            riskAssessment: _assessRisk(issue),",
            "lines": [
              388,
              402
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return {\n            quickFixes: _generateQuickFixes(issue, diagnosis),\n            comprehensiveFixes: _generateComprehensiveFixes(issue, diagnosis),",
            "lines": [
              474,
              491
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "quickFixes: _generateQuickFixes(issue, diagnosis),\n            comprehensiveFixes: _generateComprehensiveFixes(issue, diagnosis),\n            preventiveMeasures: _generatePreventiveMeasures(issue, diagnosis),",
            "lines": [
              475,
              492
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "comprehensiveFixes: _generateComprehensiveFixes(issue, diagnosis),\n            preventiveMeasures: _generatePreventiveMeasures(issue, diagnosis),\n            testingStrategy: _generateTestingStrategy(issue, diagnosis),",
            "lines": [
              476,
              493
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "preventiveMeasures: _generatePreventiveMeasures(issue, diagnosis),\n            testingStrategy: _generateTestingStrategy(issue, diagnosis),\n            implementation: {",
            "lines": [
              477,
              494
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "testingStrategy: _generateTestingStrategy(issue, diagnosis),\n            implementation: {\n                steps: _generateImplementationSteps(issue, diagnosis),",
            "lines": [
              478,
              495
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "implementation: {\n                steps: _generateImplementationSteps(issue, diagnosis),\n                codeChanges: _generateCodeChanges(issue, diagnosis),",
            "lines": [
              479,
              496
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "steps: _generateImplementationSteps(issue, diagnosis),\n                codeChanges: _generateCodeChanges(issue, diagnosis),\n                configChanges: _generateConfigChanges(issue, diagnosis)",
            "lines": [
              480,
              497
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "codeChanges: _generateCodeChanges(issue, diagnosis),\n                configChanges: _generateConfigChanges(issue, diagnosis)\n            },",
            "lines": [
              481,
              498
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "configChanges: _generateConfigChanges(issue, diagnosis)\n            },\n            verification: {",
            "lines": [
              482,
              499
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "},\n            verification: {\n                testCases: _generateTestCases(issue, diagnosis),",
            "lines": [
              483,
              500
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "verification: {\n                testCases: _generateTestCases(issue, diagnosis),\n                validationSteps: _generateValidationSteps(issue, diagnosis)",
            "lines": [
              484,
              501
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "testCases: _generateTestCases(issue, diagnosis),\n                validationSteps: _generateValidationSteps(issue, diagnosis)\n            },",
            "lines": [
              485,
              502
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _calculateDiagnosisConfidence(diagnosis) {\n    let confidence = 0.5;",
            "lines": [
              605,
              606
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _getNextSteps(diagnosis) {\n    const steps = [];",
            "lines": [
              624,
              625
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _estimateFixTime(diagnosis) {\n    const complexity = diagnosis.complexityAnalysis?.level || 'medium';",
            "lines": [
              650,
              651
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return timeEstimates[complexity] || timeEstimates.medium;\n}",
            "lines": [
              660,
              661
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _getRequiredSkills(diagnosis, language) {\n    const skills = [language];",
            "lines": [
              663,
              664
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "async function _generateDiagnosisReport(issue, diagnosis, promptService) {\n    const markdown = `# 诊断报告：${issue.title}",
            "lines": [
              858,
              859
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 根因分析\n${diagnosis.rootCause?.description || '待分析'}",
            "lines": [
              870,
              871
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 修复建议\n${diagnosis.fixSuggestions?.quickFixes?.map(fix => `- ${fix.description}`).join('\\n') || ''}",
            "lines": [
              873,
              874
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createDiagnosisRoutes",
            "line": 14,
            "length": 319,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_generateFixSuggestions",
            "line": 457,
            "length": 52,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 7,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "tests/integration/create-requirements-routes.test.js",
      "size": 28116,
      "lines": {
        "total": 659,
        "code": 540,
        "comments": 38,
        "blank": 101
      },
      "functions": 0,
      "classes": 0,
      "complexity": {
        "cyclomatic": 26195,
        "cognitive": 10,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 添加Create模式路由\n        app.use('/mode/create', createFeatureRoutes(mockServices));",
            "lines": [
              33,
              34
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)",
            "lines": [
              74,
              96
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)\n                .expect(200);",
            "lines": [
              75,
              97
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validRequirementsData)\n                .expect(200);",
            "lines": [
              76,
              98
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)",
            "lines": [
              74,
              108
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)\n                .expect(200);",
            "lines": [
              75,
              109
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validRequirementsData)\n                .expect(200);",
            "lines": [
              76,
              110
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)",
            "lines": [
              74,
              122
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)\n                .expect(200);",
            "lines": [
              75,
              123
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validRequirementsData)\n                .expect(200);",
            "lines": [
              76,
              124
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const userStories = response.body.data.analysis.userStories;\n            expect(userStories).toHaveLength(5);",
            "lines": [
              126,
              127
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)",
            "lines": [
              74,
              143
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)\n                .expect(200);",
            "lines": [
              75,
              144
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validRequirementsData)\n                .expect(200);",
            "lines": [
              76,
              145
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)",
            "lines": [
              74,
              158
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)\n                .expect(200);",
            "lines": [
              75,
              159
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validRequirementsData)\n                .expect(200);",
            "lines": [
              76,
              160
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)",
            "lines": [
              74,
              172
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)\n                .expect(200);",
            "lines": [
              75,
              173
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validRequirementsData)\n                .expect(200);",
            "lines": [
              76,
              174
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)",
            "lines": [
              74,
              184
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/analyze-requirements')\n                .send(validRequirementsData)\n                .expect(200);",
            "lines": [
              75,
              185
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validRequirementsData)\n                .expect(200);",
            "lines": [
              76,
              186
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该拒绝空的需求列表', async () => {\n            const invalidData = { ...validRequirementsData, requirements: [] };",
            "lines": [
              219,
              220
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该拒绝缺少需求字段的请求', async () => {\n            const invalidData = { context: {}, stakeholders: [] };",
            "lines": [
              231,
              232
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/analyze-requirements')",
            "lines": [
              222,
              234
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/analyze-requirements')\n                .send(invalidData)",
            "lines": [
              223,
              235
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/analyze-requirements')\n                .send(invalidData)\n                .expect(400);",
            "lines": [
              224,
              236
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(400);\n\n            expect(response.body.success).toBe(false);",
            "lines": [
              226,
              238
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.success).toBe(false);\n            expect(response.body.error).toContain('需求描述不能为空');",
            "lines": [
              227,
              239
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.success).toBe(false);\n            expect(response.body.error).toContain('需求描述不能为空');\n        });",
            "lines": [
              228,
              240
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.error).toContain('需求描述不能为空');\n        });",
            "lines": [
              229,
              241
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/analyze-requirements')",
            "lines": [
              222,
              252
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(200);\n\n            const validation = response.body.data.analysis.validation;",
            "lines": [
              111,
              256
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "epic: '用户管理',\n                    status: 'backlog'\n                },",
            "lines": [
              279,
              291
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "status: 'backlog'\n                },\n                {",
            "lines": [
              280,
              292
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(200);\n\n            expect(response.body.success).toBe(true);",
            "lines": [
              77,
              317
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.data.nextSteps).toBeDefined();\n            expect(response.body.data.generation.executionTime).toBeDefined();\n        });",
            "lines": [
              91,
              333
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.data.generation.executionTime).toBeDefined();\n        });",
            "lines": [
              92,
              334
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)",
            "lines": [
              314,
              338
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              315,
              339
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              316,
              340
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const normalizedStories = response.body.data.document.normalizedStories;\n            expect(normalizedStories).toHaveLength(3);",
            "lines": [
              342,
              343
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(story.persona).toBeDefined();\n                expect(story.priority).toMatch(/^(high|medium|low)$/);\n                expect(story.storyPoints).toBeGreaterThan(0);",
            "lines": [
              133,
              350
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(story.priority).toMatch(/^(high|medium|low)$/);\n                expect(story.storyPoints).toBeGreaterThan(0);\n                expect(story.acceptanceCriteria).toBeInstanceOf(Array);",
            "lines": [
              134,
              351
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(story.storyPoints).toBeGreaterThan(0);\n                expect(story.acceptanceCriteria).toBeInstanceOf(Array);\n                expect(story.tags).toBeInstanceOf(Array);",
            "lines": [
              135,
              352
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(story.acceptanceCriteria).toBeInstanceOf(Array);\n                expect(story.tags).toBeInstanceOf(Array);\n                expect(story.epic).toBeDefined();",
            "lines": [
              136,
              353
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)",
            "lines": [
              314,
              364
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              315,
              365
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              316,
              366
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const acceptanceCriteria = response.body.data.document.acceptanceCriteria;\n            expect(acceptanceCriteria).toHaveLength(3);",
            "lines": [
              368,
              369
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)",
            "lines": [
              314,
              384
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              315,
              385
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              316,
              386
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)",
            "lines": [
              314,
              400
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              315,
              401
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              316,
              402
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const prioritizedStories = response.body.data.document.prioritizedStories;\n            expect(prioritizedStories).toHaveLength(3);",
            "lines": [
              404,
              405
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)",
            "lines": [
              314,
              415
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              315,
              416
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              316,
              417
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const epics = response.body.data.document.epics;\n            expect(epics.length).toBeGreaterThan(0);",
            "lines": [
              419,
              420
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)",
            "lines": [
              314,
              436
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              315,
              437
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              316,
              438
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)",
            "lines": [
              314,
              451
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              315,
              452
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              316,
              453
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)",
            "lines": [
              314,
              465
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/update-user-stories')\n                .send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              315,
              466
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(validUserStoriesData)\n                .expect(200);",
            "lines": [
              316,
              467
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "});\n\n        test('应该在workflowId存在时更新工作流', async () => {",
            "lines": [
              198,
              481
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该在workflowId存在时更新工作流', async () => {\n            const mockWorkflow = { id: 'test-workflow' };",
            "lines": [
              199,
              482
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该在workflowId存在时更新工作流', async () => {\n            const mockWorkflow = { id: 'test-workflow' };\n            mockServices.workflowService.getWorkflow.mockReturnValue(mockWorkflow);",
            "lines": [
              200,
              483
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const mockWorkflow = { id: 'test-workflow' };\n            mockServices.workflowService.getWorkflow.mockReturnValue(mockWorkflow);",
            "lines": [
              201,
              484
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send(dataWithWorkflow)\n                .expect(200);",
            "lines": [
              208,
              491
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(200);\n\n            expect(mockServices.workflowService.getWorkflow).toHaveBeenCalledWith('test-workflow');",
            "lines": [
              209,
              492
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(mockServices.workflowService.getWorkflow).toHaveBeenCalledWith('test-workflow');\n            expect(mockServices.workflowService.updateStep).toHaveBeenCalledWith(",
            "lines": [
              210,
              493
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(mockServices.workflowService.getWorkflow).toHaveBeenCalledWith('test-workflow');\n            expect(mockServices.workflowService.updateStep).toHaveBeenCalledWith(\n                'test-workflow',",
            "lines": [
              211,
              494
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "'completed', \n                expect.any(Object)\n            );",
            "lines": [
              215,
              498
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该拒绝空的用户故事列表', async () => {\n            const invalidData = { ...validUserStoriesData, userStories: [] };",
            "lines": [
              502,
              503
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(400);\n\n            expect(response.body.success).toBe(false);",
            "lines": [
              226,
              509
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该拒绝缺少userStories字段的请求', async () => {\n            const invalidData = { format: 'markdown' };",
            "lines": [
              514,
              515
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')",
            "lines": [
              505,
              517
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')\n                .send(invalidData)",
            "lines": [
              506,
              518
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/create/update-user-stories')\n                .send(invalidData)\n                .expect(400);",
            "lines": [
              507,
              519
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(400);\n\n            expect(response.body.success).toBe(false);",
            "lines": [
              226,
              521
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.success).toBe(false);\n            expect(response.body.error).toContain('用户故事列表不能为空');",
            "lines": [
              510,
              522
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.success).toBe(false);\n            expect(response.body.error).toContain('用户故事列表不能为空');\n        });",
            "lines": [
              511,
              523
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.error).toContain('用户故事列表不能为空');\n        });",
            "lines": [
              512,
              524
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n            const response = await request(app)",
            "lines": [
              251,
              533
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')",
            "lines": [
              505,
              534
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(200);\n\n            const normalizedStories = response.body.data.document.normalizedStories;",
            "lines": [
              341,
              538
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const normalizedStories = response.body.data.document.normalizedStories;\n            expect(normalizedStories).toHaveLength(2);",
            "lines": [
              539,
              540
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "normalizedStories.forEach(story => {\n                expect(story.id).toBeDefined();\n                expect(story.title).toBeDefined();",
            "lines": [
              346,
              544
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n            const response = await request(app)",
            "lines": [
              251,
              560
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')",
            "lines": [
              505,
              561
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n            const response = await request(app)",
            "lines": [
              251,
              575
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')",
            "lines": [
              505,
              576
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.data.document.acceptanceCriteria).toBeNull();\n        });",
            "lines": [
              581,
              582
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n            const response = await request(app)",
            "lines": [
              251,
              589
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/update-user-stories')",
            "lines": [
              505,
              590
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "context: {},\n                stakeholders: [],\n                constraints: [],",
            "lines": [
              247,
              608
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "stakeholders: [],\n                constraints: [],\n                businessGoals: []",
            "lines": [
              248,
              609
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "constraints: [],\n                businessGoals: []\n            };",
            "lines": [
              249,
              610
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/analyze-requirements')",
            "lines": [
              222,
              621
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.success).toBe(false);\n            expect(response.body.error).toBeDefined();",
            "lines": [
              626,
              627
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(400);\n\n            expect(response.body.success).toBe(false);",
            "lines": [
              226,
              639
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n            const response = await request(app)",
            "lines": [
              251,
              648
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n                .post('/mode/create/analyze-requirements')",
            "lines": [
              222,
              649
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory"
      ]
    },
    {
      "path": "server/language/language-prompt-generator.js",
      "size": 31424,
      "lines": {
        "total": 813,
        "code": 615,
        "comments": 101,
        "blank": 102
      },
      "functions": 36,
      "classes": 1,
      "complexity": {
        "cyclomatic": 25479,
        "cognitive": 39,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);",
            "lines": [
              9,
              10
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 2. 获取语言特定的提示词模板\n            const prompts = this.buildLanguagePrompts(detection);",
            "lines": [
              35,
              36
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 最佳实践提示词\n            bestPractices: this.generateBestPracticesPrompt(language),",
            "lines": [
              74,
              75
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 代码审查提示词\n            codeReview: this.generateCodeReviewPrompt(language, primaryFramework),",
            "lines": [
              77,
              78
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 调试和问题解决提示词\n            debugging: this.generateDebuggingPrompt(language),",
            "lines": [
              80,
              81
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 性能优化提示词\n            performance: this.generatePerformancePrompt(language, primaryFramework),",
            "lines": [
              83,
              84
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 测试策略提示词\n            testing: this.generateTestingPrompt(language, primaryFramework),",
            "lines": [
              86,
              87
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 文档编写提示词\n            documentation: this.generateDocumentationPrompt(language),",
            "lines": [
              89,
              90
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 代码质量标准\n${practices.codeQuality.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              125,
              126
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 项目结构规范\n${practices.projectStructure.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              128,
              129
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 命名约定\n${practices.naming.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              131,
              132
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 性能考量\n${practices.performance.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              134,
              135
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 安全实践\n${practices.security.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              137,
              138
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 审查重点\n${reviewCriteria.focus.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              158,
              159
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 常见问题检查\n${reviewCriteria.commonIssues.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              161,
              162
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 质量评估标准\n${reviewCriteria.qualityMetrics.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              164,
              165
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 调试策略\n${debuggingStrategies.strategies.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              185,
              186
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 常用工具\n${debuggingStrategies.tools.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              188,
              189
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 典型错误模式\n${debuggingStrategies.commonErrors.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              191,
              192
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 性能优化原则\n${perfGuidelines.principles.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              220,
              221
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 常见性能瓶颈\n${perfGuidelines.bottlenecks.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              223,
              224
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 优化策略\n${perfGuidelines.strategies.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              226,
              227
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 性能监控\n${perfGuidelines.monitoring.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              229,
              230
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 测试金字塔\n${testingStrategy.pyramid.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              250,
              251
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 测试类型\n${testingStrategy.types.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              253,
              254
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 测试工具\n${testingStrategy.tools.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              256,
              257
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 测试最佳实践\n${testingStrategy.bestPractices.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              259,
              260
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 文档标准\n${docGuidelines.standards.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              280,
              281
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 文档类型\n${docGuidelines.types.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              283,
              284
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 编写原则\n${docGuidelines.principles.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              286,
              287
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 维护策略\n${docGuidelines.maintenance.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              289,
              290
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 安全原则\n${securityGuidelines.principles.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              310,
              311
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 常见漏洞\n${securityGuidelines.vulnerabilities.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              313,
              314
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 防护措施\n${securityGuidelines.protections.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              316,
              317
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "## 安全工具\n${securityGuidelines.tools.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              319,
              320
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "],\n                security: [\n                    '验证和清理用户输入',",
            "lines": [
              391,
              428
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "initializeBestPractices",
            "line": 361,
            "length": 115,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/analyzers/integration-analyzer.js",
      "size": 26805,
      "lines": {
        "total": 838,
        "code": 594,
        "comments": 124,
        "blank": 121
      },
      "functions": 51,
      "classes": 1,
      "complexity": {
        "cyclomatic": 25167,
        "cognitive": 198,
        "nestingDepth": 8
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import { promises as fs } from 'fs';\nimport path from 'path';",
            "lines": [
              12,
              13
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n      console.log('[IntegrationAnalyzer] 开始集成契约分析');",
            "lines": [
              40,
              41
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 执行核心分析步骤\n      const analysisSteps = await this._performAnalysisSteps(extractedData);",
            "lines": [
              51,
              52
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成集成契约文档数据\n      const contractDocument = this._generateContractDocument(analysisSteps, extractedData);",
            "lines": [
              54,
              55
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log(`[IntegrationAnalyzer] 集成契约分析完成 (${executionTime}ms)`);\n      return result;",
            "lines": [
              95,
              96
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (sourceModule && targetModule && sourceModule.id !== targetModule.id) {\n          const relationKey = `${sourceModule.id}-${targetModule.id}`;",
            "lines": [
              199,
              200
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return integrationPoints.sort((a, b) => b.complexity - a.complexity);\n  }",
            "lines": [
              294,
              295
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const type = dependency.type;\n              dependencyTypes.set(type, (dependencyTypes.get(type) || 0) + 1);",
            "lines": [
              415,
              416
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_calculateRelationStrength(source, target, dependencies = []) {\n    let strength = 0.1;",
            "lines": [
              588,
              589
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 基于依赖数量\n    strength += Math.min(dependencies.length * 0.1, 0.4);",
            "lines": [
              591,
              592
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "visited.add(moduleName);\n      recursionStack.add(moduleName);",
            "lines": [
              801,
              802
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "analyzeIntegration",
            "line": 38,
            "length": 71,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_analyzeModuleRelations",
            "line": 189,
            "length": 70,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_analyzeExternalDependencies",
            "line": 393,
            "length": 52,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 8,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/analyzers/ultra-detailed-code-analyzer.js",
      "size": 25281,
      "lines": {
        "total": 740,
        "code": 505,
        "comments": 136,
        "blank": 106
      },
      "functions": 25,
      "classes": 1,
      "complexity": {
        "cyclomatic": 24189,
        "cognitive": 505,
        "nestingDepth": 10
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 计算平均值和复杂度指标\n        this._calculateMetrics(analysis);",
            "lines": [
              96,
              97
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 分析代码行\n            this._analyzeLines(content, fileAnalysis);",
            "lines": [
              140,
              141
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 分析导入导出\n            this._analyzeImportsExports(content, fileAnalysis);",
            "lines": [
              147,
              148
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 分析变量声明\n            this._analyzeVariables(content, fileAnalysis);",
            "lines": [
              150,
              151
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 计算复杂度\n            this._calculateComplexity(content, fileAnalysis);",
            "lines": [
              153,
              154
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 代码质量分析\n            this._analyzeCodeQuality(content, fileAnalysis);",
            "lines": [
              156,
              157
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 模式识别\n            this._identifyPatterns(content, fileAnalysis);",
            "lines": [
              159,
              160
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "fileAnalysis.lines.comments++;\n                continue;\n            }",
            "lines": [
              206,
              212
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "fileAnalysis.lines.comments++;\n                continue;\n            }",
            "lines": [
              206,
              219
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (matches) {\n                cyclomaticComplexity += matches.length;\n            }",
            "lines": [
              384,
              392
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "cyclomaticComplexity += matches.length;\n            }\n        });",
            "lines": [
              385,
              393
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 检查重复代码\n        this._detectDuplicateCode(lines, fileAnalysis);",
            "lines": [
              458,
              459
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (matches) complexity += matches.length;\n        });",
            "lines": [
              575,
              580
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "analyzeProject",
            "line": 20,
            "length": 83,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_analyzeFile",
            "line": 109,
            "length": 61,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_analyzeLines",
            "line": 174,
            "length": 52,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_extractFunctions",
            "line": 230,
            "length": 105,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_calculateComplexity",
            "line": 376,
            "length": 54,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_identifyPatterns",
            "line": 469,
            "length": 272,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_extractFunctionBody",
            "line": 513,
            "length": 228,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_analyzeClassMembers",
            "line": 541,
            "length": 198,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_mergeFileAnalysis",
            "line": 641,
            "length": 77,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 10,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Singleton",
        "Observer",
        "Module",
        "Express-Route",
        "Middleware"
      ]
    },
    {
      "path": "server/routes/analyze/index.js",
      "size": 25662,
      "lines": {
        "total": 650,
        "code": 520,
        "comments": 58,
        "blank": 72
      },
      "functions": 8,
      "classes": 0,
      "complexity": {
        "cyclomatic": 23680,
        "cognitive": 116,
        "nestingDepth": 8
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "language: 'javascript'\n                            }\n                        }",
            "lines": [
              154,
              167
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              131,
              307
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              131,
              384
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              131,
              448
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createAnalyzeModeRoutes",
            "line": 19,
            "length": 476,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 8,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/analyzers/project-scanner.js",
      "size": 24655,
      "lines": {
        "total": 854,
        "code": 584,
        "comments": 153,
        "blank": 120
      },
      "functions": 27,
      "classes": 1,
      "complexity": {
        "cyclomatic": 23346,
        "cognitive": 279,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);",
            "lines": [
              9,
              10
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log(`[ProjectScanner] 开始扫描项目: ${projectPath}`);\n    const startTime = Date.now();",
            "lines": [
              51,
              52
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "directoryStructure,\n        readmeContent,\n        configFiles,",
            "lines": [
              58,
              75
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "readmeContent,\n        configFiles,\n        packageInfo,",
            "lines": [
              59,
              76
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "configFiles,\n        packageInfo,\n        devToolsConfig,",
            "lines": [
              60,
              77
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "packageInfo,\n        devToolsConfig,\n        projectStats",
            "lines": [
              61,
              78
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log(`[ProjectScanner] 扫描完成 (${Date.now() - startTime}ms): ${projectPath}`);\n      return result;",
            "lines": [
              112,
              113
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "for (const fileName of readmeFiles) {\n      const filePath = path.join(projectPath, fileName);",
            "lines": [
              207,
              208
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysis.hasLicense = /license/i.test(content);\n    analysis.hasContributing = /contribut/i.test(content);",
            "lines": [
              282,
              283
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// Python\n      python: ['requirements.txt', 'setup.py', 'pyproject.toml', 'Pipfile', 'environment.yml'],",
            "lines": [
              298,
              299
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// Java\n      java: ['pom.xml', 'build.gradle', 'settings.gradle', 'gradle.properties'],",
            "lines": [
              301,
              302
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// Rust  \n      rust: ['Cargo.toml', 'Cargo.lock'],",
            "lines": [
              307,
              308
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// C#/.NET\n      csharp: ['*.csproj', '*.sln', 'Directory.Build.props', 'global.json'],",
            "lines": [
              310,
              311
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 有README\n    if (scanData.readme?.found) score += 1;",
            "lines": [
              610,
              611
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 有版本控制\n    if (scanData.devTools?.versionControl?.length > 0) score += 1;",
            "lines": [
              613,
              614
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 有测试配置\n    if (scanData.devTools?.testing?.length > 0) score += 1;",
            "lines": [
              616,
              617
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 有CI/CD\n    if (scanData.devTools?.ci?.length > 0) score += 1;",
            "lines": [
              619,
              620
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 有linting工具\n    if (scanData.devTools?.linting?.length > 0) score += 1;",
            "lines": [
              622,
              623
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "scanProject",
            "line": 39,
            "length": 82,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "scanDirectoryStructure",
            "line": 127,
            "length": 66,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "analyzeReadmeContent",
            "line": 234,
            "length": 54,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "scanConfigFiles",
            "line": 294,
            "length": 73,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "extractTechStackHints",
            "line": 636,
            "length": 53,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/analyzers/real-project-scanner.js",
      "size": 23177,
      "lines": {
        "total": 658,
        "code": 512,
        "comments": 60,
        "blank": 89
      },
      "functions": 21,
      "classes": 1,
      "complexity": {
        "cyclomatic": 22686,
        "cognitive": 474,
        "nestingDepth": 7
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);",
            "lines": [
              9,
              10
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 计算统计信息\n        results.statistics = this._calculateStatistics(results);",
            "lines": [
              41,
              42
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".slice(0, 10)\n            .map(f => ({\n                path: f.relativePath,",
            "lines": [
              100,
              110
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const ignorePatterns = ['node_modules', '.git', 'dist', 'build', '.next', 'coverage'];\n        const dirName = path.basename(dirPath);",
            "lines": [
              125,
              126
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const items = fs.readdirSync(dirPath);",
            "lines": [
              132,
              133
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "name: item,\n                        path: fullPath,\n                        relativePath,",
            "lines": [
              143,
              155
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "structure.files.push(fileInfo);\n                    structure.totalFiles++;",
            "lines": [
              163,
              164
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "codeLines: 0,\n            commentLines: 0,\n            blankLines: 0,",
            "lines": [
              186,
              241
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "for (let i = 0; i < lines.length; i++) {\n            const line = lines[i].trim();",
            "lines": [
              254,
              255
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysis.commentLines++;\n                continue;\n            }",
            "lines": [
              265,
              272
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "analysis.commentLines++;\n                continue;\n            }",
            "lines": [
              265,
              277
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "line: i + 1\n                    });\n                }",
            "lines": [
              314,
              325
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const packageJsonPath = path.join(this.projectPath, 'package.json');\n        let packageInfo = {};",
            "lines": [
              54,
              354
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            if (fs.existsSync(packageJsonPath)) {",
            "lines": [
              56,
              356
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            if (fs.existsSync(packageJsonPath)) {\n                const packageContent = fs.readFileSync(packageJsonPath, 'utf8');",
            "lines": [
              57,
              357
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (fs.existsSync(packageJsonPath)) {\n                const packageContent = fs.readFileSync(packageJsonPath, 'utf8');\n                packageInfo = JSON.parse(packageContent);",
            "lines": [
              58,
              358
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const packageContent = fs.readFileSync(packageJsonPath, 'utf8');\n                packageInfo = JSON.parse(packageContent);\n            }",
            "lines": [
              59,
              359
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "packageInfo = JSON.parse(packageContent);\n            }\n        } catch (error) {",
            "lines": [
              60,
              360
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "for (let i = 0; i < lines.length; i++) {\n            const line = lines[i].trim();",
            "lines": [
              254,
              478
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "for (let i = 0; i < lines.length; i++) {\n            const line = lines[i].trim();",
            "lines": [
              254,
              479
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "for (const file of files) {\n            if (!['.js', '.ts'].includes(file.extension)) continue;",
            "lines": [
              516,
              517
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "_scanDirectory",
            "line": 123,
            "length": 56,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_analyzeFileContent",
            "line": 237,
            "length": 93,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 7,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module"
      ]
    },
    {
      "path": "server/routes/analyze/reports.js",
      "size": 23890,
      "lines": {
        "total": 795,
        "code": 595,
        "comments": 87,
        "blank": 113
      },
      "functions": 24,
      "classes": 0,
      "complexity": {
        "cyclomatic": 22200,
        "cognitive": 189,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                targetPath = '.',",
            "lines": [
              23,
              114
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              30,
              119
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ");\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              52,
              133
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              54,
              135
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              76,
              149
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              77,
              150
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { \n                targetPath = '.',",
            "lines": [
              23,
              172
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ");\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              52,
              189
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              54,
              191
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              76,
              205
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              77,
              206
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} else {\n                success(res, responseData);\n            }",
            "lines": [
              97,
              224
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              163,
              230
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                language = 'javascript'\n            } = req.body;",
            "lines": [
              30,
              244
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ");\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              52,
              262
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              54,
              264
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "executionTime,\n                    timestamp: new Date().toISOString()\n                }",
            "lines": [
              144,
              273
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              145,
              274
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              76,
              278
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              77,
              279
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              159,
              288
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              163,
              292
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _generateMarkdownReport(report) {\n    return `# ${report.title}",
            "lines": [
              740,
              741
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 立即执行\n${report.action_plan.immediate.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              765,
              766
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 短期计划\n${report.action_plan.shortTerm.map(item => `- ${item}`).join('\\n')}",
            "lines": [
              768,
              769
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _generateCSV(data) {\n    if (data.length === 0) return '';",
            "lines": [
              781,
              782
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createReportsRoutes",
            "line": 14,
            "length": 284,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_collectAllAnalysisData",
            "line": 306,
            "length": 51,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/services/enhanced-ai-content-generator.js",
      "size": 25583,
      "lines": {
        "total": 756,
        "code": 571,
        "comments": 32,
        "blank": 159
      },
      "functions": 40,
      "classes": 1,
      "complexity": {
        "cyclomatic": 22166,
        "cognitive": 236,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "async initialize() {\n        if (this.initialized) return;",
            "lines": [
              10,
              11
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 文件类型分布\n${this._generateFileTypeTable(fileStructure.filesByExtension)}",
            "lines": [
              57,
              58
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 最大文件识别\n${this._formatLargestFiles(fileStructure.largestFiles)}",
            "lines": [
              66,
              67
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 最近修改文件\n${this._formatRecentFiles(fileStructure.recentFiles)}",
            "lines": [
              69,
              70
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 可用命令\n${this._formatPackageScripts(basicInfo.scripts)}",
            "lines": [
              74,
              75
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 关键词标签\n${basicInfo.keywords?.length > 0 ? basicInfo.keywords.map(k => `\\`${k}\\``).join(', ') : '无关键词标签'}",
            "lines": [
              77,
              78
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 质量评估\n${this._generateQualityAssessment(realScanData)}",
            "lines": [
              88,
              89
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 配置文件分析\n${this._analyzeConfigurationFiles(configuration)}",
            "lines": [
              98,
              99
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 主要开发命令\n${this._generateDevelopmentCommands(basicInfo.scripts)}",
            "lines": [
              109,
              110
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 扩展性评估\n${this._evaluateScalability(realScanData)}",
            "lines": [
              124,
              125
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "* @param {Object} realScanData - 真实项目扫描数据\n     * @returns {Promise<string>} 生成的Markdown内容\n     */",
            "lines": [
              20,
              137
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 按HTTP方法分类\n${this._categorizeEndpointsByMethod(apiEndpoints.routes)}",
            "lines": [
              152,
              153
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 按功能模块分类\n${this._categorizeEndpointsByModule(apiEndpoints.routes)}",
            "lines": [
              155,
              156
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 核心系统API\n${this._generateSystemAPISection(apiEndpoints.routes)}",
            "lines": [
              160,
              161
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 业务功能API\n${this._generateBusinessAPISection(apiEndpoints.routes)}",
            "lines": [
              163,
              164
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 工具和配置API\n${this._generateUtilityAPISection(apiEndpoints.routes)}",
            "lines": [
              166,
              167
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 中间件分析\n${this._analyzeMiddleware(apiEndpoints.routes)}",
            "lines": [
              171,
              172
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 安全防护\n${this._generateSecurityAnalysis(apiEndpoints.routes)}",
            "lines": [
              174,
              175
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "* @param {Object} realScanData - 真实项目扫描数据\n     * @returns {Promise<string>} 生成的Markdown内容\n     */",
            "lines": [
              20,
              215
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 层级分布统计\n${this._generateLayerStatistics(moduleStructure.layers)}",
            "lines": [
              230,
              231
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 🚀 路由层模块 (${moduleStructure.layers.routes.length}个)\n${this._generateLayerModules(moduleStructure.layers.routes, '路由处理和HTTP请求分发')}",
            "lines": [
              240,
              241
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### ⚙️ 服务层模块 (${moduleStructure.layers.services.length}个)\n${this._generateLayerModules(moduleStructure.layers.services, '业务逻辑和核心功能实现')}",
            "lines": [
              243,
              244
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 🛠️ 工具层模块 (${moduleStructure.layers.utils?.length || 0}个)\n${this._generateLayerModules(moduleStructure.layers.utils || [], '通用工具和辅助功能')}",
            "lines": [
              246,
              247
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 📋 配置层模块 (${moduleStructure.layers.config.length}个)\n${this._generateLayerModules(moduleStructure.layers.config, '系统配置和环境管理')}",
            "lines": [
              249,
              250
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 高重要性模块\n${this._filterModulesByImportance(moduleStructure.modules, 'high')}",
            "lines": [
              254,
              255
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 中等重要性模块\n${this._filterModulesByImportance(moduleStructure.modules, 'medium')}",
            "lines": [
              257,
              258
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 普通模块\n${this._filterModulesByImportance(moduleStructure.modules, 'low')}",
            "lines": [
              260,
              261
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "let table = '| 文件类型 | 数量 | 总大小 | 描述 |\\n';\n        table += '|---------|------|--------|------|\\n';",
            "lines": [
              305,
              306
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return devScripts.length > 0 ? devScripts.join('\\n') : '- 暂无主要开发命令';\n    }",
            "lines": [
              466,
              467
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { analysis } = dependencies;\n        let report = `### 依赖总览\\n- **总依赖数**: ${analysis.totalCount} 个\\n\\n`;",
            "lines": [
              474,
              475
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "evaluations.push('🔧 **水平扩展** - 支持多实例部署');\n        evaluations.push('📈 **负载均衡** - 可配置负载均衡策略');",
            "lines": [
              525,
              526
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".map(route => `- **${route.method} ${route.path}** - ${route.file}:${route.line}`)\n            .join('\\n');\n    }",
            "lines": [
              577,
              591
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".map(route => `- **${route.method} ${route.path}** - ${route.file}:${route.line}`)\n            .join('\\n');\n    }",
            "lines": [
              577,
              605
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_generateSecurityAnalysis(routes) {\n        const securityFeatures = [];",
            "lines": [
              627,
              628
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_filterModulesByImportance(modules, importance) {\n        const filtered = modules.filter(module => module.importance === importance);",
            "lines": [
              715,
              716
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_calculateAverageModuleSize(modules) {\n        if (!modules || modules.length === 0) return '未知';",
            "lines": [
              728,
              729
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const totalSize = modules.reduce((sum, module) => sum + (module.size || 0), 0);\n        const avgSize = totalSize / modules.length;",
            "lines": [
              731,
              732
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "_assessCoupling(moduleStructure) {\n        const totalModules = moduleStructure.modules.length;",
            "lines": [
              737,
              738
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "generateRealProjectOverview",
            "line": 23,
            "length": 111,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "generateRealAPIDocumentation",
            "line": 140,
            "length": 72,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "generateRealModuleArchitecture",
            "line": 218,
            "length": 80,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "tests/unit/template-generation.test.js",
      "size": 23501,
      "lines": {
        "total": 813,
        "code": 631,
        "comments": 48,
        "blank": 147
      },
      "functions": 4,
      "classes": 0,
      "complexity": {
        "cyclomatic": 21067,
        "cognitive": -13,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 创建Mock模板变量\n    mockTemplateVars = createMockTemplateVariables();",
            "lines": [
              16,
              17
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const template = await mockPromptService.loadPrompt(\n        'templates',\n        'integration-contracts',",
            "lines": [
              30,
              43
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "'templates',\n        'integration-contracts',\n        mockTemplateVars",
            "lines": [
              31,
              44
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "'integration-contracts',\n        mockTemplateVars\n      );",
            "lines": [
              32,
              45
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const template = await mockPromptService.loadPrompt(\n        'templates',\n        'integration-contracts',",
            "lines": [
              30,
              74
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n      const template = await mockPromptService.loadPrompt(",
            "lines": [
              72,
              102
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const template = await mockPromptService.loadPrompt(\n        'templates',",
            "lines": [
              73,
              103
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const template = await mockPromptService.loadPrompt(\n        'templates',\n        'integration-contracts',",
            "lines": [
              30,
              104
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n      const template = await mockPromptService.loadPrompt(",
            "lines": [
              72,
              119
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const template = await mockPromptService.loadPrompt(\n        'templates',",
            "lines": [
              73,
              120
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const template = await mockPromptService.loadPrompt(\n        'templates',\n        'integration-contracts',",
            "lines": [
              30,
              121
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const template = await mockPromptService.loadPrompt(\n        'templates',\n        'integration-contracts',",
            "lines": [
              30,
              133
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "'templates',\n        'integration-contracts',\n        mockTemplateVars",
            "lines": [
              31,
              134
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "'integration-contracts',\n        mockTemplateVars\n      );",
            "lines": [
              32,
              135
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "'integration-contracts',\n        mockTemplateVars\n      );",
            "lines": [
              32,
              150
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该包含所有主要章节', () => {\n      const builtinDoc = _generateBuiltinContractDocument(mockTemplateVars);",
            "lines": [
              173,
              174
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该正确格式化数据', () => {\n      const builtinDoc = _generateBuiltinContractDocument(mockTemplateVars);",
            "lines": [
              195,
              196
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该生成有效的Markdown语法', () => {\n      const builtinDoc = _generateBuiltinContractDocument(mockTemplateVars);",
            "lines": [
              233,
              234
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 验证列表语法\n      expect(builtinDoc).toMatch(/^-\\s+\\*\\*.+\\*\\*:/m); // 粗体列表项",
            "lines": [
              241,
              242
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(sections[0].title).toBe('主标题');\n      expect(sections[0].level).toBe(1);",
            "lines": [
              272,
              273
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(sections[2].title).toBe('第二章节');\n      expect(sections[2].level).toBe(2);",
            "lines": [
              279,
              280
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该正确处理标题嵌套', () => {\n      const nestedMarkdown = `# 主标题",
            "lines": [
              299,
              300
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(duration).toBeLessThan(1000); // 1秒内完成\n    });",
            "lines": [
              372,
              373
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "project_overview: '这是一个测试项目的概览描述',\n    architecture_summary: '系统架构摘要信息',",
            "lines": [
              449,
              450
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createMockTemplateVariables",
            "line": 437,
            "length": 107,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_generateBuiltinContractDocument",
            "line": 575,
            "length": 198,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory"
      ]
    },
    {
      "path": "tests/unit/integration-analyzer.test.js",
      "size": 20980,
      "lines": {
        "total": 605,
        "code": 497,
        "comments": 10,
        "blank": 98
      },
      "functions": 0,
      "classes": 0,
      "complexity": {
        "cyclomatic": 20047,
        "cognitive": 5,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import { describe, test, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { IntegrationAnalyzer } from '../../server/analyzers/integration-analyzer.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该返回正确的分析统计', async () => {\n      const result = await analyzer.analyzeIntegration(mockWorkflowResults);",
            "lines": [
              73,
              74
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该处理缺少前置步骤的情况', async () => {\n      const incompleteResults = { step_1: mockWorkflowResults.step_1 };",
            "lines": [
              85,
              86
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该处理空数据的情况', async () => {\n      const emptyResults = {};",
            "lines": [
              94,
              95
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该记录执行时间', async () => {\n      const result = await analyzer.analyzeIntegration(mockWorkflowResults);",
            "lines": [
              103,
              104
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(() => {\n        analyzer._extractWorkflowData(invalidResults);",
            "lines": [
              126,
              135
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(() => {\n        analyzer._extractWorkflowData(invalidResults);",
            "lines": [
              126,
              144
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const extractedData = analyzer._extractWorkflowData(mockWorkflowResults);\n      const relations = await analyzer._analyzeModuleRelations(\n        extractedData.modulesData,",
            "lines": [
              153,
              183
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.filesData,\n        extractedData.languageData\n      );",
            "lines": [
              173,
              186
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.filesData, \n        extractedData.languageData\n      );",
            "lines": [
              156,
              202
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.filesData,\n        extractedData.languageData\n      );",
            "lines": [
              173,
              208
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const extractedData = analyzer._extractWorkflowData(mockWorkflowResults);\n      const moduleRelations = await analyzer._analyzeModuleRelations(\n        extractedData.modulesData,",
            "lines": [
              199,
              221
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const moduleRelations = await analyzer._analyzeModuleRelations(\n        extractedData.modulesData,\n        extractedData.filesData,",
            "lines": [
              200,
              222
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.modulesData,\n        extractedData.filesData,\n        extractedData.languageData",
            "lines": [
              185,
              223
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.filesData,\n        extractedData.languageData\n      );",
            "lines": [
              173,
              224
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ");\n      \n      const integrationPoints = await analyzer._identifyIntegrationPoints(",
            "lines": [
              204,
              226
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const integrationPoints = await analyzer._identifyIntegrationPoints(\n        moduleRelations,",
            "lines": [
              205,
              227
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const integrationPoints = await analyzer._identifyIntegrationPoints(\n        moduleRelations,\n        extractedData.filesData,",
            "lines": [
              206,
              228
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "moduleRelations,\n        extractedData.filesData,\n        extractedData.languageData",
            "lines": [
              207,
              229
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.filesData,\n        extractedData.languageData\n      );",
            "lines": [
              173,
              230
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.filesData,\n        extractedData.languageData\n      );",
            "lines": [
              173,
              256
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.filesData,\n        extractedData.languageData\n      );",
            "lines": [
              173,
              269
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const extractedData = analyzer._extractWorkflowData(mockWorkflowResults);\n      const moduleRelations = await analyzer._analyzeModuleRelations(\n        extractedData.modulesData,",
            "lines": [
              199,
              282
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const moduleRelations = await analyzer._analyzeModuleRelations(\n        extractedData.modulesData,\n        extractedData.filesData,",
            "lines": [
              200,
              283
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.modulesData,\n        extractedData.filesData,\n        extractedData.languageData",
            "lines": [
              185,
              284
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.filesData,\n        extractedData.languageData\n      );",
            "lines": [
              173,
              285
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const extractedData = analyzer._extractWorkflowData(mockWorkflowResults);\n      const moduleRelations = await analyzer._analyzeModuleRelations(\n        extractedData.modulesData,",
            "lines": [
              199,
              303
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const moduleRelations = await analyzer._analyzeModuleRelations(\n        extractedData.modulesData,\n        extractedData.filesData,",
            "lines": [
              200,
              304
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.modulesData,\n        extractedData.filesData,\n        extractedData.languageData",
            "lines": [
              185,
              305
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.filesData,\n        extractedData.languageData\n      );",
            "lines": [
              173,
              306
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const dataFlow = await analyzer._analyzeDataFlow(\n        moduleRelations,",
            "lines": [
              289,
              309
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该识别安全风险', async () => {\n      const extractedData = analyzer._extractWorkflowData(mockWorkflowResults);",
            "lines": [
              337,
              338
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const extractedData = analyzer._extractWorkflowData(mockWorkflowResults);\n      \n      const externalDeps = await analyzer._analyzeExternalDependencies(",
            "lines": [
              324,
              339
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const externalDeps = await analyzer._analyzeExternalDependencies(\n        extractedData.filesData,",
            "lines": [
              325,
              340
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const externalDeps = await analyzer._analyzeExternalDependencies(\n        extractedData.filesData,\n        extractedData.modulesData,",
            "lines": [
              326,
              341
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.filesData,\n        extractedData.modulesData,\n        extractedData.languageData",
            "lines": [
              327,
              342
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.modulesData,\n        extractedData.languageData\n      );",
            "lines": [
              328,
              343
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该分类依赖类型', async () => {\n      const extractedData = analyzer._extractWorkflowData(mockWorkflowResults);",
            "lines": [
              354,
              355
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const extractedData = analyzer._extractWorkflowData(mockWorkflowResults);\n      \n      const externalDeps = await analyzer._analyzeExternalDependencies(",
            "lines": [
              324,
              356
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const externalDeps = await analyzer._analyzeExternalDependencies(\n        extractedData.filesData,",
            "lines": [
              325,
              357
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const externalDeps = await analyzer._analyzeExternalDependencies(\n        extractedData.filesData,\n        extractedData.modulesData,",
            "lines": [
              326,
              358
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.filesData,\n        extractedData.modulesData,\n        extractedData.languageData",
            "lines": [
              327,
              359
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "extractedData.modulesData,\n        extractedData.languageData\n      );",
            "lines": [
              328,
              360
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "apiContracts: { contracts: [], statistics: {} },\n        dataFlow: { flows: [], statistics: {} },\n        externalDeps: { dependencies: [], statistics: {} }",
            "lines": [
              374,
              402
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "dataFlow: { flows: [], statistics: {} },\n        externalDeps: { dependencies: [], statistics: {} }\n      };",
            "lines": [
              375,
              403
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "externalDeps: { dependencies: [], statistics: {} }\n      };\n      const extractedData = analyzer._extractWorkflowData(mockWorkflowResults);",
            "lines": [
              376,
              404
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n      const extractedData = analyzer._extractWorkflowData(mockWorkflowResults);",
            "lines": [
              377,
              405
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const extractedData = analyzer._extractWorkflowData(mockWorkflowResults);\n      \n      const contractDoc = analyzer._generateContractDocument(",
            "lines": [
              378,
              406
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const contractDoc = analyzer._generateContractDocument(\n        mockAnalysisSteps,",
            "lines": [
              379,
              407
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const contractDoc = analyzer._generateContractDocument(\n        mockAnalysisSteps,\n        extractedData",
            "lines": [
              380,
              408
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该记录执行时间即使出错', async () => {\n      const invalidData = {};",
            "lines": [
              489,
              490
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const result = await analyzer.analyzeIntegration(invalidData);",
            "lines": [
              483,
              492
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const result = await analyzer.analyzeIntegration(invalidData);\n      \n      expect(result.success).toBe(false);",
            "lines": [
              484,
              493
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "...mockWorkflowResults,\n        step_5: {\n          analysis: {",
            "lines": [
              513,
              551
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module"
      ]
    },
    {
      "path": "tests/integration/contracts-routes.test.js",
      "size": 20612,
      "lines": {
        "total": 634,
        "code": 518,
        "comments": 35,
        "blank": 86
      },
      "functions": 3,
      "classes": 0,
      "complexity": {
        "cyclomatic": 19372,
        "cognitive": 11,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 创建Mock服务\n    mockServices = createMockServices();",
            "lines": [
              31,
              32
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n        .post('/mode/init/generate-contracts')\n        .send({ workflowId: 'test_workflow_123' })",
            "lines": [
              78,
              99
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/init/generate-contracts')\n        .send({ workflowId: 'test_workflow_123' })\n        .expect(200);",
            "lines": [
              79,
              100
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send({ workflowId: 'test_workflow_123' })\n        .expect(200);",
            "lines": [
              80,
              101
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该验证工作流存在性', async () => {\n      mockServices.workflowService.getWorkflow.mockReturnValue(null);",
            "lines": [
              124,
              125
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n        .post('/mode/init/generate-contracts')",
            "lines": [
              127,
              148
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(400);\n\n      expect(response.body.success).toBe(false);",
            "lines": [
              119,
              152
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/init/generate-contracts')\n        .send({ workflowId: 'test_workflow_123' })\n        .expect(200);",
            "lines": [
              79,
              160
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send({ workflowId: 'test_workflow_123' })\n        .expect(200);",
            "lines": [
              80,
              161
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n        .post('/mode/init/generate-contracts')",
            "lines": [
              127,
              183
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n        .post('/mode/init/generate-contracts')\n        .send({ workflowId: 'test_workflow_123' })",
            "lines": [
              78,
              194
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/init/generate-contracts')\n        .send({ workflowId: 'test_workflow_123' })\n        .expect(200);",
            "lines": [
              79,
              195
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send({ workflowId: 'test_workflow_123' })\n        .expect(200);",
            "lines": [
              80,
              196
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(200);\n\n      expect(response.body.success).toBe(true);",
            "lines": [
              81,
              216
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.data.analysis).toBeDefined();\n      expect(response.body.data.document).toBeDefined();\n      expect(response.body.data.summary).toBeDefined();",
            "lines": [
              86,
              220
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(200);\n\n      expect(response.body.success).toBe(true);",
            "lines": [
              81,
              230
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(200);\n\n      expect(response.body.success).toBe(true);",
            "lines": [
              81,
              243
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.data.format).toBe('json');\n    });",
            "lines": [
              257,
              258
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "test('应该验证workflowId参数', async () => {\n      const response = await request(app)",
            "lines": [
              114,
              260
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(400);\n\n      expect(response.body.success).toBe(false);",
            "lines": [
              119,
              264
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('工作流ID不能为空');",
            "lines": [
              120,
              265
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('工作流ID不能为空');\n    });",
            "lines": [
              121,
              266
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.error).toContain('工作流ID不能为空');\n    });",
            "lines": [
              122,
              267
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "mockServices.workflowService.getWorkflow.mockReturnValue({\n        ...mockWorkflow,\n        results: {",
            "lines": [
              175,
              272
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "...mockWorkflow,\n        results: {\n          step_1: mockWorkflow.results.step_1,",
            "lines": [
              140,
              273
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(400);\n\n      expect(response.body.success).toBe(false);",
            "lines": [
              119,
              286
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n        .get('/mode/init/contracts')\n        .query({ workflowId: 'test_workflow_123' })",
            "lines": [
              253,
              293
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".get('/mode/init/contracts')\n        .query({ workflowId: 'test_workflow_123' })\n        .expect(200);",
            "lines": [
              254,
              294
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".query({ workflowId: 'test_workflow_123' })\n        .expect(200);",
            "lines": [
              255,
              295
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "beforeEach(async () => {\n      // 先生成契约文档\n      await request(app)",
            "lines": [
              205,
              306
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 先生成契约文档\n      await request(app)\n        .post('/mode/init/generate-contracts')",
            "lines": [
              206,
              307
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "await request(app)\n        .post('/mode/init/generate-contracts')\n        .send({ workflowId: 'test_workflow_123' });",
            "lines": [
              207,
              308
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/init/generate-contracts')\n        .send({ workflowId: 'test_workflow_123' });\n    });",
            "lines": [
              208,
              309
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send({ workflowId: 'test_workflow_123' });\n    });",
            "lines": [
              209,
              310
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(200);\n\n      expect(response.body.success).toBe(true);",
            "lines": [
              81,
              317
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.data.statistics).toBeDefined();\n    });",
            "lines": [
              323,
              345
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.data.statistics).toBeDefined();\n    });",
            "lines": [
              323,
              356
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".query({ workflowId: 'test_workflow_123' })\n        .expect(200);",
            "lines": [
              255,
              362
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.data.type).toBe('module-relations');\n    });",
            "lines": [
              364,
              365
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(400);\n\n      expect(response.body.success).toBe(false);",
            "lines": [
              119,
              372
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "mockServices.workflowService.getWorkflow.mockReturnValue({\n        ...mockWorkflow,\n        results: {",
            "lines": [
              175,
              379
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(400);\n\n      expect(response.body.success).toBe(false);",
            "lines": [
              119,
              390
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n        .get('/mode/init/relations')\n        .query({ workflowId: 'test_workflow_123', type: 'modules' })",
            "lines": [
              314,
              397
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".get('/mode/init/relations')\n        .query({ workflowId: 'test_workflow_123', type: 'modules' })\n        .expect(200);",
            "lines": [
              315,
              398
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".query({ workflowId: 'test_workflow_123', type: 'modules' })\n        .expect(200);",
            "lines": [
              316,
              399
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n        .post('/mode/init/generate-contracts')",
            "lines": [
              127,
              415
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n        .post('/mode/init/generate-contracts')\n        .send({ workflowId: 'error_workflow' })",
            "lines": [
              184,
              416
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/init/generate-contracts')\n        .send({ workflowId: 'error_workflow' })\n        .expect(500);",
            "lines": [
              185,
              417
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send({ workflowId: 'error_workflow' })\n        .expect(500);",
            "lines": [
              186,
              418
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(500);\n\n      expect(response.body.success).toBe(false);",
            "lines": [
              187,
              419
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.success).toBe(false);\n      expect(response.body.error).toBeDefined();",
            "lines": [
              188,
              420
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "expect(response.body.success).toBe(false);\n      expect(response.body.error).toBeDefined();\n    });",
            "lines": [
              189,
              421
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n        .post('/mode/init/generate-contracts')",
            "lines": [
              127,
              438
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(200);\n\n      expect(response.body.success).toBe(true);",
            "lines": [
              81,
              442
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n        .post('/mode/init/generate-contracts')",
            "lines": [
              127,
              451
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const response = await request(app)\n        .post('/mode/init/generate-contracts')\n        .send({ workflowId: 'test_workflow_123' })",
            "lines": [
              78,
              452
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".post('/mode/init/generate-contracts')\n        .send({ workflowId: 'test_workflow_123' })\n        .expect(200);",
            "lines": [
              79,
              453
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".send({ workflowId: 'test_workflow_123' })\n        .expect(200);",
            "lines": [
              80,
              454
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "await request(app)\n        .post('/mode/init/generate-contracts')\n        .send({ workflowId: 'test_workflow_123' });",
            "lines": [
              207,
              465
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".get('/mode/init/contracts')\n        .query({ workflowId: 'test_workflow_123' })\n        .expect(200);",
            "lines": [
              254,
              472
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".query({ workflowId: 'test_workflow_123' })\n        .expect(200);",
            "lines": [
              255,
              473
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": ".expect(200);\n      \n      const duration = Date.now() - start;",
            "lines": [
              455,
              474
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "statistics: {\n            totalModules: 2,\n            totalRelations: 1,",
            "lines": [
              535,
              555
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createMockWorkflow",
            "line": 524,
            "length": 111,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory"
      ]
    },
    {
      "path": "server/routes/init/contracts.js",
      "size": 20758,
      "lines": {
        "total": 518,
        "code": 371,
        "comments": 72,
        "blank": 76
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 19072,
        "cognitive": 222,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 更新步骤状态为运行中\n            workflowService.updateStep(workflowId, 8, 'running'); // 第8步，索引为8",
            "lines": [
              49,
              50
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 模拟分析结果 (实际由AI生成)\n                analysis: mockIntegrationAnalysis,",
            "lines": [
              141,
              142
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为已完成\n            workflowService.updateStep(workflowId, 8, 'completed', responseData);",
            "lines": [
              185,
              186
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n            console.error('[Contracts] 生成集成契约文档失败:', err);",
            "lines": [
              195,
              196
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              27,
              217
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              28,
              218
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                return error(res, '工作流不存在', 404);\n            }",
            "lines": [
              36,
              225
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              27,
              299
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              28,
              300
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {",
            "lines": [
              223,
              305
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {\n                return error(res, '工作流不存在', 404);",
            "lines": [
              224,
              306
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                return error(res, '工作流不存在', 404);\n            }",
            "lines": [
              36,
              307
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "note: 'AI生成数据，实际使用时由AI分析生成'\n                    };\n                    break;",
            "lines": [
              325,
              335
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "note: 'AI生成数据，实际使用时由AI分析生成'\n                    };\n                    break;",
            "lines": [
              325,
              345
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "note: 'AI生成数据，实际使用时由AI分析生成'\n                    };\n                    break;",
            "lines": [
              325,
              355
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              27,
              385
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              28,
              386
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {",
            "lines": [
              223,
              395
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {\n                return error(res, '工作流不存在', 404);",
            "lines": [
              224,
              396
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                return error(res, '工作流不存在', 404);\n            }",
            "lines": [
              36,
              397
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 初始化AI响应处理服务\n            const aiHandler = new AIResponseHandlerService(workflow.projectPath);",
            "lines": [
              400,
              401
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const savedFiles = [];\n            const errors = [];",
            "lines": [
              403,
              404
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflow: {\n                    workflowId,\n                    step: 8,",
            "lines": [
              164,
              477
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createContractsRoutes",
            "line": 15,
            "length": 482,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/create/api.js",
      "size": 19310,
      "lines": {
        "total": 637,
        "code": 434,
        "comments": 134,
        "blank": 80
      },
      "functions": 21,
      "classes": 0,
      "complexity": {
        "cyclomatic": 18435,
        "cognitive": 155,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成API实现代码\n            const apiImplementation = await _generateAPIImplementation(apiSpec, promptService);",
            "lines": [
              61,
              62
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成测试代码\n            const apiTests = _generateAPITests(apiSpec);",
            "lines": [
              64,
              65
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const implementation = await _generateAPIImplementation(apiSpec, promptService);\n                    const tests = _generateAPITests(apiSpec);",
            "lines": [
              141,
              142
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              68,
              161
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "},\n                generation: {\n                    executionTime,",
            "lines": [
              75,
              170
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              90,
              187
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              91,
              188
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              100,
              197
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "schema: {\n                type: 'object',\n                properties: {",
            "lines": [
              218,
              228
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "schema: {\n                type: 'object',\n                properties: {",
            "lines": [
              218,
              238
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "middleware: _generateMiddlewareImplementation(apiSpec.middleware, language),\n            validation: _generateValidationImplementation(apiSpec.validation, language)\n        };",
            "lines": [
              345,
              351
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return `// ${method} ${endpoint} - ${apiSpec.description}`;\n}",
            "lines": [
              408,
              409
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "`${key}: Joi.${rule.type}()${rule.required ? '.required()' : '.optional()'}`)\n        .join(',\\n        ')}\n    }),",
            "lines": [
              462,
              467
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { endpoint, method, language } = apiSpec;\n    \n    if (language === 'javascript') {",
            "lines": [
              363,
              487
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createAPIRoutes",
            "line": 14,
            "length": 195,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route",
        "Middleware"
      ]
    },
    {
      "path": "server/routes/create/data.js",
      "size": 20935,
      "lines": {
        "total": 632,
        "code": 454,
        "comments": 94,
        "blank": 90
      },
      "functions": 17,
      "classes": 0,
      "complexity": {
        "cyclomatic": 18278,
        "cognitive": 75,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取分析模板\n            const analysisTemplates = await _loadAnalysisTemplates(promptService, language);",
            "lines": [
              41,
              42
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取参考数据\n            const referenceData = await _loadReferenceData(language);",
            "lines": [
              44,
              45
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取分析规则配置\n            const analysisRules = _getAnalysisRules();",
            "lines": [
              47,
              48
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 分析模板 - AI用于分析的结构化提示\n                analysisTemplates,",
            "lines": [
              63,
              64
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 参考数据 - 辅助AI做出更好的分析\n                referenceData,",
            "lines": [
              66,
              67
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取文档模板\n            const documentTemplates = await _loadDocumentTemplates(promptService, format, templateType);",
            "lines": [
              141,
              142
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const responseData = {\n                // 原始数据\n                rawData: {",
            "lines": [
              52,
              153
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                },",
            "lines": [
              61,
              161
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 验收标准模板\n                acceptanceCriteriaTemplates,",
            "lines": [
              166,
              167
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              87,
              193
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            // 如果有工作流ID，更新工作流状态",
            "lines": [
              89,
              195
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              91,
              197
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              92,
              198
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, {\n                ...responseData,\n                generation: {",
            "lines": [
              101,
              207
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "...responseData,\n                generation: {\n                    executionTime,",
            "lines": [
              102,
              208
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "generation: {\n                    executionTime,\n                    dataProvider: 'mcp-server',",
            "lines": [
              103,
              209
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            });",
            "lines": [
              107,
              213
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              92,
              255
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "function _getDefaultDocumentTemplates(format, templateType) {\n    const markdownTemplate = `# 用户故事文档",
            "lines": [
              531,
              532
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return baseMetrics[language] || baseMetrics.javascript;\n}",
            "lines": [
              610,
              611
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createDataRoutes",
            "line": 14,
            "length": 267,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_getDefaultAnalysisTemplates",
            "line": 474,
            "length": 57,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/services/language-intelligence-service.js",
      "size": 19212,
      "lines": {
        "total": 619,
        "code": 421,
        "comments": 147,
        "blank": 59
      },
      "functions": 36,
      "classes": 1,
      "complexity": {
        "cyclomatic": 18126,
        "cognitive": 59,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 执行检测\n            const detection = await this.detector.detectLanguage(projectPath);",
            "lines": [
              51,
              52
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const langConfig = this.detector.languages[language];\n        const frameworks = langConfig.frameworks || {};",
            "lines": [
              119,
              120
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (Date.now() - cached.timestamp < this.cache.ttl) {\n                    return {\n                        ...cached.data,",
            "lines": [
              44,
              156
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return {\n                        ...cached.data,\n                        fromCache: true",
            "lines": [
              45,
              157
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "...cached.data,\n                        fromCache: true\n                    };",
            "lines": [
              46,
              158
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "fromCache: true\n                    };\n                }",
            "lines": [
              47,
              159
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (Date.now() - cached.timestamp < this.cache.ttl) {\n                    return {\n                        ...cached.data,",
            "lines": [
              44,
              252
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return {\n                        ...cached.data,\n                        fromCache: true",
            "lines": [
              45,
              253
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "...cached.data,\n                        fromCache: true\n                    };",
            "lines": [
              46,
              254
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "fromCache: true\n                    };\n                }",
            "lines": [
              47,
              255
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 缓存结果\n            if (useCache && result.success) {",
            "lines": [
              171,
              267
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return capabilities[language] || ['general'];\n    }",
            "lines": [
              408,
              409
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module",
        "Middleware"
      ]
    },
    {
      "path": "server/language/template-generator.js",
      "size": 19496,
      "lines": {
        "total": 561,
        "code": 360,
        "comments": 136,
        "blank": 84
      },
      "functions": 19,
      "classes": 1,
      "complexity": {
        "cyclomatic": 17940,
        "cognitive": 185,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);",
            "lines": [
              11,
              12
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 3. 加载基础模板\n            const baseTemplate = await this.loadBaseTemplate(templateName);",
            "lines": [
              36,
              37
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 4. 检查是否有语言特定的模板变体\n            const languageTemplate = await this.loadLanguageTemplate(detection.language, templateName);",
            "lines": [
              39,
              40
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 5. 生成最终模板\n            const finalTemplate = languageTemplate || baseTemplate;",
            "lines": [
              42,
              43
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 替换模板变量\n        rendered = this.replaceTemplateVariables(rendered, allVariables);",
            "lines": [
              182,
              183
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 添加语言特定的注释和说明\n        rendered = this.addLanguageSpecificNotes(rendered, detection.language, detection.suggestions);",
            "lines": [
              185,
              186
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "### 建议和优化\n${suggestions.map(s => `- ${s}`).join('\\n')}",
            "lines": [
              293,
              294
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const maxConcurrency = Math.min(batchOptions.maxConcurrency || 5, 10);\n        const failFast = batchOptions.failFast || false;",
            "lines": [
              439,
              440
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 模拟项目路径（在语言已知的情况下）\n                const projectPath = options.projectPath || process.cwd();",
            "lines": [
              463,
              464
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 确定模板类型\n                const templateType = options.templateType || 'user-story';",
            "lines": [
              466,
              467
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 调用单个模板生成\n                const result = await this.generateTemplate(projectPath, templateType);",
            "lines": [
              469,
              470
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "request,\n                    processingTime: Date.now() - startTime\n                };",
            "lines": [
              477,
              486
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n                const chunkResults = await Promise.all(chunkPromises);",
            "lines": [
              503,
              504
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const endTime = Date.now();\n        const totalTime = endTime - startTime;",
            "lines": [
              529,
              530
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/services/template-engine-service.js",
      "size": 18720,
      "lines": {
        "total": 583,
        "code": 392,
        "comments": 112,
        "blank": 83
      },
      "functions": 29,
      "classes": 1,
      "complexity": {
        "cyclomatic": 17839,
        "cognitive": 83,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "try {\n            this.performanceMetrics.totalGenerations++;",
            "lines": [
              34,
              35
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const variants = await this.templateGenerator.getLanguageVariants(language, templateName);",
            "lines": [
              75,
              76
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const startTime = Date.now();\n        const batchId = `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;",
            "lines": [
              109,
              110
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return count > 0 ? Math.round(totalScore / count) : 0;\n    }",
            "lines": [
              329,
              330
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const variantTypes = Object.values(variants).map(v => v.type || 'generic');\n        const uniqueTypes = [...new Set(variantTypes)];",
            "lines": [
              423,
              424
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return templates.filter(t => !category || t.category === category);\n    }",
            "lines": [
              529,
              530
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const languageDir = path.join(this.languageVariantsDir, language);",
            "lines": [
              539,
              540
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (fs.existsSync(languageDir)) {\n                const files = fs.readdirSync(languageDir);",
            "lines": [
              542,
              543
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "files.forEach(file => {\n                    if (path.extname(file) === '.md') {",
            "lines": [
              511,
              545
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "});\n                        }\n                    }",
            "lines": [
              521,
              556
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return variants.filter(v => !category || v.category === category);\n    }",
            "lines": [
              564,
              565
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/language/prompt-intelligence.js",
      "size": 19744,
      "lines": {
        "total": 564,
        "code": 405,
        "comments": 104,
        "blank": 55
      },
      "functions": 19,
      "classes": 1,
      "complexity": {
        "cyclomatic": 17634,
        "cognitive": 140,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 分析用户意图\n            const intentAnalysis = this.analyzeUserIntent(userIntent, currentTask);",
            "lines": [
              185,
              186
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "constructor",
            "line": 11,
            "length": 84,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "generateContextualPrompts",
            "line": 173,
            "length": 51,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/routes/fix/index.js",
      "size": 18973,
      "lines": {
        "total": 505,
        "code": 421,
        "comments": 35,
        "blank": 49
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 17318,
        "cognitive": 41,
        "nestingDepth": 8
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "language: 'javascript'\n                            }\n                        }",
            "lines": [
              144,
              157
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              119,
              246
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              119,
              334
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "steps: [\n                        {\n                            id: 'report',",
            "lines": [
              348,
              384
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "estimated_time: '5-10 minutes'\n                        },\n                        {",
            "lines": [
              354,
              398
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "estimated_time: '15-30 minutes'\n                        },\n                        {",
            "lines": [
              361,
              406
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "estimated_time: '15-30 minutes'\n                        },\n                        {",
            "lines": [
              361,
              434
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              119,
              457
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createFixModeRoutes",
            "line": 17,
            "length": 487,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 8,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/init/documents.js",
      "size": 17820,
      "lines": {
        "total": 450,
        "code": 335,
        "comments": 46,
        "blank": 69
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 16508,
        "cognitive": 119,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 更新步骤状态为运行中\n            workflowService.updateStep(workflowId, 4, 'running');",
            "lines": [
              56,
              57
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为已完成\n            workflowService.updateStep(workflowId, 4, 'completed', responseData);",
            "lines": [
              141,
              142
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n            console.error('[Documents] 生成系统架构文档失败:', err);",
            "lines": [
              148,
              149
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { workflowId } = req.body;\n            \n            if (!workflowId) {",
            "lines": [
              25,
              169
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              26,
              170
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              27,
              171
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {",
            "lines": [
              32,
              176
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {\n                return error(res, '工作流不存在', 404);",
            "lines": [
              33,
              177
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                return error(res, '工作流不存在', 404);\n            }",
            "lines": [
              34,
              178
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 验证前置步骤完成状态\n            const structureResult = workflow.results.step_1;",
            "lines": [
              37,
              181
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 验证前置步骤完成状态\n            const structureResult = workflow.results.step_1;\n            const languageResult = workflow.results.step_2;",
            "lines": [
              38,
              182
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const structureResult = workflow.results.step_1;\n            const languageResult = workflow.results.step_2;\n            const filesResult = workflow.results.step_3;",
            "lines": [
              39,
              183
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const languageResult = workflow.results.step_2;\n            const filesResult = workflow.results.step_3;",
            "lines": [
              40,
              184
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "language: languageResult.detection.primaryLanguage\n            }, {\n                category: 'analysis-templates',",
            "lines": [
              75,
              213
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "language: languageResult.detection.primaryLanguage\n            }, {\n                category: 'document-templates',",
            "lines": [
              87,
              224
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n            const executionTime = Date.now() - startTime;",
            "lines": [
              114,
              247
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            // 构建AI驱动的响应数据",
            "lines": [
              116,
              249
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "generation: {\n                    executionTime,\n                    analysisMode: 'ai-driven',",
            "lines": [
              121,
              254
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "executionTime,\n                    analysisMode: 'ai-driven',\n                    dataProvider: 'mcp-server',",
            "lines": [
              122,
              255
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                },\n                workflow: {",
            "lines": [
              127,
              260
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "},\n                workflow: {\n                    workflowId,",
            "lines": [
              128,
              261
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflow: {\n                    workflowId,\n                    step: 4,",
            "lines": [
              129,
              262
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "previousStepsCompleted: ['scan_structure', 'detect_language', 'scan_files']\n                },\n                metadata: {",
            "lines": [
              133,
              266
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              26,
              295
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              27,
              296
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {",
            "lines": [
              32,
              305
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {\n                return error(res, '工作流不存在', 404);",
            "lines": [
              33,
              306
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                return error(res, '工作流不存在', 404);\n            }",
            "lines": [
              34,
              307
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 初始化AI响应处理服务\n            const aiHandler = new AIResponseHandlerService(workflow.projectPath);",
            "lines": [
              310,
              311
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const savedFiles = [];\n            const errors = [];",
            "lines": [
              313,
              314
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflow: {\n                    workflowId,\n                    step: 4,",
            "lines": [
              129,
              376
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {",
            "lines": [
              32,
              407
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {\n                return error(res, '工作流不存在', 404);",
            "lines": [
              33,
              408
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                return error(res, '工作流不存在', 404);\n            }",
            "lines": [
              34,
              409
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 初始化AI响应处理服务\n            const aiHandler = new AIResponseHandlerService(workflow.projectPath);",
            "lines": [
              310,
              412
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 初始化AI响应处理服务\n            const aiHandler = new AIResponseHandlerService(workflow.projectPath);",
            "lines": [
              310,
              413
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 处理AI数据包\n            const result = await aiHandler.processAIPackage(aiPackage);",
            "lines": [
              427,
              428
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createDocumentsRoutes",
            "line": 15,
            "length": 434,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/language/prompts.js",
      "size": 15945,
      "lines": {
        "total": 502,
        "code": 357,
        "comments": 66,
        "blank": 79
      },
      "functions": 3,
      "classes": 0,
      "complexity": {
        "cyclomatic": 14731,
        "cognitive": 244,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const router = Router();\nconst languageService = new LanguageIntelligenceService();",
            "lines": [
              9,
              10
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取语言特定提示词\n        const prompts = await languageService.getLanguageSpecificPrompts(lang, options);",
            "lines": [
              39,
              40
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 根据格式要求处理响应数据\n        let responseData = prompts;",
            "lines": [
              42,
              43
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n        console.error('[Language Prompts] 获取失败:', err);",
            "lines": [
              63,
              64
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成上下文提示词\n        const result = await languageService.generateContextualPrompts(contextData);",
            "lines": [
              111,
              112
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n        const { lang } = req.params;\n        const {",
            "lines": [
              18,
              147
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 验证语言参数\n        if (!lang) {\n            return error(res, '缺少语言参数', 400);",
            "lines": [
              27,
              156
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!lang) {\n            return error(res, '缺少语言参数', 400);\n        }",
            "lines": [
              28,
              157
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取最佳实践\n        const practices = await languageService.getBestPracticesPrompts(lang, context);",
            "lines": [
              160,
              161
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 应用过滤条件\n        let filteredPractices = practices.practices;",
            "lines": [
              163,
              164
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取提示词类别信息\n        const categories = languageService.promptIntelligence.promptCategories;",
            "lines": [
              279,
              280
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return success(res, responseData, \n            `批量提示词生成完成，成功: ${results.length}，失败: ${errors.length}`);",
            "lines": [
              407,
              408
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/create/modules.js",
      "size": 15271,
      "lines": {
        "total": 523,
        "code": 327,
        "comments": 119,
        "blank": 77
      },
      "functions": 19,
      "classes": 1,
      "complexity": {
        "cyclomatic": 14331,
        "cognitive": 6,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成模块文件内容\n            const moduleContent = await _generateModuleContent(moduleSpec, promptService);",
            "lines": [
              50,
              51
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成组件代码\n            const componentContent = await _generateComponentContent(componentSpec, promptService);",
            "lines": [
              121,
              122
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const executionTime = Date.now() - startTime;\n\n            const responseData = {",
            "lines": [
              54,
              125
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "},\n                generation: {\n                    executionTime,",
            "lines": [
              60,
              131
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 如果有工作流ID，更新工作流状态\n            if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              75,
              141
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (workflowId) {\n                const workflow = workflowService.getWorkflow(workflowId);\n                if (workflow) {",
            "lines": [
              76,
              142
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n\n        } catch (err) {",
            "lines": [
              85,
              151
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return structures[language] || structures.javascript;\n}",
            "lines": [
              191,
              192
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "class ${_capitalize(moduleName)}:\n    \"\"\"${description}\"\"\"",
            "lines": [
              221,
              222
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return templates[language] || templates.javascript;\n}",
            "lines": [
              243,
              244
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return templates[language]?.[type] || templates.javascript.function;\n}",
            "lines": [
              288,
              289
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "tests: _generateTestTemplate(moduleSpec),\n            examples: _generateModuleExamples(moduleSpec)\n        };",
            "lines": [
              311,
              319
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const templates = {\n        javascript: `import ${_capitalize(name)} from './${name}.js';",
            "lines": [
              363,
              364
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "python: `import unittest\nfrom ${name} import ${_capitalize(name)}",
            "lines": [
              373,
              374
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n    return templates[language] || templates.javascript;",
            "lines": [
              242,
              384
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return templates[language] || templates.javascript;\n}",
            "lines": [
              243,
              385
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return templates[language] || templates.javascript;\n}",
            "lines": [
              243,
              386
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (language === 'javascript') {\n        return `import ${_capitalize(name)} from './${name}.js';",
            "lines": [
              396,
              397
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "* @param {string} language - 编程语言\n * @returns {Array} 文件列表\n */",
            "lines": [
              414,
              426
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "files.push(`${componentName}.test.${language === 'python' ? 'py' : 'js'}`);\n    files.push(`${componentName}.md`);",
            "lines": [
              435,
              436
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createModuleRoutes",
            "line": 14,
            "length": 149,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/init/language.js",
      "size": 15063,
      "lines": {
        "total": 377,
        "code": 270,
        "comments": 53,
        "blank": 55
      },
      "functions": 2,
      "classes": 0,
      "complexity": {
        "cyclomatic": 13932,
        "cognitive": 94,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const step1Results = workflow.results.step_1;\n            const projectPathToUse = projectPath || workflow.projectPath;",
            "lines": [
              40,
              41
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为运行中\n            workflowService.updateStep(workflowId, 1, 'running');",
            "lines": [
              45,
              46
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const detectionResult = mockDetectionResult;",
            "lines": [
              133,
              134
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "tokensReduced: '预计45-50%令牌消耗',\n                    aiAnalysisTemplate: 'language-detection-analysis.md',\n                    aiDocumentTemplate: 'language-detection-generation.md'",
            "lines": [
              128,
              161
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisTemplate: 'language-detection-analysis.md',\n                    aiDocumentTemplate: 'language-detection-generation.md'\n                }",
            "lines": [
              129,
              162
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiDocumentTemplate: 'language-detection-generation.md'\n                }\n            };",
            "lines": [
              130,
              163
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n            console.error('[Language] 智能语言检测失败:', err);",
            "lines": [
              173,
              174
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              26,
              196
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              27,
              197
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n\n            const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              29,
              199
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {",
            "lines": [
              30,
              200
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {\n                return error(res, `工作流不存在: ${workflowId}`, 404);",
            "lines": [
              31,
              201
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                return error(res, `工作流不存在: ${workflowId}`, 404);\n            }",
            "lines": [
              32,
              202
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, `工作流不存在: ${workflowId}`, 404);\n            }",
            "lines": [
              33,
              203
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成详细报告\n            const report = _generateLanguageReport(detectionResult);",
            "lines": [
              210,
              211
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              26,
              229
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              27,
              230
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {",
            "lines": [
              30,
              239
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 初始化AI响应处理服务\n            const aiHandler = new AIResponseHandlerService(workflow.projectPath);",
            "lines": [
              244,
              245
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const savedFiles = [];\n            const errors = [];",
            "lines": [
              247,
              248
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 工作流建议\n        recommendations: detectionResult.detection.nextStepRecommendations,",
            "lines": [
              363,
              364
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createLanguageRoutes",
            "line": 15,
            "length": 304,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "_generateLanguageReport",
            "line": 325,
            "length": 51,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/language/detector.js",
      "size": 14782,
      "lines": {
        "total": 415,
        "code": 292,
        "comments": 78,
        "blank": 45
      },
      "functions": 14,
      "classes": 1,
      "complexity": {
        "cyclomatic": 13735,
        "cognitive": 87,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 计算最终结果\n            const result = this.calculateResult();",
            "lines": [
              138,
              139
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 检测框架\n            const frameworks = await this.detectFrameworks(projectPath, result.language);",
            "lines": [
              141,
              142
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const files = [];\n        const entries = fs.readdirSync(projectPath, { withFileTypes: true });",
            "lines": [
              190,
              191
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "for (const entry of entries) {\n            const fullPath = path.join(projectPath, entry.name);",
            "lines": [
              193,
              194
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "Object.keys(this.languages).forEach(lang => {\n            const langConfig = this.languages[lang];",
            "lines": [
              229,
              248
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const frameworks = [];\n        const langConfig = this.languages[language];",
            "lines": [
              267,
              268
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "for (const [frameworkName, indicators] of Object.entries(langConfig.frameworks)) {\n            let score = 0;",
            "lines": [
              270,
              271
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return frameworks.sort((a, b) => b.confidence - a.confidence);\n    }",
            "lines": [
              288,
              289
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const topResult = results[0];\n        const totalWeight = results.reduce((sum, r) => sum + r.weight, 0);",
            "lines": [
              312,
              313
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "constructor",
            "line": 10,
            "length": 111,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/routes/init/prompts.js",
      "size": 15305,
      "lines": {
        "total": 329,
        "code": 231,
        "comments": 58,
        "blank": 42
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 13649,
        "cognitive": 223,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              6,
              7
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为运行中 (第6步：语言特定提示词生成)\n            workflowService.updateStep(workflowId, 6, 'running');",
            "lines": [
              68,
              69
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 模拟提示词数据 (实际由AI生成)\n                prompts: promptResult.prompts,",
            "lines": [
              153,
              154
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                    step: 6,\n                    stepName: 'generate_prompts',",
            "lines": [
              97,
              171
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n            console.error('[LanguagePrompts] 语言特定提示词生成失败:', err);",
            "lines": [
              201,
              202
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// AI处理指令\n                aiInstructions: {\n                    generationTemplate: 'language-prompts-generation.md',",
            "lines": [
              86,
              233
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "tokensReduced: '预计45-50%令牌消耗'\n                }\n            };",
            "lines": [
              137,
              281
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 可用提示词类型\n                availableTypes: Object.keys(staticPromptResult.prompts),",
            "lines": [
              300,
              301
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createLanguagePromptsRoutes",
            "line": 30,
            "length": 298,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/init/modules-analysis.js",
      "size": 14820,
      "lines": {
        "total": 381,
        "code": 264,
        "comments": 59,
        "blank": 59
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 13614,
        "cognitive": 134,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 更新步骤状态为运行中\n            workflowService.updateStep(workflowId, 5, 'running');",
            "lines": [
              48,
              49
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const moduleAnalysis = mockModuleAnalysis;",
            "lines": [
              120,
              121
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 模拟分析结果 (实际由AI生成)\n                analysis: moduleAnalysis,",
            "lines": [
              130,
              131
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                    step: 5,\n                    stepName: 'analyze_modules',",
            "lines": [
              73,
              147
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n            console.error('[ModulesAnalysis] 深度模块分析失败:', err);",
            "lines": [
              176,
              177
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              27,
              199
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              28,
              200
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {",
            "lines": [
              33,
              209
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {\n                return error(res, '工作流不存在', 404);",
            "lines": [
              34,
              210
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                return error(res, '工作流不存在', 404);\n            }",
            "lines": [
              35,
              211
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              27,
              267
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              28,
              268
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {",
            "lines": [
              33,
              277
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {\n                return error(res, '工作流不存在', 404);",
            "lines": [
              34,
              278
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                return error(res, '工作流不存在', 404);\n            }",
            "lines": [
              35,
              279
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 初始化AI响应处理服务\n            const aiHandler = new AIResponseHandlerService(workflow.projectPath);",
            "lines": [
              282,
              283
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const savedFiles = [];\n            const errors = [];",
            "lines": [
              285,
              286
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflow: {\n                    workflowId,\n                    step: 5,",
            "lines": [
              146,
              348
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createModulesAnalysisRoutes",
            "line": 16,
            "length": 352,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "index.js",
      "size": 13945,
      "lines": {
        "total": 476,
        "code": 345,
        "comments": 76,
        "blank": 67
      },
      "functions": 10,
      "classes": 0,
      "complexity": {
        "cyclomatic": 13493,
        "cognitive": 58,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);",
            "lines": [
              31,
              32
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "app.use(express.json({ limit: '10mb' }));\n  app.use(express.urlencoded({ extended: true, limit: '10mb' }));",
            "lines": [
              91,
              92
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "version: '2.0.0',\n    cacheEnabled: true,\n    watchFiles: true",
            "lines": [
              112,
              120
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const clients = new Map();\n  const mcpConnections = new Map();",
            "lines": [
              218,
              219
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "process.on('SIGTERM', () => shutdown('SIGTERM'));\n  process.on('SIGINT', () => shutdown('SIGINT'));",
            "lines": [
              389,
              390
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// Setup WebSocket early so we have the connection managers\n    const wsManager = setupWebSocket(server, {});",
            "lines": [
              419,
              420
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// Now create Express app with WebSocket manager\n    const { app, config: serverConfig } = await createApp(config.server, wsManager);",
            "lines": [
              422,
              423
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// Setup graceful shutdown\n    setupGracefulShutdown(server, wsManager);",
            "lines": [
              429,
              430
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "setupWebSocket",
            "line": 212,
            "length": 90,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "handleWebSocketMessage",
            "line": 306,
            "length": 51,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "startServer",
            "line": 408,
            "length": 52,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Middleware"
      ]
    },
    {
      "path": "server/routes/analyze/dependencies.js",
      "size": 14105,
      "lines": {
        "total": 338,
        "code": 263,
        "comments": 47,
        "blank": 29
      },
      "functions": 3,
      "classes": 0,
      "complexity": {
        "cyclomatic": 13337,
        "cognitive": 57,
        "nestingDepth": 7
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              70,
              190
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              224,
              298
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createDependenciesRoutes",
            "line": 14,
            "length": 290,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 7,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/init/modules-docs.js",
      "size": 14362,
      "lines": {
        "total": 365,
        "code": 252,
        "comments": 57,
        "blank": 57
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 13065,
        "cognitive": 137,
        "nestingDepth": 7
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 更新步骤状态为运行中\n            workflowService.updateStep(workflowId, 7, 'running'); // 第7步，索引为7",
            "lines": [
              46,
              47
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                    step: 7,\n                    stepName: 'generate_module_docs',",
            "lines": [
              72,
              145
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为已完成（第7步，索引7，存储为step_7）\n            workflowService.updateStep(workflowId, 7, 'completed', responseData);",
            "lines": [
              152,
              153
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n            console.error('[ModulesDocs] 模块文档生成失败:', err);",
            "lines": [
              162,
              163
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              27,
              185
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              28,
              186
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {",
            "lines": [
              33,
              195
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {\n                return error(res, '工作流不存在', 404);",
            "lines": [
              34,
              196
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                return error(res, '工作流不存在', 404);\n            }",
            "lines": [
              35,
              197
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              27,
              257
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              28,
              258
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {",
            "lines": [
              33,
              267
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {\n                return error(res, '工作流不存在', 404);",
            "lines": [
              34,
              268
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                return error(res, '工作流不存在', 404);\n            }",
            "lines": [
              35,
              269
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 初始化AI响应处理服务\n            const aiHandler = new AIResponseHandlerService(workflow.projectPath);",
            "lines": [
              272,
              273
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const savedFiles = [];\n            const errors = [];",
            "lines": [
              275,
              276
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflow: {\n                    workflowId,\n                    step: 7,",
            "lines": [
              144,
              331
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createModulesDocsRoutes",
            "line": 16,
            "length": 335,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 7,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/language/templates.js",
      "size": 13857,
      "lines": {
        "total": 453,
        "code": 315,
        "comments": 66,
        "blank": 72
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 12668,
        "cognitive": 128,
        "nestingDepth": 7
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 执行统一模板获取\n        const result = await unifiedTemplateService.getTemplateByContext(contextData, templateRequest);",
            "lines": [
              32,
              33
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 支持多种参数格式\n        let finalLanguageDetection = languageDetection;",
            "lines": [
              111,
              112
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const responseData = {\n            ...result,\n            metadata: {",
            "lines": [
              36,
              152
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取模板变体\n        const variants = await languageService.getLanguageTemplateVariants(lang, templateName);",
            "lines": [
              187,
              188
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 根据格式要求处理响应数据\n        let responseData = variants;",
            "lines": [
              190,
              191
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n        console.error('[Template Variants] 获取失败:', err);",
            "lines": [
              220,
              221
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 执行批量生成\n        const result = await languageService.batchGenerateTemplates(requests, options);",
            "lines": [
              270,
              271
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const responseData = {\n            ...result,\n            metadata: {",
            "lines": [
              36,
              274
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return success(res, responseData, \n            `批量模板生成完成，成功: ${result.successful}，失败: ${result.failed}`);",
            "lines": [
              283,
              284
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 执行搜索\n        const searchResults = await templateService.searchTemplates(criteria);",
            "lines": [
              313,
              314
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return success(res, responseData, \n            `模板搜索完成，找到${searchResults.metadata.totalFound}个结果`);",
            "lines": [
              325,
              326
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 执行验证\n        const validation = templateService.validateTemplate(templateContent, validationOptions);",
            "lines": [
              354,
              355
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const responseData = {\n            ...stats,\n            metadata: {",
            "lines": [
              62,
              388
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n            }\n        };",
            "lines": [
              66,
              392
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取模板类型信息\n        const availableTemplates = await templateService.templateGenerator.getAvailableTemplates(language);",
            "lines": [
              414,
              415
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "DeepNesting",
            "depth": 7,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/services/ai-response-handler.js",
      "size": 12841,
      "lines": {
        "total": 356,
        "code": 268,
        "comments": 54,
        "blank": 42
      },
      "functions": 8,
      "classes": 1,
      "complexity": {
        "cyclomatic": 12070,
        "cognitive": 214,
        "nestingDepth": 8
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);",
            "lines": [
              11,
              12
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 批量保存文档\n            const result = await this.saveDocuments(documents);",
            "lines": [
              138,
              139
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "content: content\n                        });\n                    }",
            "lines": [
              174,
              185
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "});\n                    }\n                    break;",
            "lines": [
              175,
              186
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "content: content\n                        });\n                    }",
            "lines": [
              174,
              196
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "});\n                    }\n                    break;",
            "lines": [
              175,
              197
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "});\n                    }\n                    break;",
            "lines": [
              175,
              215
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "});\n                    }\n                    break;",
            "lines": [
              175,
              232
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "});\n                    }\n                    break;",
            "lines": [
              175,
              242
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "});\n                    }\n                    break;",
            "lines": [
              175,
              273
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "prepareDocuments",
            "line": 163,
            "length": 128,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 8,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module"
      ]
    },
    {
      "path": "server/routes/init/files.js",
      "size": 13398,
      "lines": {
        "total": 350,
        "code": 243,
        "comments": 64,
        "blank": 44
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 12034,
        "cognitive": 145,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const step1Results = workflow.results.step_1;\n            const step2Results = workflow.results.step_2;",
            "lines": [
              91,
              92
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为运行中 (第3步：文件内容通读)\n            workflowService.updateStep(workflowId, 3, 'running');",
            "lines": [
              100,
              101
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 使用模拟结果（实际使用时由AI生成）\n            const analysisResult = mockAnalysisResult;",
            "lines": [
              209,
              210
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "workflowId,\n                    step: 3,\n                    stepName: 'scan_files',",
            "lines": [
              132,
              236
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "tokensReduced: '预计45-50%令牌消耗',\n                    aiAnalysisTemplate: 'file-content-analysis.md',\n                    aiOverviewTemplate: 'file-overview-generation.md'",
            "lines": [
              204,
              240
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiAnalysisTemplate: 'file-content-analysis.md',\n                    aiOverviewTemplate: 'file-overview-generation.md'\n                }",
            "lines": [
              205,
              241
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "aiOverviewTemplate: 'file-overview-generation.md'\n                }\n            };",
            "lines": [
              206,
              242
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n            console.error('[Files] 文件内容分析失败:', err);",
            "lines": [
              252,
              253
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              77,
              275
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              78,
              276
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n\n            const workflow = workflowService.getWorkflow(workflowId);",
            "lines": [
              80,
              278
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {",
            "lines": [
              81,
              279
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = workflowService.getWorkflow(workflowId);\n            if (!workflow) {\n                return error(res, `工作流不存在: ${workflowId}`, 404);",
            "lines": [
              82,
              280
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflow) {\n                return error(res, `工作流不存在: ${workflowId}`, 404);\n            }",
            "lines": [
              83,
              281
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, `工作流不存在: ${workflowId}`, 404);\n            }",
            "lines": [
              84,
              282
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 元数据\n                metadata: {\n                    workflowId,",
            "lines": [
              130,
              308
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createFilesRoutes",
            "line": 14,
            "length": 313,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/analyze/performance.js",
      "size": 12824,
      "lines": {
        "total": 312,
        "code": 237,
        "comments": 48,
        "blank": 29
      },
      "functions": 3,
      "classes": 0,
      "complexity": {
        "cyclomatic": 11942,
        "cognitive": 50,
        "nestingDepth": 7
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "timestamp: new Date().toISOString()\n                }\n            };",
            "lines": [
              70,
              169
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              203,
              272
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createPerformanceRoutes",
            "line": 14,
            "length": 264,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 7,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/services/workflow-state-service.js",
      "size": 11751,
      "lines": {
        "total": 361,
        "code": 230,
        "comments": 92,
        "blank": 40
      },
      "functions": 17,
      "classes": 1,
      "complexity": {
        "cyclomatic": 10230,
        "cognitive": 67,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "this.workflows.set(workflowId, workflow);\n    this.currentWorkflow = workflowId;",
            "lines": [
              34,
              35
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflow = {\n      id: workflowId,\n      projectPath,",
            "lines": [
              21,
              50
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "projectPath,\n      mode,\n      createdAt: new Date().toISOString(),",
            "lines": [
              23,
              52
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "mode,\n      createdAt: new Date().toISOString(),\n      currentStep: 0,",
            "lines": [
              24,
              53
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "createdAt: new Date().toISOString(),\n      currentStep: 0,\n      totalSteps: this.getStepsForMode(mode),",
            "lines": [
              25,
              54
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "currentStep: 0,\n      totalSteps: this.getStepsForMode(mode),\n      status: 'created',",
            "lines": [
              26,
              55
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "totalSteps: this.getStepsForMode(mode),\n      status: 'created',\n      steps: this.initializeSteps(mode),",
            "lines": [
              27,
              56
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "status: 'created',\n      steps: this.initializeSteps(mode),\n      results: {},",
            "lines": [
              28,
              57
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "steps: this.initializeSteps(mode),\n      results: {},\n      context: {},",
            "lines": [
              29,
              58
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "this.workflows.set(workflowId, workflow);\n    this.currentWorkflow = workflowId;",
            "lines": [
              34,
              63
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "this.workflows.set(workflowId, workflow);\n    this.currentWorkflow = workflowId;",
            "lines": [
              34,
              64
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log(`[WorkflowState] 步骤更新: ${workflowId} - Step ${stepIndex + 1}: ${status}`);\n  }",
            "lines": [
              141,
              142
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "* @param {string} projectPath - 项目路径\n   * @param {string} mode - 工作模式\n   * @returns {string} 工作流ID",
            "lines": [
              45,
              289
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "* @param {string} mode - 工作模式\n   * @returns {string} 工作流ID\n   */",
            "lines": [
              46,
              290
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return summaries.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n  }",
            "lines": [
              338,
              339
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": []
      },
      "patterns": [
        "Factory",
        "Module"
      ]
    },
    {
      "path": "server/routes/create/index.js",
      "size": 10963,
      "lines": {
        "total": 301,
        "code": 231,
        "comments": 30,
        "blank": 40
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 10048,
        "cognitive": 45,
        "nestingDepth": 8
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              117,
              207
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, err.message, 500);\n        }\n    });",
            "lines": [
              117,
              267
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createCreateModeRoutes",
            "line": 18,
            "length": 282,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 8,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/services/config-service.js",
      "size": 10226,
      "lines": {
        "total": 361,
        "code": 235,
        "comments": 97,
        "blank": 37
      },
      "functions": 19,
      "classes": 1,
      "complexity": {
        "cyclomatic": 9397,
        "cognitive": 113,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [],
        "smells": [
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "test-split-modules.js",
      "size": 10285,
      "lines": {
        "total": 299,
        "code": 208,
        "comments": 42,
        "blank": 51
      },
      "functions": 8,
      "classes": 0,
      "complexity": {
        "cyclomatic": 9301,
        "cognitive": 80,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "app.use('/modules-analysis', modulesAnalysisRouter);\n    app.use('/modules-docs', modulesDocsRouter);",
            "lines": [
              34,
              35
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('✅ 注册的路由:');\n    routes.forEach(route => console.log(`   ${route.method} ${route.path}`));",
            "lines": [
              70,
              71
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { app, services } = createTestServer();\n    const server = app.listen(TEST_PORT);",
            "lines": [
              113,
              114
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 测试analyze-modules端点\n        const testPayload = { workflowId };",
            "lines": [
              128,
              129
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log(`   发送 POST /modules-analysis/analyze-modules`);\n        console.log(`   工作流ID: ${workflowId}`);",
            "lines": [
              131,
              132
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('✅ 模块分析路由测试通过');\n        console.log(`   结果: ${JSON.stringify(mockAnalysisResult, null, 2)}`);",
            "lines": [
              143,
              144
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { app, services } = createTestServer();\n    const server = app.listen(TEST_PORT);",
            "lines": [
              113,
              162
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { app, services } = createTestServer();\n    const server = app.listen(TEST_PORT);",
            "lines": [
              113,
              163
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const server = app.listen(TEST_PORT);\n    \n    try {",
            "lines": [
              115,
              164
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n        // 创建测试工作流\n        const workflowId = services.workflowService.createWorkflow(process.cwd(), 'init');",
            "lines": [
              117,
              166
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 创建测试工作流\n        const workflowId = services.workflowService.createWorkflow(process.cwd(), 'init');",
            "lines": [
              118,
              167
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "services.workflowService.updateStep(workflowId, 2, 'completed', { \n            detection: { primaryLanguage: 'javascript' } \n        });",
            "lines": [
              123,
              176
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log(`   发送 POST /modules-docs/generate-module-docs`);\n        console.log(`   工作流ID: ${workflowId}`);",
            "lines": [
              179,
              180
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log(`   工作流ID: ${workflowId}`);\n        \n        // 模拟请求处理（简化测试）",
            "lines": [
              133,
              181
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('✅ 模块文档路由测试通过');\n        console.log(`   结果: ${JSON.stringify(mockDocsResult, null, 2)}`);",
            "lines": [
              191,
              192
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "testRoutesRegistration",
            "line": 44,
            "length": 63,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/language/detection.js",
      "size": 9644,
      "lines": {
        "total": 323,
        "code": 227,
        "comments": 47,
        "blank": 49
      },
      "functions": 4,
      "classes": 0,
      "complexity": {
        "cyclomatic": 8959,
        "cognitive": 141,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const router = Router();\nconst languageService = new LanguageIntelligenceService();",
            "lines": [
              9,
              10
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取支持的语言信息\n        const supportedLanguages = languageService.getSupportedLanguages();",
            "lines": [
              67,
              68
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 根据查询参数过滤结果\n        let responseData = supportedLanguages;",
            "lines": [
              70,
              71
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取框架信息\n        const frameworks = languageService.getLanguageFrameworks(lang);",
            "lines": [
              128,
              129
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 应用过滤条件\n        let filteredFrameworks = frameworks.frameworks;",
            "lines": [
              131,
              132
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n        console.error('[Language Frameworks] 获取失败:', err);",
            "lines": [
              167,
              168
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "test-init-no-user.js",
      "size": 9035,
      "lines": {
        "total": 235,
        "code": 201,
        "comments": 11,
        "blank": 23
      },
      "functions": 2,
      "classes": 0,
      "complexity": {
        "cyclomatic": 8016,
        "cognitive": 97,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const projectPath = process.cwd();\n    const aiHandler = new AIResponseHandlerService(projectPath);",
            "lines": [
              14,
              15
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n            },\n            expectedCategory: 'architecture',",
            "lines": [
              27,
              39
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n            },\n            expectedCategory: 'architecture',",
            "lines": [
              27,
              51
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n            },\n            expectedCategory: 'architecture',",
            "lines": [
              27,
              64
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "}\n            },\n            expectedCategory: 'architecture',",
            "lines": [
              27,
              89
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "let passedTests = 0;\n    let totalTests = testCases.length;",
            "lines": [
              123,
              124
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 处理AI数据包\n            const result = await aiHandler.processAIPackage(testCase.aiPackage);",
            "lines": [
              130,
              131
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('\\n================================================');\n    console.log(`📊 测试结果: ${passedTests}/${totalTests} 通过`);",
            "lines": [
              191,
              192
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "testInitModeNoUser",
            "line": 11,
            "length": 209,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": []
    },
    {
      "path": "server/services/service-bus.js",
      "size": 8689,
      "lines": {
        "total": 294,
        "code": 185,
        "comments": 63,
        "blank": 46
      },
      "functions": 14,
      "classes": 1,
      "complexity": {
        "cyclomatic": 7963,
        "cognitive": 97,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 检查循环依赖\n        this._checkCircularDependency(name, new Set());",
            "lines": [
              56,
              57
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (this.serviceInstances.has(name)) {\n            return this.serviceInstances.get(name);\n        }",
            "lines": [
              53,
              69
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log(`[ServiceBus] 正在初始化服务: ${name}`);\n        this.serviceStatus.set(name, 'initializing');",
            "lines": [
              72,
              73
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log(`[ServiceBus] 服务初始化完成: ${name}`);\n            return instance;",
            "lines": [
              93,
              94
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const serviceNames = Array.from(this.services.keys());\n        const initialized = [];",
            "lines": [
              129,
              130
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 按照初始化的相反顺序关闭\n        const shutdownOrder = [...this.initializationOrder].reverse();",
            "lines": [
              250,
              251
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": []
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "test-ai-content-generation.js",
      "size": 8615,
      "lines": {
        "total": 229,
        "code": 186,
        "comments": 15,
        "blank": 28
      },
      "functions": 2,
      "classes": 0,
      "complexity": {
        "cyclomatic": 7760,
        "cognitive": 98,
        "nestingDepth": 7
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const projectPath = process.cwd();\n    const aiHandler = new AIResponseHandlerService(projectPath);",
            "lines": [
              14,
              15
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "totalFiles: 150,\n            totalDirectories: 20\n        },",
            "lines": [
              42,
              46
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "let passedTests = 0;\n    let totalTests = testCases.length;",
            "lines": [
              114,
              115
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 处理AI数据包\n            const result = await aiHandler.processAIPackage(aiPackage);",
            "lines": [
              128,
              129
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "for (const expectedFile of filesToCheck) {\n                    const filePath = path.join(projectPath, expectedFile);",
            "lines": [
              139,
              140
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('\\n================================================');\n    console.log(`📊 测试结果: ${passedTests}/${totalTests} 通过`);",
            "lines": [
              192,
              193
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "testAIContentGeneration",
            "line": 11,
            "length": 203,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 7,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": []
    },
    {
      "path": "test-ai-response-handler.js",
      "size": 8724,
      "lines": {
        "total": 264,
        "code": 184,
        "comments": 32,
        "blank": 50
      },
      "functions": 4,
      "classes": 0,
      "complexity": {
        "cyclomatic": 7230,
        "cognitive": 27,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const batchResult = await aiHandler.saveDocuments(documents);\n        console.log('✅ 批量保存结果:', JSON.stringify(batchResult, null, 2));",
            "lines": [
              75,
              76
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const packageResult = await aiHandler.processAIPackage(aiPackage);\n        console.log('✅ AI数据包处理结果:', JSON.stringify(packageResult, null, 2));",
            "lines": [
              89,
              90
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('\\n🎉 AIResponseHandlerService测试通过!');\n        return true;",
            "lines": [
              97,
              98
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const workflowService = new WorkflowService();\n    const aiHandler = new AIResponseHandlerService(TEST_PROJECT_PATH);",
            "lines": [
              113,
              114
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const aiHandler = new AIResponseHandlerService(TEST_PROJECT_PATH);\n    \n    try {",
            "lines": [
              21,
              115
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const result = await aiHandler.processAIPackage(aiPackage);\n        console.log('✅ 工作流AI数据包处理完成:', result.savedFiles.length, '个文件');",
            "lines": [
              164,
              165
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const progress = workflowService.getProgress(workflowId);\n        console.log('✅ 工作流进度:', JSON.stringify(progress, null, 2));",
            "lines": [
              173,
              174
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('\\n🎉 工作流集成测试通过!');\n        return true;",
            "lines": [
              176,
              177
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.error('详细错误:', error);\n        return false;\n    }",
            "lines": [
              103,
              182
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "testAIResponseHandler",
            "line": 18,
            "length": 89,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "LongMethod",
            "function": "testWorkflowIntegration",
            "line": 111,
            "length": 75,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module"
      ]
    },
    {
      "path": "server/services/template-reader.js",
      "size": 7583,
      "lines": {
        "total": 242,
        "code": 160,
        "comments": 46,
        "blank": 40
      },
      "functions": 10,
      "classes": 1,
      "complexity": {
        "cyclomatic": 7065,
        "cognitive": 105,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);",
            "lines": [
              10,
              11
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const categoryDir = categoryPaths[category] || category;\n        const basePath = path.join(this.promptsDir, categoryDir);",
            "lines": [
              80,
              81
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return path.join(baseDir, fileName); // 返回原始路径用于错误处理\n    }",
            "lines": [
              124,
              125
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const items = fs.readdirSync(dir, { withFileTypes: true });",
            "lines": [
              151,
              152
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "for (const item of items) {\n                const fullPath = path.join(dir, item.name);",
            "lines": [
              154,
              155
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const categoryPaths = {\n            'modes': 'modes',\n            'analysis': 'analysis',",
            "lines": [
              69,
              189
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "'modes': 'modes',\n            'analysis': 'analysis',\n            'generation': 'generation',",
            "lines": [
              70,
              190
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "'languages': 'languages',\n            // 向后兼容映射\n            'analysis-templates': 'analysis',",
            "lines": [
              74,
              194
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 向后兼容映射\n            'analysis-templates': 'analysis',\n            'document-templates': 'generation',",
            "lines": [
              75,
              195
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "'analysis-templates': 'analysis',\n            'document-templates': 'generation',\n            'templates': 'generation'  // 旧templates映射到generation",
            "lines": [
              76,
              196
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "'document-templates': 'generation',\n            'templates': 'generation'  // 旧templates映射到generation\n        };",
            "lines": [
              77,
              197
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "'templates': 'generation'  // 旧templates映射到generation\n        };",
            "lines": [
              78,
              198
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "};\n\n        const categoryDir = categoryPaths[category] || category;",
            "lines": [
              79,
              199
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "test-ultra-detailed-analyzer.js",
      "size": 7834,
      "lines": {
        "total": 158,
        "code": 117,
        "comments": 16,
        "blank": 25
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 6881,
        "cognitive": 43,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "async function testUltraDetailedAnalyzer() {\n    console.log('🔬 测试超详细代码分析器...\\n');",
            "lines": [
              12,
              13
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "testUltraDetailedAnalyzer",
            "line": 13,
            "length": 144,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "test-complete-ai-content.js",
      "size": 7765,
      "lines": {
        "total": 186,
        "code": 52,
        "comments": 109,
        "blank": 25
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 6824,
        "cognitive": 19,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "async function testCompleteAIContent() {\n    console.log('🧪 测试完整AI内容生成系统...\\n');",
            "lines": [
              53,
              54
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "testCompleteAIContent",
            "line": 54,
            "length": 131,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/routes/system/prompts.js",
      "size": 7006,
      "lines": {
        "total": 225,
        "code": 145,
        "comments": 48,
        "blank": 32
      },
      "functions": 3,
      "classes": 0,
      "complexity": {
        "cyclomatic": 6765,
        "cognitive": 66,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const previousMode = server.currentMode;\n            server.currentMode = mode;",
            "lines": [
              62,
              63
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "success(res, responseData);\n        } catch (err) {",
            "lines": [
              38,
              115
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const parsedVariables = variables ? JSON.parse(variables) : {};\n            const template = await promptService.loadPrompt('templates', name, parsedVariables);",
            "lines": [
              184,
              185
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createPromptsRoutes",
            "line": 14,
            "length": 183,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/prompt-manager.js",
      "size": 6810,
      "lines": {
        "total": 262,
        "code": 159,
        "comments": 64,
        "blank": 40
      },
      "functions": 13,
      "classes": 1,
      "complexity": {
        "cyclomatic": 6729,
        "cognitive": 26,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// Template variables registry\n    this.globalVariables = new Map();",
            "lines": [
              24,
              25
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 依赖注入 - 使用TemplateReader替代HTTP API调用\n    this.templateReader = new TemplateReader();",
            "lines": [
              27,
              28
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// Set up global variables\n    this._setupGlobalVariables();",
            "lines": [
              39,
              40
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('[PromptManager] Initialized without HTTP dependencies');\n  }",
            "lines": [
              42,
              43
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// Process template with variables\n      const processedContent = this._processPrompt(templateData.content, variables);",
            "lines": [
              78,
              79
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": []
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/services/language-service.js",
      "size": 6961,
      "lines": {
        "total": 195,
        "code": 122,
        "comments": 52,
        "blank": 21
      },
      "functions": 10,
      "classes": 1,
      "complexity": {
        "cyclomatic": 6495,
        "cognitive": 70,
        "nestingDepth": 3
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [],
        "smells": []
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "test-enhanced-real-ai-content.js",
      "size": 7462,
      "lines": {
        "total": 149,
        "code": 99,
        "comments": 23,
        "blank": 30
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 6288,
        "cognitive": 19,
        "nestingDepth": 3
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "async function testEnhancedRealAIContent() {\n    console.log('🚀 测试基于真实数据的增强版AI内容生成器...\\n');",
            "lines": [
              12,
              13
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 第六步：质量对比分析\n        console.log('\\n📈 增强版与旧版本质量对比:');",
            "lines": [
              86,
              87
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 真实依赖信息\n            'express', 'cors', 'helmet', 'compression',",
            "lines": [
              106,
              107
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const dataRichness = specificData.filter(data => totalContent.includes(data));\n        console.log(`🎯 具体数据丰富度: ${dataRichness.length}/${specificData.length} 个真实数据点`);",
            "lines": [
              116,
              117
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "testEnhancedRealAIContent",
            "line": 13,
            "length": 135,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          }
        ]
      },
      "patterns": []
    },
    {
      "path": "server/routes/index.js",
      "size": 6715,
      "lines": {
        "total": 198,
        "code": 98,
        "comments": 57,
        "blank": 45
      },
      "functions": 2,
      "classes": 0,
      "complexity": {
        "cyclomatic": 5871,
        "cognitive": 9,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// Create模式路由\nimport { createCreateModeRoutes } from './create/index.js';",
            "lines": [
              23,
              24
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// Fix模式路由\nimport { createFixModeRoutes } from './fix/index.js';",
            "lines": [
              26,
              27
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// Analyze模式路由\nimport { createAnalyzeModeRoutes } from './analyze/index.js';",
            "lines": [
              29,
              30
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 语言智能系统路由\nimport languageIntelligenceRouter from './language/index.js';",
            "lines": [
              32,
              33
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 模式切换端点 (独立路径)\n    router.use('/mode', promptsRouter);",
            "lines": [
              61,
              62
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 语言检测、模板生成、智能提示词系统\n    router.use('/', languageIntelligenceRouter);",
            "lines": [
              125,
              126
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createAppRoutes",
            "line": 42,
            "length": 137,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/init/structure.js",
      "size": 6272,
      "lines": {
        "total": 183,
        "code": 116,
        "comments": 38,
        "blank": 29
      },
      "functions": 3,
      "classes": 0,
      "complexity": {
        "cyclomatic": 5745,
        "cognitive": 106,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 创建工作流会话\n            const workflowId = workflowService.createWorkflow(projectPath, 'init');",
            "lines": [
              31,
              32
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为运行中\n            workflowService.updateStep(workflowId, 0, 'running');",
            "lines": [
              34,
              35
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 执行项目扫描\n            const scanResult = await server.projectScanner.scanProject(projectPath);",
            "lines": [
              37,
              38
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 更新步骤状态为已完成\n            workflowService.updateStep(workflowId, 0, 'completed', scanResult);",
            "lines": [
              40,
              41
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "} catch (err) {\n            console.error('[Structure] 项目结构扫描失败:', err);",
            "lines": [
              58,
              59
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 生成摘要信息\n            const summary = _generateStructureSummary(scanResult, server);",
            "lines": [
              95,
              96
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createStructureRoutes",
            "line": 14,
            "length": 95,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/init/data.js",
      "size": 6428,
      "lines": {
        "total": 189,
        "code": 112,
        "comments": 38,
        "blank": 39
      },
      "functions": 2,
      "classes": 0,
      "complexity": {
        "cyclomatic": 5677,
        "cognitive": 70,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error, workflowSuccess } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取工作流进度\n            const progress = workflowService.getProgress(workflowId);",
            "lines": [
              31,
              32
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { workflowId } = req.params;",
            "lines": [
              23,
              62
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { workflowId } = req.params;\n            \n            if (!workflowId) {",
            "lines": [
              24,
              63
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              25,
              64
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              26,
              65
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取工作流信息\n            const progress = workflowService.getProgress(workflowId);",
            "lines": [
              70,
              71
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const progress = workflowService.getProgress(workflowId);\n            \n            if (!progress) {",
            "lines": [
              33,
              72
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!progress) {\n                return error(res, `工作流不存在: ${workflowId}`, 404);",
            "lines": [
              34,
              73
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!progress) {\n                return error(res, `工作流不存在: ${workflowId}`, 404);\n            }",
            "lines": [
              35,
              74
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, `工作流不存在: ${workflowId}`, 404);\n            }",
            "lines": [
              36,
              75
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 扫描项目文件树\n            const scanResult = await server.projectScanner.scanProject(progress.projectPath);",
            "lines": [
              77,
              78
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "try {\n            const { workflowId } = req.params;",
            "lines": [
              23,
              103
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const { workflowId } = req.params;\n            \n            if (!workflowId) {",
            "lines": [
              24,
              104
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);",
            "lines": [
              25,
              105
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!workflowId) {\n                return error(res, '工作流ID不能为空', 400);\n            }",
            "lines": [
              26,
              106
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 获取工作流详细状态\n            const progress = workflowService.getProgress(workflowId);",
            "lines": [
              111,
              112
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const progress = workflowService.getProgress(workflowId);\n            \n            if (!progress) {",
            "lines": [
              33,
              113
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!progress) {\n                return error(res, `工作流不存在: ${workflowId}`, 404);",
            "lines": [
              34,
              114
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "if (!progress) {\n                return error(res, `工作流不存在: ${workflowId}`, 404);\n            }",
            "lines": [
              35,
              115
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return error(res, `工作流不存在: ${workflowId}`, 404);\n            }",
            "lines": [
              36,
              116
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 创建工作流\n            const workflowId = workflowService.createWorkflow(projectPath, 'init');",
            "lines": [
              140,
              141
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createInitDataRoutes",
            "line": 14,
            "length": 171,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "test-enhanced-ai-content.js",
      "size": 6306,
      "lines": {
        "total": 156,
        "code": 120,
        "comments": 10,
        "blank": 26
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 5544,
        "cognitive": 17,
        "nestingDepth": 3
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "async function testEnhancedContent() {\n    console.log('🧪 测试增强版AI内容生成系统...\\n');",
            "lines": [
              62,
              63
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('✅ 语言分析生成完成');\n        console.log(`📄 内容长度: ${languageAnalysis.length} 字符`);",
            "lines": [
              98,
              99
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('✅ 文件分析生成完成');\n        console.log(`📄 内容长度: ${fileAnalysis.length} 字符`);",
            "lines": [
              105,
              106
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('✅ 系统架构生成完成');\n        console.log(`📄 内容长度: ${systemArchitecture.length} 字符`);",
            "lines": [
              115,
              116
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "projectStructure: mockProjectData,\n            languageData: mockLanguageData\n        });",
            "lines": [
              111,
              121
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('✅ 技术栈生成完成');\n        console.log(`📄 内容长度: ${techStack.length} 字符`);",
            "lines": [
              125,
              126
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('\\n✨ 测试完成！所有文档已保存到 test-output/ 目录');\n        console.log('🎯 增强版AI内容生成系统测试成功 - 内容更加详细和丰富！');",
            "lines": [
              146,
              147
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "testEnhancedContent",
            "line": 63,
            "length": 92,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          }
        ]
      },
      "patterns": []
    },
    {
      "path": "server/services/prompt-service.js",
      "size": 5820,
      "lines": {
        "total": 201,
        "code": 113,
        "comments": 69,
        "blank": 19
      },
      "functions": 14,
      "classes": 1,
      "complexity": {
        "cyclomatic": 5278,
        "cognitive": -2,
        "nestingDepth": 2
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [],
        "smells": []
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "test-real-project-scanner.js",
      "size": 5088,
      "lines": {
        "total": 119,
        "code": 95,
        "comments": 5,
        "blank": 19
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 4625,
        "cognitive": 21,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "async function testRealProjectScanner() {\n    console.log('🔍 测试真实项目扫描器...\\n');",
            "lines": [
              11,
              12
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const scanner = new RealProjectScanner(projectPath);\n        const scanResults = await scanner.scanProject();",
            "lines": [
              19,
              20
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "testRealProjectScanner",
            "line": 12,
            "length": 106,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "test-fixed-structure.js",
      "size": 4392,
      "lines": {
        "total": 126,
        "code": 101,
        "comments": 9,
        "blank": 16
      },
      "functions": 2,
      "classes": 0,
      "complexity": {
        "cyclomatic": 3895,
        "cognitive": 57,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const projectPath = process.cwd();\n    const aiHandler = new AIResponseHandlerService(projectPath);",
            "lines": [
              14,
              15
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "let passedTests = 0;\n    let totalTests = testCases.length;",
            "lines": [
              54,
              55
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 处理AI数据包\n            const result = await aiHandler.processAIPackage(testCase.aiPackage);",
            "lines": [
              61,
              62
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "console.log('\\n================================================');\n    console.log(`📊 测试结果: ${passedTests}/${totalTests} 通过`);",
            "lines": [
              87,
              88
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "testFixedStructure",
            "line": 11,
            "length": 100,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": []
    },
    {
      "path": "server/services/service-registry.js",
      "size": 3956,
      "lines": {
        "total": 108,
        "code": 69,
        "comments": 19,
        "blank": 20
      },
      "functions": 3,
      "classes": 0,
      "complexity": {
        "cyclomatic": 3609,
        "cognitive": 3,
        "nestingDepth": 2
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": ".register('enhancedLanguageDetector', EnhancedLanguageDetector, {}, [])\n        .register('fileContentAnalyzer', FileContentAnalyzer, {}, [])",
            "lines": [
              43,
              44
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const serviceBus = registerServices(configDir);\n    await serviceBus.initializeAll();",
            "lines": [
              76,
              77
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "const stats = serviceBus.getStats();\n    console.log(`[ServiceRegistry] 服务系统初始化完成，共 ${stats.initializedServices} 个服务`);",
            "lines": [
              79,
              80
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": []
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/services/workflow-service.js",
      "size": 4069,
      "lines": {
        "total": 143,
        "code": 65,
        "comments": 62,
        "blank": 17
      },
      "functions": 11,
      "classes": 1,
      "complexity": {
        "cyclomatic": 3607,
        "cognitive": 25,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "* @param {string} projectPath - 项目路径\n     * @param {string} mode - 工作模式\n     * @returns {string} 工作流ID",
            "lines": [
              15,
              26
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "* @param {string} mode - 工作模式\n     * @returns {string} 工作流ID\n     */",
            "lines": [
              16,
              27
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": []
      },
      "patterns": [
        "Factory",
        "Module"
      ]
    },
    {
      "path": "tests/setup.js",
      "size": 3517,
      "lines": {
        "total": 159,
        "code": 136,
        "comments": 12,
        "blank": 11
      },
      "functions": 0,
      "classes": 0,
      "complexity": {
        "cyclomatic": 3371,
        "cognitive": 4,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [],
        "smells": []
      },
      "patterns": [
        "Factory",
        "Module"
      ]
    },
    {
      "path": "server/routes/system/health.js",
      "size": 3370,
      "lines": {
        "total": 110,
        "code": 78,
        "comments": 21,
        "blank": 11
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 3260,
        "cognitive": 4,
        "nestingDepth": 6
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createHealthRoutes",
            "line": 14,
            "length": 95,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 6,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/system/mcp.js",
      "size": 3250,
      "lines": {
        "total": 112,
        "code": 68,
        "comments": 27,
        "blank": 17
      },
      "functions": 3,
      "classes": 0,
      "complexity": {
        "cyclomatic": 3125,
        "cognitive": 29,
        "nestingDepth": 5
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "import express from 'express';\nimport { success, error } from '../../services/response-service.js';",
            "lines": [
              5,
              6
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": [
          {
            "type": "LongMethod",
            "function": "createMCPRoutes",
            "line": 14,
            "length": 79,
            "suggestion": "考虑将长方法拆分为多个较小的方法"
          },
          {
            "type": "DeepNesting",
            "depth": 5,
            "suggestion": "考虑重构以减少嵌套层级"
          }
        ]
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/routes/language/index.js",
      "size": 3702,
      "lines": {
        "total": 96,
        "code": 77,
        "comments": 10,
        "blank": 9
      },
      "functions": 0,
      "classes": 0,
      "complexity": {
        "cyclomatic": 2977,
        "cognitive": 3,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 语言检测引擎API路由\nrouter.use('/language', detectionRouter);",
            "lines": [
              12,
              13
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 模板生成引擎API路由  \nrouter.use('/template', templatesRouter);",
            "lines": [
              15,
              16
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 提示词智能系统API路由\nrouter.use('/prompts', promptsRouter);",
            "lines": [
              18,
              19
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": []
      },
      "patterns": [
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "server/services/response-service.js",
      "size": 2668,
      "lines": {
        "total": 103,
        "code": 55,
        "comments": 39,
        "blank": 9
      },
      "functions": 5,
      "classes": 0,
      "complexity": {
        "cyclomatic": 2412,
        "cognitive": 3,
        "nestingDepth": 2
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "* @param {string} message - 消息\n * @param {number} status - 状态码\n */",
            "lines": [
              10,
              84
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "return res.status(status).json({\n        success: true,\n        message,",
            "lines": [
              14,
              88
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "data,\n        timestamp: new Date().toISOString()\n    });",
            "lines": [
              17,
              92
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": []
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/routes/init/index.js",
      "size": 2617,
      "lines": {
        "total": 72,
        "code": 53,
        "comments": 14,
        "blank": 7
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 2317,
        "cognitive": 0,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "const { success } = require('../../services/response-service.js');\n        return success(res, {\n            mode: 'init',",
            "lines": [
              39,
              51
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": []
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    },
    {
      "path": "jest.config.js",
      "size": 1266,
      "lines": {
        "total": 67,
        "code": 34,
        "comments": 22,
        "blank": 11
      },
      "functions": 0,
      "classes": 0,
      "complexity": {
        "cyclomatic": 1118,
        "cognitive": 1,
        "nestingDepth": 4
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 设置和清理\n  setupFilesAfterEnv: ['<rootDir>/tests/setup.js'],",
            "lines": [
              55,
              56
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": []
      },
      "patterns": [
        "Module"
      ]
    },
    {
      "path": "server/routes/system/index.js",
      "size": 863,
      "lines": {
        "total": 32,
        "code": 12,
        "comments": 13,
        "blank": 7
      },
      "functions": 1,
      "classes": 0,
      "complexity": {
        "cyclomatic": 755,
        "cognitive": 0,
        "nestingDepth": 1
      },
      "quality": {
        "maintainabilityIndex": 0,
        "duplications": [
          {
            "block": "// 健康检查路由\n    router.use('/', createHealthRoutes(services, serverObject));",
            "lines": [
              19,
              20
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// MCP协议路由\n    router.use('/mcp', createMCPRoutes(services, serverObject));",
            "lines": [
              22,
              23
            ],
            "suggestion": "考虑提取为公共函数"
          },
          {
            "block": "// 提示词管理路由\n    router.use('/', createPromptRoutes(services, serverObject));",
            "lines": [
              25,
              26
            ],
            "suggestion": "考虑提取为公共函数"
          }
        ],
        "smells": []
      },
      "patterns": [
        "Factory",
        "Module",
        "Express-Route"
      ]
    }
  ],
  "dependencies": {
    "internal": [
      "./server/analyzers/real-project-scanner.js",
      "./server/analyzers/ultra-detailed-code-analyzer.js",
      "./server/services/enhanced-ai-content-generator.js",
      "./server/services/ai-content-generator.js",
      "./server/services/ai-response-handler.js",
      "./ai-content-generator.js",
      "../../services/response-service.js",
      "../../services/ai-response-handler.js",
      "./server/routes/init/modules-analysis.js",
      "./server/routes/init/modules-docs.js",
      "./server/services/workflow-service.js",
      "./server/services/workflow-state-service.js",
      "./system/health.js",
      "./system/mcp.js",
      "./system/prompts.js",
      "./init/structure.js",
      "./init/language.js",
      "./init/files.js",
      "./init/documents.js",
      "./init/modules-analysis.js",
      "./init/modules-docs.js",
      "./init/prompts.js",
      "./init/contracts.js",
      "./init/data.js",
      "./create/index.js",
      "./fix/index.js",
      "./analyze/index.js",
      "./language/index.js",
      "./contracts.js",
      "./data.js",
      "./documents.js",
      "./files.js",
      "./language.js",
      "./modules-analysis.js",
      "./modules-docs.js",
      "./prompts.js",
      "./structure.js",
      "./services/template-reader.js",
      "./server/services/config-service.js",
      "./server/prompt-manager.js",
      "./server/services/prompt-service.js",
      "./server/analyzers/project-scanner.js",
      "./server/analyzers/enhanced-language-detector.js",
      "./server/analyzers/file-content-analyzer.js",
      "./server/services/unified-template-service.js",
      "./server/routes/index.js",
      "./health.js",
      "./mcp.js",
      "../../services/language-intelligence-service.js",
      "../../services/template-engine-service.js",
      "../../services/unified-template-service.js",
      "./service-bus.js",
      "./config-service.js",
      "../prompt-manager.js",
      "../analyzers/project-scanner.js",
      "./workflow-state-service.js",
      "./workflow-service.js",
      "../analyzers/enhanced-language-detector.js",
      "../analyzers/file-content-analyzer.js",
      "./unified-template-service.js",
      "./language-intelligence-service.js",
      "./template-reader.js",
      "./issues.js",
      "./diagnosis.js",
      "./fixes.js",
      "./quality.js",
      "./performance.js",
      "./dependencies.js",
      "./security.js",
      "./reports.js",
      "./modules.js",
      "./api.js",
      "./features.js",
      "./detector.js",
      "../language/detector.js",
      "../language/template-generator.js",
      "../language/prompt-intelligence.js",
      "./detection.js",
      "./templates.js",
      "../../server/routes/create/features.js",
      "../../server/routes/init/contracts.js",
      "../../server/analyzers/integration-analyzer.js",
      "./middleware/auth.js",
      "../language/language-prompt-generator.js"
    ],
    "external": [
      "fs",
      "path",
      "url",
      "fs/promises",
      "express",
      null,
      "ws",
      "cors",
      "helmet",
      "compression",
      "express-rate-limit",
      "http",
      "crypto",
      "@jest/globals",
      "supertest"
    ],
    "graph": {
      "test-ultra-detailed-analyzer.js": [
        "./server/analyzers/real-project-scanner.js",
        "./server/analyzers/ultra-detailed-code-analyzer.js"
      ],
      "test-enhanced-real-ai-content.js": [
        "./server/analyzers/real-project-scanner.js",
        "./server/services/enhanced-ai-content-generator.js"
      ],
      "test-real-project-scanner.js": [
        "./server/analyzers/real-project-scanner.js"
      ],
      "test-complete-ai-content.js": [
        "./server/services/ai-content-generator.js"
      ],
      "test-enhanced-ai-content.js": [
        "./server/services/ai-content-generator.js"
      ],
      "test-ai-content-generation.js": [
        "./server/services/ai-response-handler.js"
      ],
      "server/services/ai-response-handler.js": [
        "./ai-content-generator.js"
      ],
      "server/routes/init/language.js": [
        "../../services/response-service.js",
        "../../services/ai-response-handler.js"
      ],
      "server/routes/init/structure.js": [
        "../../services/response-service.js"
      ],
      "server/routes/init/data.js": [
        "../../services/response-service.js"
      ],
      "test-init-no-user.js": [
        "./server/services/ai-response-handler.js"
      ],
      "test-fixed-structure.js": [
        "./server/services/ai-response-handler.js"
      ],
      "test-split-modules.js": [
        "./server/routes/init/modules-analysis.js",
        "./server/routes/init/modules-docs.js",
        "./server/services/workflow-service.js",
        "./server/services/workflow-state-service.js"
      ],
      "server/routes/index.js": [
        "./system/health.js",
        "./system/mcp.js",
        "./system/prompts.js",
        "./init/structure.js",
        "./init/language.js",
        "./init/files.js",
        "./init/documents.js",
        "./init/modules-analysis.js",
        "./init/modules-docs.js",
        "./init/prompts.js",
        "./init/contracts.js",
        "./init/data.js",
        "./create/index.js",
        "./fix/index.js",
        "./analyze/index.js",
        "./language/index.js"
      ],
      "server/routes/init/index.js": [
        "./contracts.js",
        "./data.js",
        "./documents.js",
        "./files.js",
        "./language.js",
        "./modules-analysis.js",
        "./modules-docs.js",
        "./prompts.js",
        "./structure.js"
      ],
      "server/routes/init/modules-docs.js": [
        "../../services/response-service.js",
        "../../services/ai-response-handler.js"
      ],
      "server/routes/init/modules-analysis.js": [
        "../../services/response-service.js",
        "../../services/ai-response-handler.js"
      ],
      "server/routes/init/contracts.js": [
        "../../services/response-service.js",
        "../../services/ai-response-handler.js"
      ],
      "test-ai-response-handler.js": [
        "./server/services/ai-response-handler.js",
        "./server/services/workflow-service.js"
      ],
      "server/routes/init/documents.js": [
        "../../services/response-service.js",
        "../../services/ai-response-handler.js"
      ],
      "server/prompt-manager.js": [
        "./services/template-reader.js"
      ],
      "server/routes/init/files.js": [
        "../../services/response-service.js"
      ],
      "index.js": [
        "./server/services/config-service.js",
        "./server/prompt-manager.js",
        "./server/services/prompt-service.js",
        "./server/analyzers/project-scanner.js",
        "./server/services/workflow-state-service.js",
        "./server/services/workflow-service.js",
        "./server/analyzers/enhanced-language-detector.js",
        "./server/analyzers/file-content-analyzer.js",
        "./server/services/unified-template-service.js",
        "./server/routes/index.js"
      ],
      "server/routes/system/index.js": [
        "./health.js",
        "./mcp.js",
        "./prompts.js"
      ],
      "server/routes/language/templates.js": [
        "../../services/language-intelligence-service.js",
        "../../services/template-engine-service.js",
        "../../services/unified-template-service.js",
        "../../services/response-service.js"
      ],
      "server/routes/system/mcp.js": [
        "../../services/response-service.js"
      ],
      "server/services/service-registry.js": [
        "./service-bus.js",
        "./config-service.js",
        "../prompt-manager.js",
        "../analyzers/project-scanner.js",
        "./workflow-state-service.js",
        "./workflow-service.js",
        "../analyzers/enhanced-language-detector.js",
        "../analyzers/file-content-analyzer.js",
        "./unified-template-service.js",
        "./language-intelligence-service.js",
        "./template-reader.js"
      ],
      "server/services/unified-template-service.js": [
        "./language-intelligence-service.js",
        "./template-reader.js"
      ],
      "server/routes/fix/diagnosis.js": [
        "../../services/response-service.js"
      ],
      "server/routes/system/prompts.js": [
        "../../services/response-service.js"
      ],
      "server/routes/system/health.js": [
        "../../services/response-service.js"
      ],
      "server/routes/fix/fixes.js": [
        "../../services/response-service.js"
      ],
      "server/routes/fix/issues.js": [
        "../../services/response-service.js"
      ],
      "server/routes/fix/index.js": [
        "./issues.js",
        "./diagnosis.js",
        "./fixes.js",
        "../../services/response-service.js"
      ],
      "server/routes/analyze/quality.js": [
        "../../services/response-service.js"
      ],
      "server/routes/analyze/security.js": [
        "../../services/response-service.js"
      ],
      "server/routes/analyze/index.js": [
        "./quality.js",
        "./performance.js",
        "./dependencies.js",
        "./security.js",
        "./reports.js",
        "../../services/response-service.js"
      ],
      "server/routes/analyze/reports.js": [
        "../../services/response-service.js"
      ],
      "server/routes/analyze/dependencies.js": [
        "../../services/response-service.js"
      ],
      "server/routes/analyze/performance.js": [
        "../../services/response-service.js"
      ],
      "server/routes/create/features.js": [
        "../../services/response-service.js"
      ],
      "server/routes/create/index.js": [
        "./modules.js",
        "./api.js",
        "./features.js",
        "./data.js",
        "../../services/response-service.js"
      ],
      "server/routes/init/prompts.js": [
        "../../services/response-service.js"
      ],
      "server/routes/language/prompts.js": [
        "../../services/language-intelligence-service.js",
        "../../services/response-service.js"
      ],
      "server/routes/language/detection.js": [
        "../../services/language-intelligence-service.js",
        "../../services/response-service.js"
      ],
      "server/language/template-generator.js": [
        "./detector.js"
      ],
      "server/services/language-intelligence-service.js": [
        "../language/detector.js",
        "../language/template-generator.js",
        "../language/prompt-intelligence.js"
      ],
      "server/routes/language/index.js": [
        "./detection.js",
        "./templates.js",
        "./prompts.js"
      ],
      "server/services/template-engine-service.js": [
        "../language/template-generator.js"
      ],
      "server/language/prompt-intelligence.js": [
        "./detector.js"
      ],
      "server/services/workflow-service.js": [
        "./workflow-state-service.js"
      ],
      "server/routes/create/data.js": [
        "../../services/response-service.js"
      ],
      "tests/integration/create-requirements-routes.test.js": [
        "../../server/routes/create/features.js"
      ],
      "tests/integration/contracts-routes.test.js": [
        "../../server/routes/init/contracts.js",
        "../../server/analyzers/integration-analyzer.js"
      ],
      "tests/unit/integration-analyzer.test.js": [
        "../../server/analyzers/integration-analyzer.js"
      ],
      "server/routes/create/api.js": [
        "../../services/response-service.js",
        "./middleware/auth.js"
      ],
      "server/routes/create/modules.js": [
        "../../services/response-service.js"
      ],
      "server/services/prompt-service.js": [
        "../prompt-manager.js"
      ],
      "server/services/language-service.js": [
        "../language/detector.js",
        "../analyzers/enhanced-language-detector.js",
        "../language/language-prompt-generator.js"
      ],
      "server/language/language-prompt-generator.js": [
        "./detector.js"
      ],
      "server/analyzers/enhanced-language-detector.js": [
        "../language/detector.js"
      ]
    }
  },
  "codeQuality": {
    "duplicateCode": [],
    "longMethods": [
      {
        "name": "analyzeProject",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js",
        "line": 20,
        "length": 83
      },
      {
        "name": "_analyzeFile",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js",
        "line": 109,
        "length": 61
      },
      {
        "name": "_analyzeLines",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js",
        "line": 174,
        "length": 52
      },
      {
        "name": "_extractFunctions",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js",
        "line": 230,
        "length": 105
      },
      {
        "name": "_extractClasses",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js",
        "line": 281,
        "length": 34
      },
      {
        "name": "_calculateComplexity",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js",
        "line": 376,
        "length": 54
      },
      {
        "name": "_analyzeCodeQuality",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js",
        "line": 434,
        "length": 31
      },
      {
        "name": "_identifyPatterns",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js",
        "line": 469,
        "length": 272
      },
      {
        "name": "_extractFunctionBody",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js",
        "line": 513,
        "length": 228
      },
      {
        "name": "_analyzeClassMembers",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js",
        "line": 541,
        "length": 198
      },
      {
        "name": "_mergeFileAnalysis",
        "file": "server/analyzers/ultra-detailed-code-analyzer.js",
        "line": 641,
        "length": 77
      },
      {
        "name": "testUltraDetailedAnalyzer",
        "file": "test-ultra-detailed-analyzer.js",
        "line": 13,
        "length": 144
      },
      {
        "name": "testEnhancedRealAIContent",
        "file": "test-enhanced-real-ai-content.js",
        "line": 13,
        "length": 135
      },
      {
        "name": "generateRealProjectOverview",
        "file": "server/services/enhanced-ai-content-generator.js",
        "line": 23,
        "length": 111
      },
      {
        "name": "generateRealAPIDocumentation",
        "file": "server/services/enhanced-ai-content-generator.js",
        "line": 140,
        "length": 72
      },
      {
        "name": "generateRealModuleArchitecture",
        "file": "server/services/enhanced-ai-content-generator.js",
        "line": 218,
        "length": 80
      },
      {
        "name": "_scanFileStructure",
        "file": "server/analyzers/real-project-scanner.js",
        "line": 84,
        "length": 35
      },
      {
        "name": "_scanDirectory",
        "file": "server/analyzers/real-project-scanner.js",
        "line": 123,
        "length": 56
      },
      {
        "name": "_analyzeCode",
        "file": "server/analyzers/real-project-scanner.js",
        "line": 183,
        "length": 50
      },
      {
        "name": "_analyzeFileContent",
        "file": "server/analyzers/real-project-scanner.js",
        "line": 237,
        "length": 93
      },
      {
        "name": "_analyzeDependencies",
        "file": "server/analyzers/real-project-scanner.js",
        "line": 353,
        "length": 41
      },
      {
        "name": "_analyzeConfiguration",
        "file": "server/analyzers/real-project-scanner.js",
        "line": 398,
        "length": 40
      },
      {
        "name": "_analyzeModuleStructure",
        "file": "server/analyzers/real-project-scanner.js",
        "line": 501,
        "length": 37
      },
      {
        "name": "testRealProjectScanner",
        "file": "test-real-project-scanner.js",
        "line": 12,
        "length": 106
      },
      {
        "name": "testCompleteAIContent",
        "file": "test-complete-ai-content.js",
        "line": 54,
        "length": 131
      },
      {
        "name": "generateProjectOverview",
        "file": "server/services/ai-content-generator.js",
        "line": 26,
        "length": 63
      },
      {
        "name": "generateLanguageAnalysis",
        "file": "server/services/ai-content-generator.js",
        "line": 95,
        "length": 41
      },
      {
        "name": "generateFileAnalysis",
        "file": "server/services/ai-content-generator.js",
        "line": 142,
        "length": 35
      },
      {
        "name": "generateSystemArchitecture",
        "file": "server/services/ai-content-generator.js",
        "line": 183,
        "length": 42
      },
      {
        "name": "generateTechStack",
        "file": "server/services/ai-content-generator.js",
        "line": 231,
        "length": 35
      },
      {
        "name": "generateModulesCatalog",
        "file": "server/services/ai-content-generator.js",
        "line": 272,
        "length": 42
      },
      {
        "name": "generateModuleDetail",
        "file": "server/services/ai-content-generator.js",
        "line": 320,
        "length": 65
      },
      {
        "name": "generateIntegrationContracts",
        "file": "server/services/ai-content-generator.js",
        "line": 391,
        "length": 63
      },
      {
        "name": "testEnhancedContent",
        "file": "test-enhanced-ai-content.js",
        "line": 63,
        "length": 92
      },
      {
        "name": "testAIContentGeneration",
        "file": "test-ai-content-generation.js",
        "line": 11,
        "length": 203
      },
      {
        "name": "saveDocuments",
        "file": "server/services/ai-response-handler.js",
        "line": 79,
        "length": 33
      },
      {
        "name": "processAIPackage",
        "file": "server/services/ai-response-handler.js",
        "line": 119,
        "length": 36
      },
      {
        "name": "prepareDocuments",
        "file": "server/services/ai-response-handler.js",
        "line": 163,
        "length": 128
      },
      {
        "name": "checkMgKiroStatus",
        "file": "server/services/ai-response-handler.js",
        "line": 296,
        "length": 39
      },
      {
        "name": "createLanguageRoutes",
        "file": "server/routes/init/language.js",
        "line": 15,
        "length": 304
      },
      {
        "name": "_generateLanguageReport",
        "file": "server/routes/init/language.js",
        "line": 325,
        "length": 51
      },
      {
        "name": "createStructureRoutes",
        "file": "server/routes/init/structure.js",
        "line": 14,
        "length": 95
      },
      {
        "name": "_generateStructureSummary",
        "file": "server/routes/init/structure.js",
        "line": 116,
        "length": 33
      },
      {
        "name": "createInitDataRoutes",
        "file": "server/routes/init/data.js",
        "line": 14,
        "length": 171
      },
      {
        "name": "testInitModeNoUser",
        "file": "test-init-no-user.js",
        "line": 11,
        "length": 209
      },
      {
        "name": "testFixedStructure",
        "file": "test-fixed-structure.js",
        "line": 11,
        "length": 100
      },
      {
        "name": "testRoutesRegistration",
        "file": "test-split-modules.js",
        "line": 44,
        "length": 63
      },
      {
        "name": "testModulesAnalysisRoute",
        "file": "test-split-modules.js",
        "line": 111,
        "length": 45
      },
      {
        "name": "testModulesDocsRoute",
        "file": "test-split-modules.js",
        "line": 160,
        "length": 44
      },
      {
        "name": "testResponsibilitySeparation",
        "file": "test-split-modules.js",
        "line": 208,
        "length": 44
      },
      {
        "name": "runTests",
        "file": "test-split-modules.js",
        "line": 256,
        "length": 34
      },
      {
        "name": "createAppRoutes",
        "file": "server/routes/index.js",
        "line": 42,
        "length": 137
      },
      {
        "name": "createInitRoutes",
        "file": "server/routes/init/index.js",
        "line": 23,
        "length": 48
      },
      {
        "name": "createModulesDocsRoutes",
        "file": "server/routes/init/modules-docs.js",
        "line": 16,
        "length": 335
      },
      {
        "name": "createModulesAnalysisRoutes",
        "file": "server/routes/init/modules-analysis.js",
        "line": 16,
        "length": 352
      },
      {
        "name": "createContractsRoutes",
        "file": "server/routes/init/contracts.js",
        "line": 15,
        "length": 482
      },
      {
        "name": "testAIResponseHandler",
        "file": "test-ai-response-handler.js",
        "line": 18,
        "length": 89
      },
      {
        "name": "testWorkflowIntegration",
        "file": "test-ai-response-handler.js",
        "line": 111,
        "length": 75
      },
      {
        "name": "verifyGeneratedFiles",
        "file": "test-ai-response-handler.js",
        "line": 190,
        "length": 31
      },
      {
        "name": "createDocumentsRoutes",
        "file": "server/routes/init/documents.js",
        "line": 15,
        "length": 434
      },
      {
        "name": "readTemplate",
        "file": "server/services/template-reader.js",
        "line": 24,
        "length": 36
      },
      {
        "name": "_listTemplatesRecursive",
        "file": "server/services/template-reader.js",
        "line": 149,
        "length": 35
      },
      {
        "name": "listPrompts",
        "file": "server/prompt-manager.js",
        "line": 110,
        "length": 39
      },
      {
        "name": "createFilesRoutes",
        "file": "server/routes/init/files.js",
        "line": 14,
        "length": 313
      },
      {
        "name": "setupWebSocket",
        "file": "index.js",
        "line": 212,
        "length": 90
      },
      {
        "name": "handleWebSocketMessage",
        "file": "index.js",
        "line": 306,
        "length": 51
      },
      {
        "name": "setupGracefulShutdown",
        "file": "index.js",
        "line": 368,
        "length": 36
      },
      {
        "name": "startServer",
        "file": "index.js",
        "line": 408,
        "length": 52
      },
      {
        "name": "createMCPRoutes",
        "file": "server/routes/system/mcp.js",
        "line": 14,
        "length": 79
      },
      {
        "name": "registerServices",
        "file": "server/services/service-registry.js",
        "line": 22,
        "length": 48
      },
      {
        "name": "_initializeService",
        "file": "server/services/service-bus.js",
        "line": 68,
        "length": 35
      },
      {
        "name": "constructor",
        "file": "server/services/unified-template-service.js",
        "line": 18,
        "length": 71
      },
      {
        "name": "executeIntelligentTemplateSelection",
        "file": "server/services/unified-template-service.js",
        "line": 134,
        "length": 111
      },
      {
        "name": "generateIntelligentTemplate",
        "file": "server/services/unified-template-service.js",
        "line": 279,
        "length": 35
      },
      {
        "name": "selectHybridTemplate",
        "file": "server/services/unified-template-service.js",
        "line": 319,
        "length": 45
      },
      {
        "name": "generateTemplateByModeAndStep",
        "file": "server/services/unified-template-service.js",
        "line": 369,
        "length": 41
      },
      {
        "name": "_calculateContextConfidence",
        "file": "server/services/unified-template-service.js",
        "line": 590,
        "length": 38
      },
      {
        "name": "_selectOptimalStrategy",
        "file": "server/services/unified-template-service.js",
        "line": 635,
        "length": 47
      },
      {
        "name": "generateAdvancedAITemplate",
        "file": "server/services/unified-template-service.js",
        "line": 711,
        "length": 35
      },
      {
        "name": "getFallbackTemplate",
        "file": "server/services/unified-template-service.js",
        "line": 752,
        "length": 32
      },
      {
        "name": "getServiceStats",
        "file": "server/services/unified-template-service.js",
        "line": 788,
        "length": 39
      },
      {
        "name": "createDiagnosisRoutes",
        "file": "server/routes/fix/diagnosis.js",
        "line": 14,
        "length": 319
      },
      {
        "name": "_performDiagnosis",
        "file": "server/routes/fix/diagnosis.js",
        "line": 361,
        "length": 50
      },
      {
        "name": "_generateFixSuggestions",
        "file": "server/routes/fix/diagnosis.js",
        "line": 457,
        "length": 52
      },
      {
        "name": "createPromptsRoutes",
        "file": "server/routes/system/prompts.js",
        "line": 14,
        "length": 183
      },
      {
        "name": "createHealthRoutes",
        "file": "server/routes/system/health.js",
        "line": 14,
        "length": 95
      },
      {
        "name": "createFixesRoutes",
        "file": "server/routes/fix/fixes.js",
        "line": 14,
        "length": 1761
      },
      {
        "name": "_applyFixChanges",
        "file": "server/routes/fix/fixes.js",
        "line": 544,
        "length": 47
      },
      {
        "name": "_runAutomatedTests",
        "file": "server/routes/fix/fixes.js",
        "line": 598,
        "length": 40
      },
      {
        "name": "_assessFixRisk",
        "file": "server/routes/fix/fixes.js",
        "line": 645,
        "length": 32
      },
      {
        "name": "_performFixVerification",
        "file": "server/routes/fix/fixes.js",
        "line": 686,
        "length": 65
      },
      {
        "name": "_performRollback",
        "file": "server/routes/fix/fixes.js",
        "line": 759,
        "length": 38
      },
      {
        "name": "_generateVerificationRecommendations",
        "file": "server/routes/fix/fixes.js",
        "line": 803,
        "length": 37
      },
      {
        "name": "_buildFixHistory",
        "file": "server/routes/fix/fixes.js",
        "line": 846,
        "length": 32
      },
      {
        "name": "_generatePatch",
        "file": "server/routes/fix/fixes.js",
        "line": 903,
        "length": 55
      },
      {
        "name": "createIssuesRoutes",
        "file": "server/routes/fix/issues.js",
        "line": 14,
        "length": 1457
      },
      {
        "name": "_analyzeIssue",
        "file": "server/routes/fix/issues.js",
        "line": 395,
        "length": 35
      },
      {
        "name": "_generateIssueRecommendations",
        "file": "server/routes/fix/issues.js",
        "line": 537,
        "length": 37
      },
      {
        "name": "_getIssuesStatistics",
        "file": "server/routes/fix/issues.js",
        "line": 580,
        "length": 44
      },
      {
        "name": "createFixModeRoutes",
        "file": "server/routes/fix/index.js",
        "line": 17,
        "length": 487
      },
      {
        "name": "createQualityRoutes",
        "file": "server/routes/analyze/quality.js",
        "line": 14,
        "length": 532
      },
      {
        "name": "_performQualityAnalysis",
        "file": "server/routes/analyze/quality.js",
        "line": 555,
        "length": 62
      },
      {
        "name": "_generateDetailedMetrics",
        "file": "server/routes/analyze/quality.js",
        "line": 625,
        "length": 49
      },
      {
        "name": "_generateQualityRecommendations",
        "file": "server/routes/analyze/quality.js",
        "line": 682,
        "length": 53
      },
      {
        "name": "_performComplexityAnalysis",
        "file": "server/routes/analyze/quality.js",
        "line": 743,
        "length": 48
      },
      {
        "name": "_performCoverageAnalysis",
        "file": "server/routes/analyze/quality.js",
        "line": 831,
        "length": 46
      },
      {
        "name": "_performTechnicalDebtAnalysis",
        "file": "server/routes/analyze/quality.js",
        "line": 885,
        "length": 50
      },
      {
        "name": "_calculateOverallScore",
        "file": "server/routes/analyze/quality.js",
        "line": 990,
        "length": 39
      },
      {
        "name": "createSecurityRoutes",
        "file": "server/routes/analyze/security.js",
        "line": 14,
        "length": 483
      },
      {
        "name": "_performSecurityAnalysis",
        "file": "server/routes/analyze/security.js",
        "line": 506,
        "length": 86
      },
      {
        "name": "_performComplianceCheck",
        "file": "server/routes/analyze/security.js",
        "line": 599,
        "length": 33
      },
      {
        "name": "_scanCodeVulnerabilities",
        "file": "server/routes/analyze/security.js",
        "line": 640,
        "length": 49
      },
      {
        "name": "_analyzeSecurityConfiguration",
        "file": "server/routes/analyze/security.js",
        "line": 697,
        "length": 54
      },
      {
        "name": "_generateSecurityReport",
        "file": "server/routes/analyze/security.js",
        "line": 775,
        "length": 70
      },
      {
        "name": "_generateHTMLReport",
        "file": "server/routes/analyze/security.js",
        "line": 851,
        "length": 44
      },
      {
        "name": "createAnalyzeModeRoutes",
        "file": "server/routes/analyze/index.js",
        "line": 19,
        "length": 476
      },
      {
        "name": "_generatePresetSummary",
        "file": "server/routes/analyze/index.js",
        "line": 575,
        "length": 39
      },
      {
        "name": "createReportsRoutes",
        "file": "server/routes/analyze/reports.js",
        "line": 14,
        "length": 284
      },
      {
        "name": "_collectAllAnalysisData",
        "file": "server/routes/analyze/reports.js",
        "line": 306,
        "length": 51
      },
      {
        "name": "_generateComprehensiveReport",
        "file": "server/routes/analyze/reports.js",
        "line": 367,
        "length": 47
      },
      {
        "name": "_generateTrendReport",
        "file": "server/routes/analyze/reports.js",
        "line": 423,
        "length": 47
      },
      {
        "name": "_exportAnalysisData",
        "file": "server/routes/analyze/reports.js",
        "line": 478,
        "length": 41
      },
      {
        "name": "_generateComparisonReport",
        "file": "server/routes/analyze/reports.js",
        "line": 528,
        "length": 47
      },
      {
        "name": "_generateHTMLReport",
        "file": "server/routes/analyze/reports.js",
        "line": 708,
        "length": 32
      },
      {
        "name": "_generateMarkdownReport",
        "file": "server/routes/analyze/reports.js",
        "line": 741,
        "length": 35
      },
      {
        "name": "createDependenciesRoutes",
        "file": "server/routes/analyze/dependencies.js",
        "line": 14,
        "length": 290
      },
      {
        "name": "createPerformanceRoutes",
        "file": "server/routes/analyze/performance.js",
        "line": 14,
        "length": 264
      },
      {
        "name": "createFeatureRoutes",
        "file": "server/routes/create/features.js",
        "line": 14,
        "length": 1560
      },
      {
        "name": "_generateTaskBreakdown",
        "file": "server/routes/create/features.js",
        "line": 1582,
        "length": 71
      },
      {
        "name": "_generateTechnicalDesign",
        "file": "server/routes/create/features.js",
        "line": 1693,
        "length": 38
      },
      {
        "name": "_generateMilestones",
        "file": "server/routes/create/features.js",
        "line": 1738,
        "length": 32
      },
      {
        "name": "_generateTechnicalAPIs",
        "file": "server/routes/create/features.js",
        "line": 1897,
        "length": 35
      },
      {
        "name": "_validateRequirements",
        "file": "server/routes/create/features.js",
        "line": 2282,
        "length": 75
      },
      {
        "name": "_analyzeFeasibility",
        "file": "server/routes/create/features.js",
        "line": 2395,
        "length": 57
      },
      {
        "name": "_analyzeDependencies",
        "file": "server/routes/create/features.js",
        "line": 2479,
        "length": 49
      },
      {
        "name": "_identifyRequirementRisks",
        "file": "server/routes/create/features.js",
        "line": 2535,
        "length": 51
      },
      {
        "name": "_generateRequirementsRecommendations",
        "file": "server/routes/create/features.js",
        "line": 2592,
        "length": 63
      },
      {
        "name": "_groupIntoEpics",
        "file": "server/routes/create/features.js",
        "line": 2742,
        "length": 33
      },
      {
        "name": "_generateUserStoriesDocument",
        "file": "server/routes/create/features.js",
        "line": 2784,
        "length": 48
      },
      {
        "name": "_generateArchitectureReport",
        "file": "server/routes/create/features.js",
        "line": 3056,
        "length": 51
      },
      {
        "name": "_generateModulesReport",
        "file": "server/routes/create/features.js",
        "line": 3113,
        "length": 48
      },
      {
        "name": "_generateContractsReport",
        "file": "server/routes/create/features.js",
        "line": 3167,
        "length": 81
      },
      {
        "name": "_generateTodoReport",
        "file": "server/routes/create/features.js",
        "line": 3254,
        "length": 63
      },
      {
        "name": "_generateTechDesignReport",
        "file": "server/routes/create/features.js",
        "line": 3323,
        "length": 54
      },
      {
        "name": "createCreateModeRoutes",
        "file": "server/routes/create/index.js",
        "line": 18,
        "length": 282
      },
      {
        "name": "createLanguagePromptsRoutes",
        "file": "server/routes/init/prompts.js",
        "line": 30,
        "length": 298
      },
      {
        "name": "_loadDefaultConfig",
        "file": "server/services/config-service.js",
        "line": 21,
        "length": 50
      },
      {
        "name": "validate",
        "file": "server/services/config-service.js",
        "line": 254,
        "length": 37
      },
      {
        "name": "processRequest",
        "file": "server/language/template-generator.js",
        "line": 460,
        "length": 31
      },
      {
        "name": "generateTemplate",
        "file": "server/language/template-generator.js",
        "line": 28,
        "length": 48
      },
      {
        "name": "getLanguageVariants",
        "file": "server/services/template-engine-service.js",
        "line": 64,
        "length": 32
      },
      {
        "name": "calculateTemplateQuality",
        "file": "server/services/template-engine-service.js",
        "line": 301,
        "length": 31
      },
      {
        "name": "generateBatchAnalytics",
        "file": "server/services/template-engine-service.js",
        "line": 467,
        "length": 33
      },
      {
        "name": "constructor",
        "file": "server/language/prompt-intelligence.js",
        "line": 11,
        "length": 84
      },
      {
        "name": "generateContextualPrompts",
        "file": "server/language/prompt-intelligence.js",
        "line": 173,
        "length": 51
      },
      {
        "name": "buildContextualPrompts",
        "file": "server/language/prompt-intelligence.js",
        "line": 295,
        "length": 43
      },
      {
        "name": "generateSmartSuggestions",
        "file": "server/language/prompt-intelligence.js",
        "line": 343,
        "length": 32
      },
      {
        "name": "updateStep",
        "file": "server/services/workflow-state-service.js",
        "line": 96,
        "length": 48
      },
      {
        "name": "initializeSteps",
        "file": "server/services/workflow-state-service.js",
        "line": 180,
        "length": 48
      },
      {
        "name": "createDataRoutes",
        "file": "server/routes/create/data.js",
        "line": 14,
        "length": 267
      },
      {
        "name": "_getDefaultAnalysisTemplates",
        "file": "server/routes/create/data.js",
        "line": 474,
        "length": 57
      },
      {
        "name": "_getDefaultDocumentTemplates",
        "file": "server/routes/create/data.js",
        "line": 532,
        "length": 39
      },
      {
        "name": "createMockWorkflow",
        "file": "tests/integration/contracts-routes.test.js",
        "line": 524,
        "length": 111
      },
      {
        "name": "detectCycle",
        "file": "server/analyzers/integration-analyzer.js",
        "line": 789,
        "length": 31
      },
      {
        "name": "analyzeIntegration",
        "file": "server/analyzers/integration-analyzer.js",
        "line": 38,
        "length": 71
      },
      {
        "name": "_performAnalysisSteps",
        "file": "server/analyzers/integration-analyzer.js",
        "line": 149,
        "length": 31
      },
      {
        "name": "_analyzeModuleRelations",
        "file": "server/analyzers/integration-analyzer.js",
        "line": 189,
        "length": 70
      },
      {
        "name": "_analyzeDataFlow",
        "file": "server/analyzers/integration-analyzer.js",
        "line": 344,
        "length": 40
      },
      {
        "name": "_analyzeExternalDependencies",
        "file": "server/analyzers/integration-analyzer.js",
        "line": 393,
        "length": 52
      },
      {
        "name": "forEach",
        "file": "server/analyzers/integration-analyzer.js",
        "line": 400,
        "length": 31
      },
      {
        "name": "_generateContractDocument",
        "file": "server/analyzers/integration-analyzer.js",
        "line": 453,
        "length": 37
      },
      {
        "name": "_generateRecommendations",
        "file": "server/analyzers/integration-analyzer.js",
        "line": 497,
        "length": 41
      },
      {
        "name": "_identifyIntegrationRisks",
        "file": "server/analyzers/integration-analyzer.js",
        "line": 545,
        "length": 31
      },
      {
        "name": "_detectCircularDependencies",
        "file": "server/analyzers/integration-analyzer.js",
        "line": 784,
        "length": 48
      },
      {
        "name": "createMockTemplateVariables",
        "file": "tests/unit/template-generation.test.js",
        "line": 437,
        "length": 107
      },
      {
        "name": "_generateBuiltinContractDocument",
        "file": "tests/unit/template-generation.test.js",
        "line": 575,
        "length": 198
      },
      {
        "name": "_extractSections",
        "file": "tests/unit/template-generation.test.js",
        "line": 777,
        "length": 37
      },
      {
        "name": "createAPIRoutes",
        "file": "server/routes/create/api.js",
        "line": 14,
        "length": 195
      },
      {
        "name": "_generateDefaultResponses",
        "file": "server/routes/create/api.js",
        "line": 214,
        "length": 33
      },
      {
        "name": "_getDefaultImplementation",
        "file": "server/routes/create/api.js",
        "line": 362,
        "length": 49
      },
      {
        "name": "_generateAPITests",
        "file": "server/routes/create/api.js",
        "line": 486,
        "length": 43
      },
      {
        "name": "createModuleRoutes",
        "file": "server/routes/create/modules.js",
        "line": 14,
        "length": 149
      },
      {
        "name": "_generateModuleTemplate",
        "file": "server/routes/create/modules.js",
        "line": 202,
        "length": 44
      },
      {
        "name": "_generateComponentTemplate",
        "file": "server/routes/create/modules.js",
        "line": 253,
        "length": 38
      },
      {
        "name": "generateLanguageReport",
        "file": "server/services/language-service.js",
        "line": 145,
        "length": 48
      },
      {
        "name": "generateDebuggingPrompt",
        "file": "server/language/language-prompt-generator.js",
        "line": 177,
        "length": 31
      },
      {
        "name": "initializeBestPractices",
        "file": "server/language/language-prompt-generator.js",
        "line": 361,
        "length": 115
      },
      {
        "name": "constructor",
        "file": "server/language/detector.js",
        "line": 10,
        "length": 111
      },
      {
        "name": "detectLanguage",
        "file": "server/language/detector.js",
        "line": 127,
        "length": 34
      },
      {
        "name": "getProjectFiles",
        "file": "server/language/detector.js",
        "line": 188,
        "length": 31
      },
      {
        "name": "getSuggestions",
        "file": "server/language/detector.js",
        "line": 328,
        "length": 41
      },
      {
        "name": "analyzeFiles",
        "file": "server/analyzers/file-content-analyzer.js",
        "line": 38,
        "length": 62
      },
      {
        "name": "_flattenFileStructure",
        "file": "server/analyzers/file-content-analyzer.js",
        "line": 130,
        "length": 64
      },
      {
        "name": "_selectFilesToAnalyze",
        "file": "server/analyzers/file-content-analyzer.js",
        "line": 198,
        "length": 48
      },
      {
        "name": "_analyzeFileContent",
        "file": "server/analyzers/file-content-analyzer.js",
        "line": 345,
        "length": 58
      },
      {
        "name": "_analyzeStructure",
        "file": "server/analyzers/file-content-analyzer.js",
        "line": 470,
        "length": 34
      },
      {
        "name": "_extractFunctions",
        "file": "server/analyzers/file-content-analyzer.js",
        "line": 570,
        "length": 425
      },
      {
        "name": "_generateRecommendations",
        "file": "server/analyzers/file-content-analyzer.js",
        "line": 865,
        "length": 51
      },
      {
        "name": "_calculateCodeMetrics",
        "file": "server/analyzers/file-content-analyzer.js",
        "line": 938,
        "length": 31
      },
      {
        "name": "analyzeConfigFiles",
        "file": "server/analyzers/enhanced-language-detector.js",
        "line": 128,
        "length": 31
      },
      {
        "name": "inferFrameworks",
        "file": "server/analyzers/enhanced-language-detector.js",
        "line": 199,
        "length": 56
      },
      {
        "name": "extractStructureClues",
        "file": "server/analyzers/enhanced-language-detector.js",
        "line": 261,
        "length": 36
      },
      {
        "name": "performCodeAnalysis",
        "file": "server/analyzers/enhanced-language-detector.js",
        "line": 337,
        "length": 31
      },
      {
        "name": "synthesizeResults",
        "file": "server/analyzers/enhanced-language-detector.js",
        "line": 377,
        "length": 47
      },
      {
        "name": "generateNextStepRecommendations",
        "file": "server/analyzers/enhanced-language-detector.js",
        "line": 430,
        "length": 40
      },
      {
        "name": "calculateOverallConfidence",
        "file": "server/analyzers/enhanced-language-detector.js",
        "line": 731,
        "length": 57
      },
      {
        "name": "calculatePythonSpecificConfidence",
        "file": "server/analyzers/enhanced-language-detector.js",
        "line": 793,
        "length": 36
      },
      {
        "name": "assessDataQuality",
        "file": "server/analyzers/enhanced-language-detector.js",
        "line": 948,
        "length": 49
      },
      {
        "name": "identifyPythonPatterns",
        "file": "server/analyzers/enhanced-language-detector.js",
        "line": 1020,
        "length": 40
      },
      {
        "name": "scanProject",
        "file": "server/analyzers/project-scanner.js",
        "line": 39,
        "length": 82
      },
      {
        "name": "scanDirectoryStructure",
        "file": "server/analyzers/project-scanner.js",
        "line": 127,
        "length": 66
      },
      {
        "name": "analyzeReadmeContent",
        "file": "server/analyzers/project-scanner.js",
        "line": 234,
        "length": 54
      },
      {
        "name": "scanConfigFiles",
        "file": "server/analyzers/project-scanner.js",
        "line": 294,
        "length": 73
      },
      {
        "name": "analyzeConfigFile",
        "file": "server/analyzers/project-scanner.js",
        "line": 374,
        "length": 39
      },
      {
        "name": "scanDevToolsConfig",
        "file": "server/analyzers/project-scanner.js",
        "line": 484,
        "length": 46
      },
      {
        "name": "extractTechStackHints",
        "file": "server/analyzers/project-scanner.js",
        "line": 636,
        "length": 53
      },
      {
        "name": "getNextStepRecommendations",
        "file": "server/analyzers/project-scanner.js",
        "line": 738,
        "length": 32
      }
    ],
    "largeClasses": [],
    "deepNesting": [],
    "unusedCode": []
  },
  "patterns": {
    "designPatterns": [],
    "antiPatterns": [],
    "frameworkUsage": {
      "Singleton": 1,
      "Observer": 1,
      "Module": 69,
      "Express-Route": 36,
      "Middleware": 5,
      "Factory": 43
    }
  }
}