{
  "currentStep": 2,
  "projectPath": "/Users/martinezdavid/Documents/MG/code/mg_kiro_mcp",
  "stepsCompleted": [
    "step1",
    "step2"
  ],
  "stepResults": {
    "step1": {
      "projectOverview": {
        "generatedAt": "2025-09-12T10:09:44.557Z",
        "generationTime": "14ms",
        "projectMetadata": {
          "name": "mg_kiro_mcp",
          "path": "/Users/martinezdavid/Documents/MG/code/mg_kiro_mcp",
          "lastModified": "2025-09-12T10:07:57.000Z",
          "createdAt": "2025-09-06T14:38:08.793Z",
          "totalFiles": 11,
          "totalSize": "964.79 KB",
          "totalSizeBytes": 987948,
          "fileTypeDistribution": {
            ".md": 5,
            ".json": 3,
            ".js": 2,
            ".xmind": 1
          }
        },
        "languageProfile": {
          "primary": "javascript",
          "secondary": [
            {
              "name": "express",
              "confidence": 33.33333333333333
            }
          ],
          "frameworks": [
            {
              "name": "express",
              "confidence": 33.33333333333333
            }
          ],
          "techStack": {
            "primary": "javascript",
            "frameworks": [
              {
                "name": "express",
                "confidence": 33.33333333333333
              }
            ]
          },
          "confidence": 83,
          "detectionSources": [
            "base-detection"
          ],
          "languageStats": {},
          "ecosystem": "javascript"
        },
        "dependencyAnalysis": {
          "systems": [
            "npm"
          ],
          "details": {
            "npm": {
              "production": {
                "@modelcontextprotocol/sdk": "^1.0.0",
                "axios": "^1.6.2",
                "compression": "^1.7.4",
                "cors": "^2.8.5",
                "express": "^4.18.2",
                "express-rate-limit": "^7.1.5",
                "helmet": "^7.1.0",
                "ws": "^8.16.0"
              },
              "development": {
                "@babel/core": "^7.28.4",
                "@babel/preset-env": "^7.28.3",
                "@jest/globals": "^30.1.2",
                "babel-jest": "^30.1.2",
                "jest": "^30.1.3",
                "nodemon": "^3.0.2",
                "supertest": "^7.1.4"
              },
              "peer": {},
              "scripts": {
                "start": "node index.js",
                "dev": "node --watch index.js",
                "test": "jest",
                "test:watch": "jest --watch",
                "test:coverage": "jest --coverage",
                "test:integration": "jest --testPathPattern=integration",
                "test:unit": "jest --testPathPattern=unit",
                "test:config": "node tests/config-integration.test.js",
                "test:system": "node test-integration.js",
                "validate:refactoring": "node scripts/validate-refactoring.js",
                "daemon": "nohup node index.js > logs/mg_kiro.log 2>&1 &"
              },
              "engines": {
                "node": ">=16.0.0",
                "npm": ">=8.0.0"
              },
              "projectInfo": {
                "name": "mg_kiro_mcp",
                "version": "2.0.0",
                "description": "智能项目文档管理与代码维护系统的 MCP (Model Context Protocol) 服务器实现",
                "author": "mg_kiro Team",
                "license": "MIT"
              }
            }
          },
          "totalDependencies": 15,
          "hasLockFile": false,
          "securityAnalysis": {
            "issues": [],
            "score": "unknown"
          },
          "summary": "No analysis available"
        },
        "directoryStructure": {
          "maxDepth": 3,
          "totalDirectories": 0,
          "totalFiles": 0,
          "importantPaths": [],
          "projectType": "unknown",
          "architecturePattern": "unknown",
          "structure": {
            "name": "mg_kiro_mcp",
            "type": "directory",
            "children": [
              {
                "name": ".archive",
                "type": "directory",
                "children": []
              },
              {
                "name": ".claude",
                "type": "directory",
                "children": [
                  {
                    "name": "commands",
                    "type": "directory",
                    "children": [
                      {
                        "name": "init.md",
                        "type": "file",
                        "size": 8333,
                        "ext": ".md"
                      }
                    ]
                  },
                  {
                    "name": "settings.local.json",
                    "type": "file",
                    "size": 2571,
                    "ext": ".json"
                  }
                ]
              },
              {
                "name": ".mcp.json",
                "type": "file",
                "size": 182,
                "ext": ".json"
              },
              {
                "name": "CLAUDE.md",
                "type": "file",
                "size": 4319,
                "ext": ".md"
              },
              {
                "name": "README.md",
                "type": "file",
                "size": 9586,
                "ext": ".md"
              },
              {
                "name": "Requirement.md",
                "type": "file",
                "size": 3209,
                "ext": ".md"
              },
              {
                "name": "config",
                "type": "directory",
                "children": [
                  {
                    "name": "mcp.config.json",
                    "type": "file",
                    "size": 1946,
                    "ext": ".json"
                  },
                  {
                    "name": "modes.config.json",
                    "type": "file",
                    "size": 3734,
                    "ext": ".json"
                  },
                  {
                    "name": "template-system.config.json",
                    "type": "file",
                    "size": 2488,
                    "ext": ".json"
                  },
                  {
                    "name": "templates.config.json",
                    "type": "file",
                    "size": 12077,
                    "ext": ".json"
                  },
                  {
                    "name": "workflows.config.json",
                    "type": "file",
                    "size": 15362,
                    "ext": ".json"
                  }
                ]
              },
              {
                "name": "docs",
                "type": "directory",
                "children": []
              },
              {
                "name": "index.js",
                "type": "file",
                "size": 141367,
                "ext": ".js"
              },
              {
                "name": "jest.config.js",
                "type": "file",
                "size": 826,
                "ext": ".js"
              },
              {
                "name": "mg_kiro",
                "type": "directory",
                "children": [
                  {
                    "name": "init-state.json",
                    "type": "file",
                    "size": 243,
                    "ext": ".json"
                  }
                ]
              },
              {
                "name": "mg_kiro MCP.xmind",
                "type": "file",
                "size": 436166,
                "ext": ".xmind"
              },
              {
                "name": "package-lock.json",
                "type": "file",
                "size": 351388,
                "ext": ".json"
              },
              {
                "name": "package.json",
                "type": "file",
                "size": 1702,
                "ext": ".json"
              },
              {
                "name": "prompts",
                "type": "directory",
                "children": [
                  {
                    "name": "generation",
                    "type": "directory",
                    "children": [
                      {
                        "name": "architecture",
                        "type": "directory",
                        "truncated": true
                      }
                    ]
                  },
                  {
                    "name": "languages",
                    "type": "directory",
                    "children": [
                      {
                        "name": "javascript",
                        "type": "directory",
                        "truncated": true
                      }
                    ]
                  },
                  {
                    "name": "modes",
                    "type": "directory",
                    "children": [
                      {
                        "name": "create",
                        "type": "directory",
                        "truncated": true
                      },
                      {
                        "name": "init",
                        "type": "directory",
                        "truncated": true
                      }
                    ]
                  },
                  {
                    "name": "shared",
                    "type": "directory",
                    "children": [
                      {
                        "name": "common",
                        "type": "directory",
                        "truncated": true
                      },
                      {
                        "name": "variables",
                        "type": "directory",
                        "truncated": true
                      }
                    ]
                  }
                ]
              },
              {
                "name": "scripts",
                "type": "directory",
                "children": [
                  {
                    "name": "test-service-registry.js",
                    "type": "file",
                    "size": 5271,
                    "ext": ".js"
                  }
                ]
              },
              {
                "name": "server",
                "type": "directory",
                "children": [
                  {
                    "name": "interfaces",
                    "type": "directory",
                    "children": [
                      {
                        "name": "BatchResult.js",
                        "type": "file",
                        "size": 11258,
                        "ext": ".js"
                      },
                      {
                        "name": "ErrorResult.js",
                        "type": "file",
                        "size": 13981,
                        "ext": ".js"
                      },
                      {
                        "name": "TaskDefinition.js",
                        "type": "file",
                        "size": 20370,
                        "ext": ".js"
                      },
                      {
                        "name": "TokenResult.js",
                        "type": "file",
                        "size": 10160,
                        "ext": ".js"
                      }
                    ]
                  },
                  {
                    "name": "language",
                    "type": "directory",
                    "children": [
                      {
                        "name": "detector.js",
                        "type": "file",
                        "size": 14782,
                        "ext": ".js"
                      },
                      {
                        "name": "prompt-intelligence.js",
                        "type": "file",
                        "size": 19744,
                        "ext": ".js"
                      }
                    ]
                  },
                  {
                    "name": "services",
                    "type": "directory",
                    "children": [
                      {
                        "name": "config-service.js",
                        "type": "file",
                        "size": 9827,
                        "ext": ".js"
                      },
                      {
                        "name": "file-analysis",
                        "type": "directory",
                        "truncated": true
                      },
                      {
                        "name": "file-query-service.js",
                        "type": "file",
                        "size": 40615,
                        "ext": ".js"
                      },
                      {
                        "name": "language-intelligence-service.js",
                        "type": "file",
                        "size": 22062,
                        "ext": ".js"
                      },
                      {
                        "name": "project-overview-generator.js",
                        "type": "file",
                        "size": 40521,
                        "ext": ".js"
                      },
                      {
                        "name": "response-service.js",
                        "type": "file",
                        "size": 2668,
                        "ext": ".js"
                      },
                      {
                        "name": "service-bus.js",
                        "type": "file",
                        "size": 8689,
                        "ext": ".js"
                      },
                      {
                        "name": "service-registry.js",
                        "type": "file",
                        "size": 8571,
                        "ext": ".js"
                      },
                      {
                        "name": "smart-content-trimmer.js",
                        "type": "file",
                        "size": 11576,
                        "ext": ".js"
                      },
                      {
                        "name": "task-management",
                        "type": "directory",
                        "truncated": true
                      },
                      {
                        "name": "unified",
                        "type": "directory",
                        "truncated": true
                      }
                    ]
                  },
                  {
                    "name": "utils",
                    "type": "directory",
                    "children": [
                      {
                        "name": "Logger.js",
                        "type": "file",
                        "size": 12525,
                        "ext": ".js"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "tests",
                "type": "directory",
                "children": [
                  {
                    "name": "file-analysis",
                    "type": "directory",
                    "children": [
                      {
                        "name": "integration",
                        "type": "directory",
                        "truncated": true
                      }
                    ]
                  },
                  {
                    "name": "task-management",
                    "type": "directory",
                    "children": []
                  },
                  {
                    "name": "validation-strategies",
                    "type": "directory",
                    "children": []
                  }
                ]
              },
              {
                "name": "数据结构统一化分析报告.md",
                "type": "file",
                "size": 11713,
                "ext": ".md"
              },
              {
                "name": "超详细总体架构-文件级别.md",
                "type": "file",
                "size": 27490,
                "ext": ".md"
              }
            ]
          },
          "keyFindings": []
        },
        "keyFileContents": {
          "package.json": {
            "content": "{\n  \"name\": \"mg_kiro_mcp\",\n  \"version\": \"2.0.0\",\n  \"description\": \"智能项目文档管理与代码维护系统的 MCP (Model Context Protocol) 服务器实现\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"dev\": \"node --watch index.js\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"test:integration\": \"jest --testPathPattern=integration\",\n    \"test:unit\": \"jest --testPathPattern=unit\",\n    \"test:config\": \"node tests/config-integration.test.js\",\n    \"test:system\": \"node test-integration.js\",\n    \"validate:refactoring\": \"node scripts/validate-refactoring.js\",\n    \"daemon\": \"nohup node index.js > logs/mg_kiro.log 2>&1 &\"\n  },\n  \"keywords\": [\n    \"mcp\",\n    \"model-context-protocol\",\n    \"claude-code\",\n    \"documentation\",\n    \"project-management\"\n  ],\n  \"author\": \"mg_kiro Team\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@modelcontextprotocol/sdk\": \"^1.0.0\",\n    \"axios\": \"^1.6.2\",\n    \"compression\": \"^1.7.4\",\n    \"cors\": \"^2.8.5\",\n    \"express\": \"^4.18.2\",\n    \"express-rate-limit\": \"^7.1.5\",\n    \"helmet\": \"^7.1.0\",\n    \"ws\": \"^8.16.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.28.4\",\n    \"@babel/preset-env\": \"^7.28.3\",\n    \"@jest/globals\": \"^30.1.2\",\n    \"babel-jest\": \"^30.1.2\",\n    \"jest\": \"^30.1.3\",\n    \"nodemon\": \"^3.0.2\",\n    \"supertest\": \"^7.1.4\"\n  },\n  \"engines\": {\n    \"node\": \">=16.0.0\",\n    \"npm\": \">=8.0.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/yourusername/mg_kiro_mcp.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/yourusername/mg_kiro_mcp/issues\"\n  },\n  \"homepage\": \"https://github.com/yourusername/mg_kiro_mcp#readme\"\n}\n",
            "size": 1702,
            "isTrimmed": false,
            "lastModified": "2025-09-11T13:32:52.722Z",
            "importance": 1,
            "type": "config"
          },
          "package-lock.json": {
            "content": "{\n  \"name\": \"mg_kiro_mcp\",\n  \"version\": \"2.0.0\"\n}",
            "size": 351388,
            "isTrimmed": true,
            "lastModified": "2025-09-08T16:43:00.133Z",
            "importance": 10,
            "type": "config"
          },
          "README.md": {
            "content": "# mg_kiro MCP Server\n\n智能项目文档管理系统的 MCP (Model Context Protocol) 服务器实现\n\n## 概述\n\nmg_kiro MCP Server 是一个专为 Claude Code 设计的 Model Context Protocol 服务器，提供项目初始化和文档生成功能。\n\n**版本**: v2.0.0\n**状态**: 生产就绪 - 精简架构，专注MCP协议\n**核心功能**: MCP协议服务器、项目概览生成、渐进式文档生成\n\n## 核心特性\n\n- **🎯 MCP协议服务器** - 支持stdio和HTTP/WebSocket双模式\n- **🚀 简化架构** - 专注于项目初始化和文档生成的2步流程\n- **📊 项目分析** - 智能项目结构扫描和语言识别\n- **📝 文档生成** - 基于项目分析的渐进式文档生成\n- **🔧 服务化设计** - 模块化服务架构，依赖注入\n- **🌐 多语言支持** - JavaScript/Python/Java/Go/Rust/C#等主流语言\n\n## 项目架构\n\n### 实际目录结构\n\n```\nmg_kiro_mcp/\n├── index.js                    # 🚀 统一入口点 - MCP协议服务器 + Express + WebSocket\n├── package.json                # 项目配置 - v2.0.0\n├── server/                     # 📁 服务器核心模块\n│   ├── routes/                 # 🛤️ 路由系统\n│   │   ├── index.js            # 主路由配置\n│   │   ├── system/             # 系统路由\n│   │   │   ├── health.js       # 健康检查和系统状态\n│   │   │   ├── mcp.js          # MCP协议端点\n│   │   │   └── prompts.js      # 提示词管理\n│   │   ├── init/               # 初始化流程路由\n│   │   │   ├── claude-code-init.js  # Claude Code集成流程\n│   │   │   ├── turbo-init.js        # 高性能处理版本\n│   │   │   └── ai-batch-init.js     # AI批量分析版本\n│   │   └── create/             # Create模式路由\n│   │       ├── index.js\n│   │       ├── existing-project-workflow.js\n│   │       └── new-project-workflow.js\n│   ├── services/               # 🔧 服务层\n│   │   ├── service-registry.js      # 服务注册和依赖注入\n│   │   ├── service-bus.js           # 服务总线\n│   │   ├── config-service.js        # 配置管理\n│   │   ├── language-intelligence-service.js  # 语言智能服务\n│   │   ├── project-overview-generator.js     # 项目概览生成\n│   │   ├── ai-todo-manager.js       # AI任务管理\n│   │   ├── file-query-service.js    # 文件查询服务\n│   │   ├── response-service.js      # 标准化响应\n│   │   └── unified/            # 统一模板系统\n│   │       ├── master-template-service.js\n│   │       ├── template-config-manager.js\n│   │       └── mode-template-service.js\n│   ├── language/               # 🧠 语言处理模块\n│   │   ├── detector.js         # 语言识别引擎\n│   │   ├── language-prompt-generator.js\n│   │   └── prompt-intelligence.js\n├── prompts/                    # 📝 提示词和模板\n│   ├── modes/                  # 工作模式提示词\n│   │   ├── init/\n│   │   └── create/\n│   ├── languages/              # 语言特定配置\n│   │   └── javascript/\n│   └── shared/                 # 共享模板\n├── config/                     # ⚙️ 配置文件\n│   ├── mcp.config.json        # MCP服务器配置\n│   ├── modes.config.json      # 工作模式配置\n│   ├── templates.config.json  # 模板配置\n│   └── template-system.config.json\n└── tests/                      # 🧪 测试套件\n    ├── config-integration.test.js\n    └── server.test.js\n```\n\n## 快速开始\n\n### 安装和运行\n\n```bash\n# 克隆项目\ngit clone <repository-url>\ncd mg_kiro_mcp\n\n# 安装依赖\nnpm install\n\n# 启动服务器\nnpm start              # MCP协议模式（stdio）\nMCP_PORT=3000 npm start # Web服务器模式\nnpm run dev            # 开发模式（热重载）\n\n# 运行测试\nnpm test               # 运行所有测试\nnpm run test:config    # 配置系统测试\n```\n\n### 两种运行模式\n\n#### 1. MCP协议模式（推荐）\n```bash\n# 直接启动，用于Claude Code集成\nnode index.js\n```\n\n#### 2. Web服务器模式\n```bash\n# 启动HTTP/WebSocket服务器\nMCP_PORT=3000 node index.js\n\n# 验证服务\ncurl http://localhost:3000/health\n```\n\n## MCP工具接口\n\n### 核心MCP工具（v3.0.0-simplified）\n\n| 工具名称 | 功能描述 |\n|---------|----------|\n| `generate_project_overview` | 生成项目概览包：语言分析+依赖分析+目录结构+README+核心文件内容 |\n| `progressive_documentation` | 启动渐进式文档生成：AI协作流程，从项目概览到完整文档体系 |\n| `get_init_status` | 获取当前Init流程的状态、进度和健康信息 |\n| `reset_init` | 重置Init流程，清除所有缓存状态 |\n\n### Web API接口（当启用HTTP模式时）\n\n| 方法 | 路径 | 功能 |\n|------|------|------|\n| GET | `/health` | 健康检查和系统状态 |\n| GET | `/status` | 详细服务状态 |\n| GET | `/metrics` | 系统性能指标 |\n| POST | `/init/initialize` | 项目初始化 |\n| POST | `/init/project-overview` | 生成项目概览 |\n| POST | `/init/progressive-documentation` | 渐进式文档生成 |\n| GET | `/init/status` | 获取初始化状态 |\n| GET | `/services/status` | 服务状态查询 |\n\n## 核心功能详解\n\n### 🎯 精简化2步Init流程（v3.0-simplified）\n\n#### **Step 1: 项目概览生成**\n使用MCP工具 `generate_project_overview`：\n- **📁 项目结构分析** - 智能目录扫描，最大深度可配置\n- **🔍 语言识别** - 自动识别主要编程语言和框架\n- **📄 依赖分析** - 解析配置文件，提取依赖关系\n- **📋 核心文件内容** - 自动读取关键文件（README、配置、主要代码文件）\n- **📊 项目统计** - 文件数量、代码行数、项目规模评估\n\n#### **Step 2: 渐进式文档生成**\n使用MCP工具 `progressive_documentation`：\n- **📝 AI协作流程** - 基于项目概览，启动分批文档生成\n- **📚 文档体系构建** - 从文件文档到模块文档到集成文档\n- **🎨 多种文档风格** - comprehensive（全面）/ concise（简洁）/ technical（技术导向）\n- **🔄 批量处理** - 可配置批次大小（默认80KB），避免上下文溢出\n- **📈 进度管理** - 实时跟踪文档生成进度和状态\n\n### 🧠 智能语言识别系统\n\n**实现文件**: `server/language/detector.js` 和 `server/analyzers/enhanced-language-detector.js`\n\n**支持语言**：\n- **JavaScript/Node.js** - React、Vue、Angular、Express、Next.js\n- **Python** - Django、Flask、FastAPI\n- **Java** - Spring、Maven、Gradle\n- **Go** - Gin、Echo、Fiber\n- **Rust** - Actix、Rocket、Warp\n- **C#/.NET** - ASP.NET、Blazor、WPF\n\n**识别机制**：\n- 文件扩展名权重分析\n- 配置文件特征识别（package.json、requirements.txt等）\n- 目录结构模式匹配\n- 框架特征检测和权重算法评分\n\n### 📊 语言识别系统\n\n**核心组件**：\n- **语言检测器** (`server/language/detector.js`)\n\n**功能特性**：\n- 智能语言识别（JavaScript/TypeScript、Python、Java、Go、Rust、C#）\n- 框架自动检测（React、Vue、Django、Express等）\n- 配置文件分析和权重评分\n- 项目结构模式识别\n\n### ⚙️ 服务化架构\n\n**服务注册系统** (`server/services/service-registry.js`)：\n- 依赖注入模式\n- 服务生命周期管理\n- 统一的服务总线 (`service-bus.js`)\n\n**核心服务**：\n- `LanguageIntelligenceService` - 语言智能分析\n- `MasterTemplateService` - 统一模板管理\n- `ProjectOverviewGenerator` - 项目概览生成\n- `AITodoManager` - AI任务管理\n\n## 🧪 测试和验证\n\n### 测试套件\n\n```bash\n# 运行所有测试\nnpm test\n\n# 配置系统测试\nnpm run test:config\n\n# 单元测试\nnpm run test:unit\n\n# 集成测试\nnpm run test:integration\n```\n\n### 健康检查\n\n```bash\n# 系统健康检查（HTTP模式下）\ncurl http://localhost:3000/health\ncurl http://localhost:3000/status\ncurl http://localhost:3000/metrics\n\n# MCP工具测试\n# 使用Claude Code客户端测试MCP工具\n```\n\n## 配置\n\n### 环境变量\n```bash\nexport MCP_PORT=3000              # 服务端口\nexport MCP_HOST=localhost         # 主机地址\nexport MCP_LOG_LEVEL=info        # 日志级别\nexport MCP_API_KEY=your-key      # API密钥(可选)\n```\n\n### 模板系统\n系统支持多种文档模板，配置在 `config/templates.config.json`:\n- system-architecture（系统架构）\n- modules-catalog（模块目录）\n- user-stories（用户故事）\n- technical-analysis（技术分析）\n- action-items（行动项目）\n- changelog（变更日志）\n\n## Claude Code 集成\n\n### MCP服务器配置\n\n在Claude Code的MCP配置中添加：\n\n```json\n{\n  \"mcpServers\": {\n    \"mg_kiro\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mg_kiro_mcp/index.js\"]\n    }\n  }\n}\n```\n\n### 使用方式\n\n1. **项目概览生成**：\n   ```\n   使用MCP工具 generate_project_overview\n   参数：projectPath（项目根目录绝对路径）\n   ```\n\n2. **渐进式文档生成**：\n   ```\n   使用MCP工具 progressive_documentation\n   参数：batchSize, style, focusAreas, includeTests\n   ```\n\n3. **状态查询**：\n   ```\n   使用MCP工具 get_init_status\n   获取当前初始化流程的进度和状态\n   ```\n\n## 许可证\n\nMIT许可证 - 查看 [LICENSE](LICENSE) 文件了解详情",
            "size": 9586,
            "isTrimmed": false,
            "lastModified": "2025-09-09T13:16:26.096Z",
            "importance": 11,
            "type": "documentation"
          },
          ".env.example": {
            "content": "",
            "size": 0,
            "isTrimmed": false,
            "lastModified": "2025-09-06T14:38:08.796Z",
            "importance": 19,
            "type": "unknown"
          },
          "index.js": {
            "content": "#!/usr/bin/env node\n\n/**\n * mg_kiro MCP Server\n * 统一入口点 - MCP协议服务器 + Express API + WebSocket\n * \n * 支持两种运行模式:\n * 1. MCP服务器模式: node index.js (MCP服务器运行在stdio)\n * 2. Express服务器模式: MCP_PORT=3000 node index.js (Web服务器运行在指定端口)\n */\n\nimport { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n} from \"@modelcontextprotocol/sdk/types.js\";\nimport express from 'express';\nimport http from 'http';\nimport { WebSocketServer } from 'ws';\nimport cors from 'cors';\nimport { fileURLToPath } from 'url';\nimport path, { dirname, join, resolve } from 'path';\nimport fs, { existsSync, mkdirSync, writeFileSync, readFileSync, rmSync, readdirSync, unlinkSync } from 'fs';\nimport { createAppRoutes } from './server/routes/index.js';\nimport { initializeServices } from './server/services/service-registry.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst CONFIG_DIR = join(__dirname, 'config');\n\n// ========== 服务容器包装器 ==========\nfunction getServiceContainer(serviceBus) {\n  return {\n    // 新的统一模板系统\n    masterTemplateService: serviceBus.get('masterTemplateService'),\n    templateConfigManager: serviceBus.get('templateConfigManager'),\n    \n    // 其他核心服务\n    languageDetector: serviceBus.get('languageDetector'),\n    languageIntelligence: serviceBus.get('languageIntelligence'),\n    configService: serviceBus.get('configService'),\n    \n    // 核心业务服务\n    projectOverviewGenerator: serviceBus.get('projectOverviewGenerator'),\n    \n    // 新的文件分析模块和任务管理服务\n    fileAnalysisModule: serviceBus.get('fileAnalysisModule'),\n    unifiedTaskManager: serviceBus.get('unifiedTaskManager'),\n    unifiedTaskValidator: serviceBus.get('unifiedTaskValidator'),\n    taskStateManager: serviceBus.get('taskStateManager'),\n    \n    // 文件分析模块组件（可选直接访问）\n    preciseTokenCalculator: serviceBus.get('preciseTokenCalculator'),\n    combinedFileBatchStrategy: serviceBus.get('combinedFileBatchStrategy'),\n    singleFileBatchStrategy: serviceBus.get('singleFileBatchStrategy'),\n    largeFileMultiBatchStrategy: serviceBus.get('largeFileMultiBatchStrategy'),\n    \n    \n    // ServiceBus工具方法\n    getService: (name) => serviceBus.get(name),\n    getServiceStatus: (name) => serviceBus.getServiceStatus(name),\n    getStats: () => serviceBus.getStats(),\n    getAllServices: () => serviceBus.getAllServices()\n  };\n}\n\n// ========== 服务器模式 ==========\nstartServer().catch(console.error);\n\nasync function startServer() {\n  // 初始化服务系统\n  console.log('[Server] 初始化服务系统...');\n  const serviceBus = await initializeServices(CONFIG_DIR);\n\n  // ========== Express服务器设置 ==========\n  const PORT = process.env.MCP_PORT || process.env.PORT;\n  \n  if (PORT) {\n    // Express服务器模式\n    console.log('[Server] 启动Express服务器模式...');\n    \n    const app = express();\n    const httpServer = http.createServer(app);\n\n    // 中间件配置\n    app.use(cors());\n    app.use(express.json({ limit: '50mb' }));\n    app.use(express.urlencoded({ extended: true }));\n\n    // 请求日志\n    app.use((req, res, next) => {\n      console.log(`[HTTP] ${req.method} ${req.path}`);\n      next();\n    });\n\n    // 创建服务容器并生成路由\n    const serviceContainer = getServiceContainer(serviceBus);\n    const routes = createAppRoutes(serviceContainer, null);\n    app.use('/', routes);\n\n    // WebSocket服务器\n    const wss = new WebSocketServer({ server: httpServer });\n    \n    wss.on('connection', (ws) => {\n      console.log('[WebSocket] 新客户端连接');\n      \n      ws.on('message', (message) => {\n        try {\n          const data = JSON.parse(message);\n          console.log('[WebSocket] 收到消息:', data.type || 'unknown');\n          \n          // 处理WebSocket消息\n          handleWebSocketMessage(ws, data, serviceBus);\n        } catch (error) {\n          console.error('[WebSocket] 消息处理错误:', error);\n          ws.send(JSON.stringify({ error: error.message }));\n        }\n      });\n      \n      ws.on('close', () => {\n        console.log('[WebSocket] 客户端断开连接');\n      });\n    });\n\n    // 启动HTTP服务器\n    httpServer.listen(PORT, () => {\n      console.log(`\\n✅ mg_kiro Express服务器已启动`);\n      console.log(`📡 HTTP服务: http://localhost:${PORT}`);\n      console.log(`🔌 WebSocket服务: ws://localhost:${PORT}`);\n      console.log(`📚 API文档: http://localhost:${PORT}/api-docs`);\n      console.log(`\\n可用的端点 (精简版 3.0):`);\n      console.log(`  - GET  /health - 健康检查`);\n      console.log(`  - POST /init/project-overview - 生成项目概览包`);\n      console.log(`  - POST /init/progressive-documentation - 渐进式文档生成`);\n      console.log(`  - GET  /init/status - 获取Init状态`);\n      console.log(`  - GET  /init/help - API帮助信息`);\n      console.log(`\\nMCP工具:`);\n      console.log(`  - generate_project_overview - 生成项目概览`);\n      console.log(`  - progressive_documentation - 渐进式文档生成`);\n\n... [内容已截断] ...\n\n    }\n    \n    const expectedFilePath = resolve(filesDir, expectedFileName);\n    \n    return {\n        expectedFilePath,\n        expectedFileName,\n        filesDir,\n        relativePath: `mg_kiro/files/${expectedFileName}`\n    };\n}\n\n// WebSocket消息处理\nfunction handleWebSocketMessage(ws, data, serviceBus) {\n  const { type, payload } = data;\n  \n  switch (type) {\n    case 'init':\n      // 处理Init请求 - 使用新的MCP协议服务\n      const { projectPath } = payload;\n      const claudeCodeInit = serviceBus.get('claudeCodeInit');\n      \n      try {\n        claudeCodeInit.initialize(resolve(projectPath));\n        ws.send(JSON.stringify({\n          type: 'init_started',\n          message: 'Init流程已启动，请使用MCP工具进行分步执行',\n          availableTools: [\n            'init_step1_data_collection',\n            'init_step2_architecture',\n            'init_step3_deep_analysis',\n            'init_step4_module_docs',\n            'init_step5_contracts'\n          ]\n        }));\n      } catch (error) {\n        ws.send(JSON.stringify({\n          type: 'error',\n          error: error.message\n        }));\n      }\n      break;\n      \n    case 'status':\n      // 获取状态\n      const initState = serviceBus.get('initState');\n      const status = initState ? initState.getProgress() : { status: 'idle' };\n      ws.send(JSON.stringify({\n        type: 'status',\n        status\n      }));\n      break;\n      \n    default:\n      ws.send(JSON.stringify({\n        type: 'error',\n        error: `未知的消息类型: ${type}`\n      }));\n  }\n}",
            "size": 141367,
            "isTrimmed": true,
            "lastModified": "2025-09-12T10:07:53.126Z",
            "importance": 38,
            "type": "unknown"
          }
        },
        "projectCharacteristics": {
          "type": "application",
          "architecture": "unknown",
          "complexity": "medium",
          "maturity": "development"
        },
        "architectureDocument": {
          "title": "mg_kiro_mcp - 系统架构文档",
          "generatedAt": "2025-09-12T10:09:44.557Z",
          "version": "1.0-auto",
          "overview": {
            "name": "mg_kiro_mcp",
            "primaryLanguage": "javascript",
            "architecture": "unknown",
            "complexity": "medium",
            "totalFiles": 11
          },
          "techStack": {
            "primary": "javascript",
            "frameworks": [
              {
                "name": "express",
                "confidence": 33.33333333333333
              }
            ],
            "dependencies": 1,
            "ecosystem": "javascript"
          },
          "structure": {
            "type": "unknown",
            "pattern": "unknown",
            "importantPaths": [],
            "totalDirectories": 0
          },
          "coreModules": [
            {
              "name": "Application Entry",
              "files": [
                "index.js"
              ],
              "importance": 100,
              "description": "应用程序入口点"
            },
            {
              "name": "Configuration",
              "files": [
                "package.json",
                ".env.example"
              ],
              "importance": 90,
              "description": "系统配置和环境设置"
            }
          ],
          "characteristics": {
            "designPatterns": [
              "RESTful API"
            ],
            "scalabilityLevel": "medium",
            "maintainabilityScore": 80,
            "testability": "medium"
          },
          "recommendations": []
        },
        "aiTaskContext": {
          "generatedAt": "2025-09-12T10:09:44.557Z",
          "projectName": "mg_kiro_mcp",
          "fileProcessingGuide": {
            "totalFilesToProcess": 0,
            "priorityLevels": {
              "critical": [
                "entry points",
                "main configurations"
              ],
              "high": [
                "core business logic",
                "API definitions"
              ],
              "medium": [
                "utilities",
                "helpers",
                "components"
              ],
              "low": [
                "tests",
                "documentation",
                "assets"
              ]
            },
            "processingStrategy": "adaptive-batch"
          },
          "moduleClassification": {
            "expectedModules": [
              "core",
              "config",
              "routes",
              "controllers",
              "services",
              "models",
              "utils",
              "components",
              "hooks",
              "middleware"
            ],
            "coreModules": [],
            "supportingModules": [
              {
                "name": "tests",
                "pattern": "test|spec",
                "importance": 30
              },
              {
                "name": "docs",
                "pattern": "doc|readme",
                "importance": 20
              },
              {
                "name": "build",
                "pattern": "build|dist|webpack",
                "importance": 15
              }
            ]
          },
          "documentationStrategy": {
            "templates": [
              "module-documentation",
              "api-documentation",
              "component-documentation"
            ],
            "qualityStandards": {
              "completeness": 0.8,
              "clarity": 0.85,
              "examples": true,
              "codeSnippets": true,
              "apiDocumentation": true
            }
          },
          "aiCollaborationGuide": {
            "contextSize": {
              "estimatedSize": 11264,
              "maxFileSize": 51200,
              "compressionNeeded": false
            },
            "specialInstructions": [
              "注意异步函数和Promise处理",
              "记录模块导入导出关系"
            ],
            "qualityChecks": {
              "syntaxValidation": true,
              "structureConsistency": true,
              "exampleCompleteness": true,
              "linkValidation": true
            },
            "progressMilestones": [
              {
                "stage": "25%",
                "description": "核心文件文档完成",
                "fileCount": 3
              },
              {
                "stage": "50%",
                "description": "主要模块文档完成",
                "fileCount": 6
              },
              {
                "stage": "75%",
                "description": "支持模块文档完成",
                "fileCount": 9
              },
              {
                "stage": "100%",
                "description": "所有文档和整合完成",
                "fileCount": 11
              }
            ]
          }
        },
        "fileAnalysisInput": {
          "fileList": [
            {
              "path": "index.js",
              "name": "index.js",
              "size": 141367,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/services/file-query-service.js",
              "name": "file-query-service.js",
              "size": 40615,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/services/project-overview-generator.js",
              "name": "project-overview-generator.js",
              "size": 40521,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/services/language-intelligence-service.js",
              "name": "language-intelligence-service.js",
              "size": 22062,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/interfaces/TaskDefinition.js",
              "name": "TaskDefinition.js",
              "size": 20370,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/language/prompt-intelligence.js",
              "name": "prompt-intelligence.js",
              "size": 19744,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/language/detector.js",
              "name": "detector.js",
              "size": 14782,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/interfaces/ErrorResult.js",
              "name": "ErrorResult.js",
              "size": 13981,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/utils/Logger.js",
              "name": "Logger.js",
              "size": 12525,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/services/smart-content-trimmer.js",
              "name": "smart-content-trimmer.js",
              "size": 11576,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/interfaces/BatchResult.js",
              "name": "BatchResult.js",
              "size": 11258,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/interfaces/TokenResult.js",
              "name": "TokenResult.js",
              "size": 10160,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/services/config-service.js",
              "name": "config-service.js",
              "size": 9827,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/services/service-bus.js",
              "name": "service-bus.js",
              "size": 8689,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/services/service-registry.js",
              "name": "service-registry.js",
              "size": 8571,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "scripts/test-service-registry.js",
              "name": "test-service-registry.js",
              "size": 5271,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "server/services/response-service.js",
              "name": "response-service.js",
              "size": 2668,
              "extension": ".js",
              "isSourceCode": true
            },
            {
              "path": "jest.config.js",
              "name": "jest.config.js",
              "size": 826,
              "extension": ".js",
              "isSourceCode": true
            }
          ],
          "projectMetadata": {
            "name": "mg_kiro_mcp",
            "path": "/Users/martinezdavid/Documents/MG/code/mg_kiro_mcp",
            "lastModified": "2025-09-12T10:07:57.000Z",
            "createdAt": "2025-09-06T14:38:08.793Z",
            "totalFiles": 11,
            "totalSize": "964.79 KB",
            "totalSizeBytes": 987948,
            "fileTypeDistribution": {
              ".md": 5,
              ".json": 3,
              ".js": 2,
              ".xmind": 1
            }
          },
          "languageProfile": {
            "primary": "javascript",
            "secondary": [
              {
                "name": "express",
                "confidence": 33.33333333333333
              }
            ],
            "frameworks": [
              {
                "name": "express",
                "confidence": 33.33333333333333
              }
            ],
            "techStack": {
              "primary": "javascript",
              "frameworks": [
                {
                  "name": "express",
                  "confidence": 33.33333333333333
                }
              ]
            },
            "confidence": 83,
            "detectionSources": [
              "base-detection"
            ],
            "languageStats": {},
            "ecosystem": "javascript"
          }
        }
      },
      "completedAt": "2025-09-12T10:09:44.560Z",
      "docsDirectory": "/Users/martinezdavid/Documents/MG/code/mg_kiro_mcp/mg_kiro"
    },
    "step2": {
      "analysisResult": {
        "success": true,
        "data": {
          "fileAnalyses": [
            {
              "path": "index.js",
              "name": "index.js",
              "size": 141367,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 28530,
                "details": {
                  "estimatedTokens": 34590,
                  "safeTokenCount": 31384,
                  "breakdown": {
                    "totalChars": 123533,
                    "lines": 3509,
                    "comments": 4689,
                    "strings": 24576,
                    "keywords": 2018,
                    "symbols": 10459,
                    "identifiers": 41336,
                    "whitespace": 51981,
                    "tokens": {
                      "commentsTokens": 938,
                      "stringsTokens": 8602,
                      "keywordsTokens": 2422,
                      "symbolsTokens": 1569,
                      "identifiersTokens": 12401,
                      "baseTokens": 34590
                    }
                  },
                  "confidence": 0.9500000000000001
                },
                "metadata": {
                  "filePath": "index.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.763Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.764Z"
            },
            {
              "path": "server/services/file-query-service.js",
              "name": "file-query-service.js",
              "size": 40615,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 8533,
                "details": {
                  "estimatedTokens": 10493,
                  "safeTokenCount": 9387,
                  "breakdown": {
                    "totalChars": 37473,
                    "lines": 1072,
                    "comments": 2130,
                    "strings": 3334,
                    "keywords": 883,
                    "symbols": 3464,
                    "identifiers": 15062,
                    "whitespace": 15254,
                    "tokens": {
                      "commentsTokens": 426,
                      "stringsTokens": 1167,
                      "keywordsTokens": 1060,
                      "symbolsTokens": 520,
                      "identifiersTokens": 4519,
                      "baseTokens": 10493
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/services/file-query-service.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.766Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.766Z"
            },
            {
              "path": "server/services/project-overview-generator.js",
              "name": "project-overview-generator.js",
              "size": 40521,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 9162,
                "details": {
                  "estimatedTokens": 10695,
                  "safeTokenCount": 10079,
                  "breakdown": {
                    "totalChars": 38193,
                    "lines": 1075,
                    "comments": 1921,
                    "strings": 4548,
                    "keywords": 1137,
                    "symbols": 3839,
                    "identifiers": 15290,
                    "whitespace": 14118,
                    "tokens": {
                      "commentsTokens": 385,
                      "stringsTokens": 1592,
                      "keywordsTokens": 1365,
                      "symbolsTokens": 576,
                      "identifiersTokens": 4587,
                      "baseTokens": 10695
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/services/project-overview-generator.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.769Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.769Z"
            },
            {
              "path": "server/services/language-intelligence-service.js",
              "name": "language-intelligence-service.js",
              "size": 22062,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 4808,
                "details": {
                  "estimatedTokens": 5822,
                  "safeTokenCount": 5289,
                  "breakdown": {
                    "totalChars": 20790,
                    "lines": 691,
                    "comments": 2535,
                    "strings": 1927,
                    "keywords": 497,
                    "symbols": 2089,
                    "identifiers": 7597,
                    "whitespace": 8164,
                    "tokens": {
                      "commentsTokens": 507,
                      "stringsTokens": 675,
                      "keywordsTokens": 597,
                      "symbolsTokens": 314,
                      "identifiersTokens": 2280,
                      "baseTokens": 5822
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/services/language-intelligence-service.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.770Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.770Z"
            },
            {
              "path": "server/interfaces/TaskDefinition.js",
              "name": "TaskDefinition.js",
              "size": 20370,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 4513,
                "details": {
                  "estimatedTokens": 5203,
                  "safeTokenCount": 4965,
                  "breakdown": {
                    "totalChars": 18580,
                    "lines": 609,
                    "comments": 6685,
                    "strings": 1192,
                    "keywords": 361,
                    "symbols": 1867,
                    "identifiers": 5819,
                    "whitespace": 5687,
                    "tokens": {
                      "commentsTokens": 1337,
                      "stringsTokens": 418,
                      "keywordsTokens": 434,
                      "symbolsTokens": 281,
                      "identifiersTokens": 1746,
                      "baseTokens": 5203
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/interfaces/TaskDefinition.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.771Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.772Z"
            },
            {
              "path": "server/language/prompt-intelligence.js",
              "name": "prompt-intelligence.js",
              "size": 19744,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 4025,
                "details": {
                  "estimatedTokens": 4928,
                  "safeTokenCount": 4428,
                  "breakdown": {
                    "totalChars": 17598,
                    "lines": 564,
                    "comments": 1412,
                    "strings": 2171,
                    "keywords": 398,
                    "symbols": 1633,
                    "identifiers": 6240,
                    "whitespace": 7039,
                    "tokens": {
                      "commentsTokens": 283,
                      "stringsTokens": 760,
                      "keywordsTokens": 478,
                      "symbolsTokens": 245,
                      "identifiersTokens": 1872,
                      "baseTokens": 4928
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/language/prompt-intelligence.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.773Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.773Z"
            },
            {
              "path": "server/language/detector.js",
              "name": "detector.js",
              "size": 14782,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 3133,
                "details": {
                  "estimatedTokens": 3840,
                  "safeTokenCount": 3447,
                  "breakdown": {
                    "totalChars": 13714,
                    "lines": 415,
                    "comments": 1307,
                    "strings": 3042,
                    "keywords": 269,
                    "symbols": 1468,
                    "identifiers": 3191,
                    "whitespace": 5570,
                    "tokens": {
                      "commentsTokens": 262,
                      "stringsTokens": 1065,
                      "keywordsTokens": 323,
                      "symbolsTokens": 221,
                      "identifiersTokens": 958,
                      "baseTokens": 3840
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/language/detector.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.773Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.774Z"
            },
            {
              "path": "server/interfaces/ErrorResult.js",
              "name": "ErrorResult.js",
              "size": 13981,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 3219,
                "details": {
                  "estimatedTokens": 3590,
                  "safeTokenCount": 3541,
                  "breakdown": {
                    "totalChars": 12819,
                    "lines": 494,
                    "comments": 4531,
                    "strings": 1554,
                    "keywords": 355,
                    "symbols": 1429,
                    "identifiers": 3224,
                    "whitespace": 4215,
                    "tokens": {
                      "commentsTokens": 907,
                      "stringsTokens": 544,
                      "keywordsTokens": 426,
                      "symbolsTokens": 215,
                      "identifiersTokens": 968,
                      "baseTokens": 3590
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/interfaces/ErrorResult.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.774Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.774Z"
            },
            {
              "path": "server/utils/Logger.js",
              "name": "Logger.js",
              "size": 12525,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 2800,
                "details": {
                  "estimatedTokens": 3286,
                  "safeTokenCount": 3081,
                  "breakdown": {
                    "totalChars": 11735,
                    "lines": 462,
                    "comments": 1245,
                    "strings": 658,
                    "keywords": 284,
                    "symbols": 1489,
                    "identifiers": 5152,
                    "whitespace": 4254,
                    "tokens": {
                      "commentsTokens": 249,
                      "stringsTokens": 231,
                      "keywordsTokens": 341,
                      "symbolsTokens": 224,
                      "identifiersTokens": 1546,
                      "baseTokens": 3286
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/utils/Logger.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.775Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.775Z"
            },
            {
              "path": "server/services/smart-content-trimmer.js",
              "name": "smart-content-trimmer.js",
              "size": 11576,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 2989,
                "details": {
                  "estimatedTokens": 2986,
                  "safeTokenCount": 3288,
                  "breakdown": {
                    "totalChars": 10664,
                    "lines": 360,
                    "comments": 881,
                    "strings": 5036,
                    "keywords": 474,
                    "symbols": 1500,
                    "identifiers": 849,
                    "whitespace": 4292,
                    "tokens": {
                      "commentsTokens": 177,
                      "stringsTokens": 1763,
                      "keywordsTokens": 569,
                      "symbolsTokens": 225,
                      "identifiersTokens": 255,
                      "baseTokens": 2986
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/services/smart-content-trimmer.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.776Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.776Z"
            },
            {
              "path": "server/interfaces/BatchResult.js",
              "name": "BatchResult.js",
              "size": 11258,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 2487,
                "details": {
                  "estimatedTokens": 2862,
                  "safeTokenCount": 2736,
                  "breakdown": {
                    "totalChars": 10220,
                    "lines": 351,
                    "comments": 3474,
                    "strings": 1015,
                    "keywords": 223,
                    "symbols": 1086,
                    "identifiers": 2807,
                    "whitespace": 3430,
                    "tokens": {
                      "commentsTokens": 695,
                      "stringsTokens": 356,
                      "keywordsTokens": 268,
                      "symbolsTokens": 163,
                      "identifiersTokens": 843,
                      "baseTokens": 2862
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/interfaces/BatchResult.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.777Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.777Z"
            },
            {
              "path": "server/interfaces/TokenResult.js",
              "name": "TokenResult.js",
              "size": 10160,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 2235,
                "details": {
                  "estimatedTokens": 2575,
                  "safeTokenCount": 2459,
                  "breakdown": {
                    "totalChars": 9196,
                    "lines": 332,
                    "comments": 3183,
                    "strings": 172,
                    "keywords": 229,
                    "symbols": 1008,
                    "identifiers": 3207,
                    "whitespace": 2792,
                    "tokens": {
                      "commentsTokens": 637,
                      "stringsTokens": 61,
                      "keywordsTokens": 275,
                      "symbolsTokens": 152,
                      "identifiersTokens": 963,
                      "baseTokens": 2575
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/interfaces/TokenResult.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.778Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.778Z"
            },
            {
              "path": "server/services/config-service.js",
              "name": "config-service.js",
              "size": 9827,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 1629,
                "details": {
                  "estimatedTokens": 2511,
                  "safeTokenCount": 1792,
                  "breakdown": {
                    "totalChars": 8967,
                    "lines": 350,
                    "comments": 1359,
                    "strings": 694,
                    "keywords": 271,
                    "symbols": 1045,
                    "identifiers": 840,
                    "whitespace": 3556,
                    "tokens": {
                      "commentsTokens": 272,
                      "stringsTokens": 243,
                      "keywordsTokens": 326,
                      "symbolsTokens": 157,
                      "identifiersTokens": 252,
                      "baseTokens": 2511
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/services/config-service.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.778Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.778Z"
            },
            {
              "path": "server/services/service-bus.js",
              "name": "service-bus.js",
              "size": 8689,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 2027,
                "details": {
                  "estimatedTokens": 2222,
                  "safeTokenCount": 2230,
                  "breakdown": {
                    "totalChars": 7935,
                    "lines": 294,
                    "comments": 804,
                    "strings": 625,
                    "keywords": 294,
                    "symbols": 936,
                    "identifiers": 3562,
                    "whitespace": 2741,
                    "tokens": {
                      "commentsTokens": 161,
                      "stringsTokens": 219,
                      "keywordsTokens": 353,
                      "symbolsTokens": 141,
                      "identifiersTokens": 1069,
                      "baseTokens": 2222
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/services/service-bus.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.779Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.779Z"
            },
            {
              "path": "server/services/service-registry.js",
              "name": "service-registry.js",
              "size": 8571,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 2179,
                "details": {
                  "estimatedTokens": 2159,
                  "safeTokenCount": 2397,
                  "breakdown": {
                    "totalChars": 7709,
                    "lines": 205,
                    "comments": 563,
                    "strings": 2217,
                    "keywords": 242,
                    "symbols": 709,
                    "identifiers": 3000,
                    "whitespace": 1532,
                    "tokens": {
                      "commentsTokens": 113,
                      "stringsTokens": 776,
                      "keywordsTokens": 291,
                      "symbolsTokens": 107,
                      "identifiersTokens": 900,
                      "baseTokens": 2159
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/services/service-registry.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.779Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.779Z"
            },
            {
              "path": "scripts/test-service-registry.js",
              "name": "test-service-registry.js",
              "size": 5271,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 1470,
                "details": {
                  "estimatedTokens": 1281,
                  "safeTokenCount": 1618,
                  "breakdown": {
                    "totalChars": 4573,
                    "lines": 116,
                    "comments": 141,
                    "strings": 1937,
                    "keywords": 127,
                    "symbols": 502,
                    "identifiers": 2049,
                    "whitespace": 1192,
                    "tokens": {
                      "commentsTokens": 29,
                      "stringsTokens": 678,
                      "keywordsTokens": 153,
                      "symbolsTokens": 76,
                      "identifiersTokens": 615,
                      "baseTokens": 1281
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "scripts/test-service-registry.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.780Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.780Z"
            },
            {
              "path": "server/services/response-service.js",
              "name": "response-service.js",
              "size": 2668,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 659,
                "details": {
                  "estimatedTokens": 675,
                  "safeTokenCount": 725,
                  "breakdown": {
                    "totalChars": 2408,
                    "lines": 103,
                    "comments": 798,
                    "strings": 120,
                    "keywords": 119,
                    "symbols": 321,
                    "identifiers": 856,
                    "whitespace": 633,
                    "tokens": {
                      "commentsTokens": 160,
                      "stringsTokens": 42,
                      "keywordsTokens": 143,
                      "symbolsTokens": 49,
                      "identifiersTokens": 257,
                      "baseTokens": 675
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "server/services/response-service.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.780Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.780Z"
            },
            {
              "path": "jest.config.js",
              "name": "jest.config.js",
              "size": 826,
              "extension": ".js",
              "isSourceCode": true,
              "tokenCount": {
                "totalTokens": 194,
                "details": {
                  "estimatedTokens": 200,
                  "safeTokenCount": 214,
                  "breakdown": {
                    "totalChars": 714,
                    "lines": 45,
                    "comments": 167,
                    "strings": 227,
                    "keywords": 9,
                    "symbols": 131,
                    "identifiers": 152,
                    "whitespace": 172,
                    "tokens": {
                      "commentsTokens": 34,
                      "stringsTokens": 80,
                      "keywordsTokens": 11,
                      "symbolsTokens": 20,
                      "identifiersTokens": 46,
                      "baseTokens": 200
                    }
                  },
                  "confidence": 1
                },
                "metadata": {
                  "filePath": "jest.config.js",
                  "language": "javascript",
                  "calculationMethod": "precise_tiktoken",
                  "analysisTimestamp": "2025-09-12T10:09:54.781Z",
                  "fromCache": false,
                  "error": null
                }
              },
              "codeStructure": {
                "complexity": 1,
                "functions": [],
                "classes": [],
                "imports": []
              },
              "analysisTimestamp": "2025-09-12T10:09:54.781Z"
            }
          ],
          "fileCategories": {
            "small": [
              {
                "path": "server/services/file-query-service.js",
                "name": "file-query-service.js",
                "size": 40615,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 8533,
                  "details": {
                    "estimatedTokens": 10493,
                    "safeTokenCount": 9387,
                    "breakdown": {
                      "totalChars": 37473,
                      "lines": 1072,
                      "comments": 2130,
                      "strings": 3334,
                      "keywords": 883,
                      "symbols": 3464,
                      "identifiers": 15062,
                      "whitespace": 15254,
                      "tokens": {
                        "commentsTokens": 426,
                        "stringsTokens": 1167,
                        "keywordsTokens": 1060,
                        "symbolsTokens": 520,
                        "identifiersTokens": 4519,
                        "baseTokens": 10493
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/services/file-query-service.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.766Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.766Z"
              },
              {
                "path": "server/services/project-overview-generator.js",
                "name": "project-overview-generator.js",
                "size": 40521,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 9162,
                  "details": {
                    "estimatedTokens": 10695,
                    "safeTokenCount": 10079,
                    "breakdown": {
                      "totalChars": 38193,
                      "lines": 1075,
                      "comments": 1921,
                      "strings": 4548,
                      "keywords": 1137,
                      "symbols": 3839,
                      "identifiers": 15290,
                      "whitespace": 14118,
                      "tokens": {
                        "commentsTokens": 385,
                        "stringsTokens": 1592,
                        "keywordsTokens": 1365,
                        "symbolsTokens": 576,
                        "identifiersTokens": 4587,
                        "baseTokens": 10695
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/services/project-overview-generator.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.769Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.769Z"
              },
              {
                "path": "server/services/language-intelligence-service.js",
                "name": "language-intelligence-service.js",
                "size": 22062,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 4808,
                  "details": {
                    "estimatedTokens": 5822,
                    "safeTokenCount": 5289,
                    "breakdown": {
                      "totalChars": 20790,
                      "lines": 691,
                      "comments": 2535,
                      "strings": 1927,
                      "keywords": 497,
                      "symbols": 2089,
                      "identifiers": 7597,
                      "whitespace": 8164,
                      "tokens": {
                        "commentsTokens": 507,
                        "stringsTokens": 675,
                        "keywordsTokens": 597,
                        "symbolsTokens": 314,
                        "identifiersTokens": 2280,
                        "baseTokens": 5822
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/services/language-intelligence-service.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.770Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.770Z"
              },
              {
                "path": "server/interfaces/TaskDefinition.js",
                "name": "TaskDefinition.js",
                "size": 20370,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 4513,
                  "details": {
                    "estimatedTokens": 5203,
                    "safeTokenCount": 4965,
                    "breakdown": {
                      "totalChars": 18580,
                      "lines": 609,
                      "comments": 6685,
                      "strings": 1192,
                      "keywords": 361,
                      "symbols": 1867,
                      "identifiers": 5819,
                      "whitespace": 5687,
                      "tokens": {
                        "commentsTokens": 1337,
                        "stringsTokens": 418,
                        "keywordsTokens": 434,
                        "symbolsTokens": 281,
                        "identifiersTokens": 1746,
                        "baseTokens": 5203
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/interfaces/TaskDefinition.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.771Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.772Z"
              },
              {
                "path": "server/language/prompt-intelligence.js",
                "name": "prompt-intelligence.js",
                "size": 19744,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 4025,
                  "details": {
                    "estimatedTokens": 4928,
                    "safeTokenCount": 4428,
                    "breakdown": {
                      "totalChars": 17598,
                      "lines": 564,
                      "comments": 1412,
                      "strings": 2171,
                      "keywords": 398,
                      "symbols": 1633,
                      "identifiers": 6240,
                      "whitespace": 7039,
                      "tokens": {
                        "commentsTokens": 283,
                        "stringsTokens": 760,
                        "keywordsTokens": 478,
                        "symbolsTokens": 245,
                        "identifiersTokens": 1872,
                        "baseTokens": 4928
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/language/prompt-intelligence.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.773Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.773Z"
              },
              {
                "path": "server/language/detector.js",
                "name": "detector.js",
                "size": 14782,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 3133,
                  "details": {
                    "estimatedTokens": 3840,
                    "safeTokenCount": 3447,
                    "breakdown": {
                      "totalChars": 13714,
                      "lines": 415,
                      "comments": 1307,
                      "strings": 3042,
                      "keywords": 269,
                      "symbols": 1468,
                      "identifiers": 3191,
                      "whitespace": 5570,
                      "tokens": {
                        "commentsTokens": 262,
                        "stringsTokens": 1065,
                        "keywordsTokens": 323,
                        "symbolsTokens": 221,
                        "identifiersTokens": 958,
                        "baseTokens": 3840
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/language/detector.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.773Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.774Z"
              },
              {
                "path": "server/interfaces/ErrorResult.js",
                "name": "ErrorResult.js",
                "size": 13981,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 3219,
                  "details": {
                    "estimatedTokens": 3590,
                    "safeTokenCount": 3541,
                    "breakdown": {
                      "totalChars": 12819,
                      "lines": 494,
                      "comments": 4531,
                      "strings": 1554,
                      "keywords": 355,
                      "symbols": 1429,
                      "identifiers": 3224,
                      "whitespace": 4215,
                      "tokens": {
                        "commentsTokens": 907,
                        "stringsTokens": 544,
                        "keywordsTokens": 426,
                        "symbolsTokens": 215,
                        "identifiersTokens": 968,
                        "baseTokens": 3590
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/interfaces/ErrorResult.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.774Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.774Z"
              },
              {
                "path": "server/utils/Logger.js",
                "name": "Logger.js",
                "size": 12525,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 2800,
                  "details": {
                    "estimatedTokens": 3286,
                    "safeTokenCount": 3081,
                    "breakdown": {
                      "totalChars": 11735,
                      "lines": 462,
                      "comments": 1245,
                      "strings": 658,
                      "keywords": 284,
                      "symbols": 1489,
                      "identifiers": 5152,
                      "whitespace": 4254,
                      "tokens": {
                        "commentsTokens": 249,
                        "stringsTokens": 231,
                        "keywordsTokens": 341,
                        "symbolsTokens": 224,
                        "identifiersTokens": 1546,
                        "baseTokens": 3286
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/utils/Logger.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.775Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.775Z"
              },
              {
                "path": "server/services/smart-content-trimmer.js",
                "name": "smart-content-trimmer.js",
                "size": 11576,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 2989,
                  "details": {
                    "estimatedTokens": 2986,
                    "safeTokenCount": 3288,
                    "breakdown": {
                      "totalChars": 10664,
                      "lines": 360,
                      "comments": 881,
                      "strings": 5036,
                      "keywords": 474,
                      "symbols": 1500,
                      "identifiers": 849,
                      "whitespace": 4292,
                      "tokens": {
                        "commentsTokens": 177,
                        "stringsTokens": 1763,
                        "keywordsTokens": 569,
                        "symbolsTokens": 225,
                        "identifiersTokens": 255,
                        "baseTokens": 2986
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/services/smart-content-trimmer.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.776Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.776Z"
              },
              {
                "path": "server/interfaces/BatchResult.js",
                "name": "BatchResult.js",
                "size": 11258,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 2487,
                  "details": {
                    "estimatedTokens": 2862,
                    "safeTokenCount": 2736,
                    "breakdown": {
                      "totalChars": 10220,
                      "lines": 351,
                      "comments": 3474,
                      "strings": 1015,
                      "keywords": 223,
                      "symbols": 1086,
                      "identifiers": 2807,
                      "whitespace": 3430,
                      "tokens": {
                        "commentsTokens": 695,
                        "stringsTokens": 356,
                        "keywordsTokens": 268,
                        "symbolsTokens": 163,
                        "identifiersTokens": 843,
                        "baseTokens": 2862
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/interfaces/BatchResult.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.777Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.777Z"
              },
              {
                "path": "server/interfaces/TokenResult.js",
                "name": "TokenResult.js",
                "size": 10160,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 2235,
                  "details": {
                    "estimatedTokens": 2575,
                    "safeTokenCount": 2459,
                    "breakdown": {
                      "totalChars": 9196,
                      "lines": 332,
                      "comments": 3183,
                      "strings": 172,
                      "keywords": 229,
                      "symbols": 1008,
                      "identifiers": 3207,
                      "whitespace": 2792,
                      "tokens": {
                        "commentsTokens": 637,
                        "stringsTokens": 61,
                        "keywordsTokens": 275,
                        "symbolsTokens": 152,
                        "identifiersTokens": 963,
                        "baseTokens": 2575
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/interfaces/TokenResult.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.778Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.778Z"
              },
              {
                "path": "server/services/config-service.js",
                "name": "config-service.js",
                "size": 9827,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 1629,
                  "details": {
                    "estimatedTokens": 2511,
                    "safeTokenCount": 1792,
                    "breakdown": {
                      "totalChars": 8967,
                      "lines": 350,
                      "comments": 1359,
                      "strings": 694,
                      "keywords": 271,
                      "symbols": 1045,
                      "identifiers": 840,
                      "whitespace": 3556,
                      "tokens": {
                        "commentsTokens": 272,
                        "stringsTokens": 243,
                        "keywordsTokens": 326,
                        "symbolsTokens": 157,
                        "identifiersTokens": 252,
                        "baseTokens": 2511
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/services/config-service.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.778Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.778Z"
              },
              {
                "path": "server/services/service-bus.js",
                "name": "service-bus.js",
                "size": 8689,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 2027,
                  "details": {
                    "estimatedTokens": 2222,
                    "safeTokenCount": 2230,
                    "breakdown": {
                      "totalChars": 7935,
                      "lines": 294,
                      "comments": 804,
                      "strings": 625,
                      "keywords": 294,
                      "symbols": 936,
                      "identifiers": 3562,
                      "whitespace": 2741,
                      "tokens": {
                        "commentsTokens": 161,
                        "stringsTokens": 219,
                        "keywordsTokens": 353,
                        "symbolsTokens": 141,
                        "identifiersTokens": 1069,
                        "baseTokens": 2222
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/services/service-bus.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.779Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.779Z"
              },
              {
                "path": "server/services/service-registry.js",
                "name": "service-registry.js",
                "size": 8571,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 2179,
                  "details": {
                    "estimatedTokens": 2159,
                    "safeTokenCount": 2397,
                    "breakdown": {
                      "totalChars": 7709,
                      "lines": 205,
                      "comments": 563,
                      "strings": 2217,
                      "keywords": 242,
                      "symbols": 709,
                      "identifiers": 3000,
                      "whitespace": 1532,
                      "tokens": {
                        "commentsTokens": 113,
                        "stringsTokens": 776,
                        "keywordsTokens": 291,
                        "symbolsTokens": 107,
                        "identifiersTokens": 900,
                        "baseTokens": 2159
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/services/service-registry.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.779Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.779Z"
              },
              {
                "path": "scripts/test-service-registry.js",
                "name": "test-service-registry.js",
                "size": 5271,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 1470,
                  "details": {
                    "estimatedTokens": 1281,
                    "safeTokenCount": 1618,
                    "breakdown": {
                      "totalChars": 4573,
                      "lines": 116,
                      "comments": 141,
                      "strings": 1937,
                      "keywords": 127,
                      "symbols": 502,
                      "identifiers": 2049,
                      "whitespace": 1192,
                      "tokens": {
                        "commentsTokens": 29,
                        "stringsTokens": 678,
                        "keywordsTokens": 153,
                        "symbolsTokens": 76,
                        "identifiersTokens": 615,
                        "baseTokens": 1281
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "scripts/test-service-registry.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.780Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.780Z"
              },
              {
                "path": "server/services/response-service.js",
                "name": "response-service.js",
                "size": 2668,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 659,
                  "details": {
                    "estimatedTokens": 675,
                    "safeTokenCount": 725,
                    "breakdown": {
                      "totalChars": 2408,
                      "lines": 103,
                      "comments": 798,
                      "strings": 120,
                      "keywords": 119,
                      "symbols": 321,
                      "identifiers": 856,
                      "whitespace": 633,
                      "tokens": {
                        "commentsTokens": 160,
                        "stringsTokens": 42,
                        "keywordsTokens": 143,
                        "symbolsTokens": 49,
                        "identifiersTokens": 257,
                        "baseTokens": 675
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "server/services/response-service.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.780Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.780Z"
              },
              {
                "path": "jest.config.js",
                "name": "jest.config.js",
                "size": 826,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 194,
                  "details": {
                    "estimatedTokens": 200,
                    "safeTokenCount": 214,
                    "breakdown": {
                      "totalChars": 714,
                      "lines": 45,
                      "comments": 167,
                      "strings": 227,
                      "keywords": 9,
                      "symbols": 131,
                      "identifiers": 152,
                      "whitespace": 172,
                      "tokens": {
                        "commentsTokens": 34,
                        "stringsTokens": 80,
                        "keywordsTokens": 11,
                        "symbolsTokens": 20,
                        "identifiersTokens": 46,
                        "baseTokens": 200
                      }
                    },
                    "confidence": 1
                  },
                  "metadata": {
                    "filePath": "jest.config.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.781Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.781Z"
              }
            ],
            "medium": [],
            "large": [
              {
                "path": "index.js",
                "name": "index.js",
                "size": 141367,
                "extension": ".js",
                "isSourceCode": true,
                "tokenCount": {
                  "totalTokens": 28530,
                  "details": {
                    "estimatedTokens": 34590,
                    "safeTokenCount": 31384,
                    "breakdown": {
                      "totalChars": 123533,
                      "lines": 3509,
                      "comments": 4689,
                      "strings": 24576,
                      "keywords": 2018,
                      "symbols": 10459,
                      "identifiers": 41336,
                      "whitespace": 51981,
                      "tokens": {
                        "commentsTokens": 938,
                        "stringsTokens": 8602,
                        "keywordsTokens": 2422,
                        "symbolsTokens": 1569,
                        "identifiersTokens": 12401,
                        "baseTokens": 34590
                      }
                    },
                    "confidence": 0.9500000000000001
                  },
                  "metadata": {
                    "filePath": "index.js",
                    "language": "javascript",
                    "calculationMethod": "precise_tiktoken",
                    "analysisTimestamp": "2025-09-12T10:09:54.763Z",
                    "fromCache": false,
                    "error": null
                  }
                },
                "codeStructure": {
                  "complexity": 1,
                  "functions": [],
                  "classes": [],
                  "imports": []
                },
                "analysisTimestamp": "2025-09-12T10:09:54.764Z"
              }
            ],
            "error": []
          },
          "batchPlans": {
            "combinedBatches": [
              {
                "type": "combined_batch",
                "batchId": "batch_1",
                "strategy": "combined",
                "estimatedTokens": 17695,
                "fileCount": 2,
                "files": [
                  {
                    "path": "server/services/file-query-service.js",
                    "tokenCount": 8533,
                    "size": 40615,
                    "language": "javascript",
                    "originalIndex": 0,
                    "priority": null
                  },
                  {
                    "path": "server/services/project-overview-generator.js",
                    "tokenCount": 9162,
                    "size": 40521,
                    "language": "javascript",
                    "originalIndex": 1,
                    "priority": null
                  }
                ],
                "metadata": {
                  "strategy": "combined",
                  "fileCount": 2,
                  "description": "组合批次包含2个文件: file-query-service.js, project-overview-generator.js",
                  "efficiency": 98,
                  "processingHints": {
                    "analysisDepth": "comprehensive",
                    "contextAware": true,
                    "crossFileReferences": true,
                    "preserveRelationships": true,
                    "avgTokensPerFile": 8848,
                    "directories": [
                      "services"
                    ],
                    "extensions": [
                      "js"
                    ],
                    "modules": [
                      "server"
                    ]
                  }
                },
                "batchIndex": 1,
                "totalBatches": 3
              },
              {
                "type": "combined_batch",
                "batchId": "batch_2",
                "strategy": "combined",
                "estimatedTokens": 18804,
                "fileCount": 7,
                "files": [
                  {
                    "path": "server/services/response-service.js",
                    "tokenCount": 659,
                    "size": 2668,
                    "language": "javascript",
                    "originalIndex": 15,
                    "priority": null
                  },
                  {
                    "path": "server/services/config-service.js",
                    "tokenCount": 1629,
                    "size": 9827,
                    "language": "javascript",
                    "originalIndex": 11,
                    "priority": null
                  },
                  {
                    "path": "server/services/service-bus.js",
                    "tokenCount": 2027,
                    "size": 8689,
                    "language": "javascript",
                    "originalIndex": 12,
                    "priority": null
                  },
                  {
                    "path": "server/services/service-registry.js",
                    "tokenCount": 2179,
                    "size": 8571,
                    "language": "javascript",
                    "originalIndex": 13,
                    "priority": null
                  },
                  {
                    "path": "server/services/smart-content-trimmer.js",
                    "tokenCount": 2989,
                    "size": 11576,
                    "language": "javascript",
                    "originalIndex": 8,
                    "priority": null
                  },
                  {
                    "path": "server/interfaces/TaskDefinition.js",
                    "tokenCount": 4513,
                    "size": 20370,
                    "language": "javascript",
                    "originalIndex": 3,
                    "priority": null
                  },
                  {
                    "path": "server/services/language-intelligence-service.js",
                    "tokenCount": 4808,
                    "size": 22062,
                    "language": "javascript",
                    "originalIndex": 2,
                    "priority": null
                  }
                ],
                "metadata": {
                  "strategy": "combined",
                  "fileCount": 7,
                  "description": "组合批次包含7个文件: response-service.js, config-service.js, service-bus.js, service-registry.js, smart-content-trimmer.js, TaskDefinition.js, language-intelligence-service.js",
                  "efficiency": 100,
                  "processingHints": {
                    "analysisDepth": "comprehensive",
                    "contextAware": true,
                    "crossFileReferences": true,
                    "preserveRelationships": true,
                    "avgTokensPerFile": 2686,
                    "directories": [
                      "services",
                      "interfaces"
                    ],
                    "extensions": [
                      "js"
                    ],
                    "modules": [
                      "server"
                    ]
                  }
                },
                "batchIndex": 2,
                "totalBatches": 3
              },
              {
                "type": "combined_batch",
                "batchId": "batch_3",
                "strategy": "combined",
                "estimatedTokens": 19563,
                "fileCount": 8,
                "files": [
                  {
                    "path": "jest.config.js",
                    "tokenCount": 194,
                    "size": 826,
                    "language": "javascript",
                    "originalIndex": 16,
                    "priority": null
                  },
                  {
                    "path": "scripts/test-service-registry.js",
                    "tokenCount": 1470,
                    "size": 5271,
                    "language": "javascript",
                    "originalIndex": 14,
                    "priority": null
                  },
                  {
                    "path": "server/interfaces/TokenResult.js",
                    "tokenCount": 2235,
                    "size": 10160,
                    "language": "javascript",
                    "originalIndex": 10,
                    "priority": null
                  },
                  {
                    "path": "server/interfaces/BatchResult.js",
                    "tokenCount": 2487,
                    "size": 11258,
                    "language": "javascript",
                    "originalIndex": 9,
                    "priority": null
                  },
                  {
                    "path": "server/utils/Logger.js",
                    "tokenCount": 2800,
                    "size": 12525,
                    "language": "javascript",
                    "originalIndex": 7,
                    "priority": null
                  },
                  {
                    "path": "server/language/detector.js",
                    "tokenCount": 3133,
                    "size": 14782,
                    "language": "javascript",
                    "originalIndex": 5,
                    "priority": null
                  },
                  {
                    "path": "server/interfaces/ErrorResult.js",
                    "tokenCount": 3219,
                    "size": 13981,
                    "language": "javascript",
                    "originalIndex": 6,
                    "priority": null
                  },
                  {
                    "path": "server/language/prompt-intelligence.js",
                    "tokenCount": 4025,
                    "size": 19744,
                    "language": "javascript",
                    "originalIndex": 4,
                    "priority": null
                  }
                ],
                "metadata": {
                  "strategy": "combined",
                  "fileCount": 8,
                  "description": "组合批次包含8个文件: jest.config.js, test-service-registry.js, TokenResult.js, BatchResult.js, Logger.js, detector.js, ErrorResult.js, prompt-intelligence.js",
                  "efficiency": 100,
                  "processingHints": {
                    "analysisDepth": "comprehensive",
                    "contextAware": true,
                    "crossFileReferences": true,
                    "preserveRelationships": true,
                    "avgTokensPerFile": 2445,
                    "directories": [
                      "root",
                      "scripts",
                      "interfaces",
                      "utils",
                      "language"
                    ],
                    "extensions": [
                      "js"
                    ],
                    "modules": [
                      "unknown",
                      "server"
                    ]
                  }
                },
                "batchIndex": 3,
                "totalBatches": 3
              }
            ],
            "singleBatches": [],
            "multiBatches": [
              {
                "type": "large_file_chunk",
                "batchId": "large_file_1_1",
                "strategy": "largeMulti",
                "estimatedTokens": 30079,
                "fileCount": 1,
                "files": [
                  {
                    "path": "index.js",
                    "tokenCount": 72159,
                    "size": 120316,
                    "language": "javascript",
                    "originalIndex": 0,
                    "priority": 1
                  }
                ],
                "chunkInfo": {
                  "chunkIndex": 1,
                  "totalChunks": 2,
                  "startLine": 1,
                  "endLine": 3402,
                  "content": "// Chunk 1 - Generated by FunctionBoundaryDetector\n\n#!/usr/bin/env node\n\n/**\n * mg_kiro MCP Server\n * 统一入口点 - MCP协议服务器 + Express API + WebSocket\n * \n * 支持两种运行模式:\n * 1. MCP服务器模式: node index.js (MCP服务器运行在stdio)\n * 2. Express服务器模式: MCP_PORT=3000 node index.js (Web服务器运行在指定端口)\n */\n\nimport { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n} from \"@modelcontextprotocol/sdk/types.js\";\nimport express from 'express';\nimport http from 'http';\nimport { WebSocketServer } from 'ws';\nimport cors from 'cors';\nimport { fileURLToPath } from 'url';\nimport path, { dirname, join, resolve } from 'path';\nimport fs, { existsSync, mkdirSync, writeFileSync, readFileSync, rmSync, readdirSync, unlinkSync } from 'fs';\nimport { createAppRoutes } from './server/routes/index.js';\nimport { initializeServices } from './server/services/service-registry.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst CONFIG_DIR = join(__dirname, 'config');\n\n// ========== 服务容器包装器 ==========\nfunction getServiceContainer(serviceBus) {\n  return {\n    // 新的统一模板系统\n    masterTemplateService: serviceBus.get('masterTemplateService'),\n    templateConfigManager: serviceBus.get('templateConfigManager'),\n    \n    // 其他核心服务\n    languageDetector: serviceBus.get('languageDetector'),\n    languageIntelligence: serviceBus.get('languageIntelligence'),\n    configService: serviceBus.get('configService'),\n    \n    // 核心业务服务\n    projectOverviewGenerator: serviceBus.get('projectOverviewGenerator'),\n    \n    // 新的文件分析模块和任务管理服务\n    fileAnalysisModule: serviceBus.get('fileAnalysisModule'),\n    unifiedTaskManager: serviceBus.get('unifiedTaskManager'),\n    unifiedTaskValidator: serviceBus.get('unifiedTaskValidator'),\n    taskStateManager: serviceBus.get('taskStateManager'),\n    \n    // 文件分析模块组件（可选直接访问）\n    preciseTokenCalculator: serviceBus.get('preciseTokenCalculator'),\n    combinedFileBatchStrategy: serviceBus.get('combinedFileBatchStrategy'),\n    singleFileBatchStrategy: serviceBus.get('singleFileBatchStrategy'),\n    largeFileMultiBatchStrategy: serviceBus.get('largeFileMultiBatchStrategy'),\n    \n    \n    // ServiceBus工具方法\n    getService: (name) => serviceBus.get(name),\n    getServiceStatus: (name) => serviceBus.getServiceStatus(name),\n    getStats: () => serviceBus.getStats(),\n    getAllServices: () => serviceBus.getAllServices()\n  };\n}\n\n// ========== 服务器模式 ==========\nstartServer().catch(console.error);\n\nasync function startServer() {\n  // 初始化服务系统\n  console.log('[Server] 初始化服务系统...');\n  const serviceBus = await initializeServices(CONFIG_DIR);\n\n  // ========== Express服务器设置 ==========\n  const PORT = process.env.MCP_PORT || process.env.PORT;\n  \n  if (PORT) {\n    // Express服务器模式\n    console.log('[Server] 启动Express服务器模式...');\n    \n    const app = express();\n    const httpServer = http.createServer(app);\n\n    // 中间件配置\n    app.use(cors());\n    app.use(express.json({ limit: '50mb' }));\n    app.use(express.urlencoded({ extended: true }));\n\n    // 请求日志\n    app.use((req, res, next) => {\n      console.log(`[HTTP] ${req.method} ${req.path}`);\n      next();\n    });\n\n    // 创建服务容器并生成路由\n    const serviceContainer = getServiceContainer(serviceBus);\n    const routes = createAppRoutes(serviceContainer, null);\n    app.use('/', routes);\n\n    // WebSocket服务器\n    const wss = new WebSocketServer({ server: httpServer });\n    \n    wss.on('connection', (ws) => {\n      console.log('[WebSocket] 新客户端连接');\n      \n      ws.on('message', (message) => {\n        try {\n          const data = JSON.parse(message);\n          console.log('[WebSocket] 收到消息:', data.type || 'unknown');\n          \n          // 处理WebSocket消息\n          handleWebSocketMessage(ws, data, serviceBus);\n        } catch (error) {\n          console.error('[WebSocket] 消息处理错误:', error);\n          ws.send(JSON.stringify({ error: error.message }));\n        }\n      });\n      \n      ws.on('close', () => {\n        console.log('[WebSocket] 客户端断开连接');\n      });\n    });\n\n    // 启动HTTP服务器\n    httpServer.listen(PORT, () => {\n      console.log(`\\n✅ mg_kiro Express服务器已启动`);\n      console.log(`📡 HTTP服务: http://localhost:${PORT}`);\n      console.log(`🔌 WebSocket服务: ws://localhost:${PORT}`);\n      console.log(`📚 API文档: http://localhost:${PORT}/api-docs`);\n      console.log(`\\n可用的端点 (精简版 3.0):`);\n      console.log(`  - GET  /health - 健康检查`);\n      console.log(`  - POST /init/project-overview - 生成项目概览包`);\n      console.log(`  - POST /init/progressive-documentation - 渐进式文档生成`);\n      console.log(`  - GET  /init/status - 获取Init状态`);\n      console.log(`  - GET  /init/help - API帮助信息`);\n      console.log(`\\nMCP工具:`);\n      console.log(`  - generate_project_overview - 生成项目概览`);\n      console.log(`  - progressive_documentation - 渐进式文档生成`);\n    });\n  }\n\n  // ========== MCP服务器设置 ==========\n  console.log('[Server] 启动MCP协议服务器...');\n  \n  const server = new Server(\n    {\n      name: \"mg_kiro\",\n      version: \"4.0.0-complete-6-steps\",\n    },\n    {\n      capabilities: {\n        tools: {},\n      },\n    }\n  );\n\n  // MCP工具：完整的6步Init流程 + 工作流引导\n  server.setRequestHandler(ListToolsRequestSchema, async () => {\n    return {\n      tools: [\n        {\n          name: \"workflow_guide\",\n          description: \"工作流引导入口：获取完整的6步工作流程指引，了解如何使用其他工具完成复杂任务。这是使用本MCP服务的起点\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              workflow: {\n                type: \"string\",\n                description: \"要执行的工作流类型：init(项目初始化) | status(状态查询)\",\n                enum: [\"init\", \"status\"],\n                default: \"init\"\n              },\n              currentStep: {\n                type: \"string\",\n                description: \"当前所在步骤（可选），用于获取特定步骤的指引\",\n                default: null\n              },\n              projectPath: {\n                type: \"string\",\n                description: \"项目路径（可选），用于获取更精准的建议\",\n                default: null\n              }\n            },\n            required: []\n          }\n        },\n        {\n          name: \"init_step1_project_analysis\",\n          description: \"Step1: 项目分析 - 生成基础数据包和架构文档，为AI任务准备上下文\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              projectPath: {\n                type: \"string\",\n                description: \"项目根目录的绝对路径\"\n              },\n              maxDepth: {\n                type: \"number\",\n                description: \"目录扫描最大深度，默认3层\",\n                default: 3\n              },\n              includeFiles: {\n                type: \"array\",\n                description: \"额外要包含的文件模式列表\",\n                items: { type: \"string\" },\n                default: []\n              },\n              maxKeyFileSize: {\n                type: \"number\",\n                description: \"关键文件内容的最大字节数，默认50KB\",\n                default: 51200\n              }\n            },\n            required: [\"projectPath\"]\n          }\n        },\n        {\n          name: \"init_step2_create_todos\",\n          description: \"Step2: 创建AI任务列表 - 基于Step1的项目分析结果创建详细的任务列表和处理策略\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              projectPath: {\n                type: \"string\",\n                description: \"项目根目录路径（与Step1相同）\"\n              },\n              batchSize: {\n                type: \"number\",\n                description: \"批次大小，默认使用Step1的建议值\",\n                default: null\n              },\n              includeAnalysisTasks: {\n                type: \"boolean\",\n                description: \"是否包含分析任务\",\n                default: true\n              },\n              includeSummaryTasks: {\n                type: \"boolean\",\n                description: \"是否包含总结任务\",\n                default: true\n              }\n            },\n            required: [\"projectPath\"]\n          }\n        },\n        {\n          name: \"init_step2_file_analysis\", \n          description: \"Step2: 文件分析模块 - 智能Token分析和批次规划，使用FileAnalysisModule作为系统大脑进行精确的文件分析和智能批次分配\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              projectPath: {\n                type: \"string\", \n                description: \"项目根目录路径（与Step1相同）\"\n              }\n            },\n            required: [\"projectPath\"]\n          }\n        },\n        {\n          name: \"init_step3_get_next_task\",\n          description: \"🚀 [工作流入口] 启动文件处理流程 - ⚠️ 只能在完成step1+step2后调用！调用后系统进入step3状态，返回第一个文件任务(如file_1_1)。✅ 必须严格按照：此工具→get_file_content→complete_task 的顺序执行，不可跳过！\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              projectPath: {\n                type: \"string\",\n                description: \"项目根目录路径\"\n              }\n            },\n            required: [\"projectPath\"]\n          }\n        },\n        {\n          name: \"init_step3_get_file_content\",\n          description: \"📄 [必须第二步] 处理当前任务的文件内容 - ⚠️ 前置条件：必须先调用get_next_task获得任务ID！✅ 严格用法：get_next_task→[此工具]→complete_task。🚫 不能跳过顺序，否则失败！\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              projectPath: {\n                type: \"string\",\n                description: \"项目根目录路径\"\n              },\n              relativePath: {\n                type: \"string\",\n                description: \"文件的相对路径（从next_task获取）\"\n              },\n              maxContentLength: {\n                type: \"number\",\n                description: \"文件内容最大长度\",\n                default: 50000\n              }\n            },\n            required: [\"projectPath\", \"relativePath\"]\n          }\n        },\n        {\n          name: \"init_step3_generate_analysis\",\n          description: \"🧠 [新增链接层] 基于文件内容生成分析文档 - ⚠️ 前置条件：必须先调用get_file_content获取文件内容！✅ 严格用法：get_next_task→get_file_content→[此工具]→complete_task。🎯 解决AI不知道生成什么文档的问题！\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              projectPath: {\n                type: \"string\",\n                description: \"项目根目录路径\"\n              },\n              taskId: {\n                type: \"string\",\n                description: \"任务ID（从任务上下文自动获取，一般无需手动传入）\"\n              },\n              analysisContent: {\n                type: \"string\",\n                description: \"AI生成的分析文档内容（第二次调用时提供）\"\n              },\n              analysisStyle: {\n                type: \"string\",\n                description: \"分析风格: comprehensive | concise | technical\",\n                default: \"comprehensive\"\n              },\n              includeCodeExamples: {\n                type: \"boolean\",\n                description: \"是否包含代码示例\",\n                default: true\n              }\n            },\n            required: [\"projectPath\"]\n          }\n        },\n        {\n          name: \"init_step3_check_task_completion\",\n          description: \"🎯 [自动验证] 检查当前任务完成状态 - 系统自动验证文件生成并完成任务。支持分层验证策略：Step3文件夹检查、Step4模块文件夹检查、Step5/6固定文件检查。文件存在即自动完成，减少手动操作！\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              projectPath: {\n                type: \"string\",\n                description: \"项目根目录路径\"\n              },\n              taskId: {\n                type: \"string\",\n                description: \"任务ID（可选，系统可自动获取）\"\n              },\n              stepType: {\n                type: \"string\",\n                description: \"步骤类型，决定验证策略：step3|step4|step5|step6\",\n                enum: [\"step3\", \"step4\", \"step5\", \"step6\"],\n                default: \"step3\"\n              }\n            },\n            required: [\"projectPath\"]\n          }\n        },\n        {\n          name: \"init_step4_module_integration\",\n          description: \"Step4: 模块整合 - 使用统一任务管理器创建模块整合任务，AI完成后使用 init_step3_check_task_completion 自动验证\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              projectPath: {\n                type: \"string\",\n                description: \"项目根目录路径\"\n              }\n            },\n            required: [\"projectPath\"]\n          }\n        },\n        {\n          name: \"init_step5_module_relations\",\n          description: \"Step5: 模块关联分析 - 使用统一任务管理器创建关联分析任务，AI完成后使用 init_step3_check_task_completion 自动验证\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              projectPath: {\n                type: \"string\",\n                description: \"项目根目录路径\"\n              }\n            },\n            required: [\"projectPath\"]\n          }\n        },\n        {\n          name: \"init_step6_architecture_docs\",\n          description: \"Step6: 架构文档生成 - 使用统一任务管理器创建架构文档生成任务，AI完成后使用 init_step3_check_task_completion 自动验证（最终步骤）\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              projectPath: {\n                type: \"string\",\n                description: \"项目根目录路径\"\n              }\n            },\n            required: [\"projectPath\"]\n          }\n        },\n        {\n          name: \"get_init_status\",\n          description: \"获取当前Init流程的状态、进度和健康信息\",\n          inputSchema: {\n            type: \"object\",\n            properties: {},\n            required: []\n          }\n        },\n        {\n          name: \"reset_init\",\n          description: \"重置Init流程，清除所有缓存状态和临时文件\",\n          inputSchema: {\n            type: \"object\",\n            properties: {\n              projectPath: {\n                type: \"string\",\n                description: \"项目路径（可选），指定则只清理该项目的状态和临时文件，不指定则清理所有\",\n                default: null\n              }\n            },\n            required: []\n          }\n        }\n      ]\n    };\n  });\n\n  // 处理工具调用 - 完整的6步Init流程\n  server.setRequestHandler(CallToolRequestSchema, async (request) => {\n    const { name, arguments: args } = request.params;\n    \n    // 直接使用serviceBus获取服务实例（避免过度包装）\n    \n    // 全局状态管理 - 持久化到文件系统\n    const projectStates = new Map();\n    \n    // 新增：当前任务上下文管理器 - 解决AI调用断档问题\n    const currentTaskContexts = new Map(); // projectPath -> 当前活跃任务信息\n    \n    // 设置当前任务上下文\n    function setCurrentTaskContext(projectPath, taskContext) {\n      const normalizedPath = resolve(projectPath);\n      const contextData = {\n        ...taskContext,\n        updatedAt: new Date().toISOString()\n      };\n      \n      // 保存到内存\n      currentTaskContexts.set(normalizedPath, contextData);\n      \n      // 同时保存到文件系统进行持久化\n      try {\n        const tempDir = join(projectPath, 'mg_kiro', '.tmp');\n        if (!existsSync(tempDir)) {\n          mkdirSync(tempDir, { recursive: true });\n        }\n        \n        const contextFile = join(tempDir, 'current-task-context.json');\n        writeFileSync(contextFile, JSON.stringify(contextData, null, 2), 'utf8');\n        console.log(`[TaskContext] 设置并保存项目 ${normalizedPath} 的当前任务上下文: ${taskContext.taskId || taskContext.fileName || 'unknown'}`);\n      } catch (error) {\n        console.error(`[TaskContext] 保存任务上下文到文件失败: ${error.message}`);\n        console.error(`[TaskContext] 尝试的路径: ${join(projectPath, 'mg_kiro', '.tmp')}`);\n        // 即使文件保存失败，内存中的上下文依然可用\n      }\n    }\n    \n    // 获取当前任务上下文\n    function getCurrentTaskContext(projectPath) {\n      const normalizedPath = resolve(projectPath);\n      \n      // 首先尝试从内存获取\n      let context = currentTaskContexts.get(normalizedPath);\n      if (context) {\n        console.log(`[TaskContext] 从内存获取项目 ${normalizedPath} 的当前任务上下文: ${context.taskId || context.fileName || 'unknown'}`);\n        return context;\n      }\n      \n      // 如果内存中没有，尝试从文件系统恢复\n      try {\n        const contextFile = join(projectPath, 'mg_kiro', '.tmp', 'current-task-context.json');\n        if (existsSync(contextFile)) {\n          const fileContent = readFileSync(contextFile, 'utf8');\n          context = JSON.parse(fileContent);\n          \n          // 恢复到内存中\n          currentTaskContexts.set(normalizedPath, context);\n          console.log(`[TaskContext] 从文件恢复项目 ${normalizedPath} 的当前任务上下文: ${context.taskId || context.fileName || 'unknown'}`);\n          return context;\n        }\n      } catch (error) {\n        console.error(`[TaskContext] 从文件恢复任务上下文失败: ${error.message}`);\n        console.error(`[TaskContext] 尝试的路径: ${join(projectPath, 'mg_kiro', '.tmp', 'current-task-context.json')}`);\n      }\n      \n      console.log(`[TaskContext] 项目 ${normalizedPath} 没有找到任务上下文`);\n      return null;\n    }\n    \n    // 清除任务上下文\n    function clearCurrentTaskContext(projectPath) {\n      const normalizedPath = resolve(projectPath);\n      \n      // 从内存清除\n      currentTaskContexts.delete(normalizedPath);\n      \n      // 同时清除文件系统中的任务上下文\n      try {\n        const contextFile = join(projectPath, 'mg_kiro', '.tmp', 'current-task-context.json');\n        if (existsSync(contextFile)) {\n          unlinkSync(contextFile);\n        }\n      } catch (error) {\n        console.error(`[TaskContext] 删除任务上下文文件失败: ${error.message}`);\n      }\n      \n      console.log(`[TaskContext] 清除项目 ${normalizedPath} 的任务上下文`);\n    }\n    \n    // 状态文件路径\n    function getStateFilePath(projectPath) {\n      const docsDir = join(projectPath, 'mg_kiro');\n      if (!existsSync(docsDir)) {\n        mkdirSync(docsDir, { recursive: true });\n      }\n      return join(docsDir, 'init-state.json');\n    }\n    \n    // 加载项目状态\n    function loadProjectState(projectPath) {\n      const normalizedPath = resolve(projectPath);\n      const stateFile = getStateFilePath(normalizedPath);\n      \n      if (existsSync(stateFile)) {\n        try {\n          const stateData = readFileSync(stateFile, 'utf8');\n          return JSON.parse(stateData);\n        } catch (error) {\n          console.log(`[State] 状态文件损坏，创建新状态: ${error.message}`);\n        }\n      }\n      \n      return {\n        currentStep: 0,\n        projectPath: normalizedPath,\n        stepsCompleted: [],\n        stepResults: {},\n        startedAt: null,\n        error: null,\n        documentCount: 0,\n        generatedDocs: []\n      };\n    }\n    \n    // 保存项目状态\n    function saveProjectState(projectPath, state) {\n      const normalizedPath = resolve(projectPath);\n      const stateFile = getStateFilePath(normalizedPath);\n      \n      try {\n        writeFileSync(stateFile, JSON.stringify(state, null, 2));\n        console.log(`[State] 状态已保存: ${stateFile}`);\n      } catch (error) {\n        console.error(`[State] 保存状态失败: ${error.message}`);\n      }\n    }\n    \n    \n    // 更新并保存项目状态\n    function updateProjectState(projectPath, updates) {\n      const normalizedPath = resolve(projectPath);\n      const state = getProjectStateEnhanced(normalizedPath);\n      \n      Object.assign(state, updates);\n      projectStates.set(normalizedPath, state);\n      saveProjectState(normalizedPath, state);\n      \n      return state;\n    }\n    \n    // 确保mg_kiro文档目录存在\n    function ensureDocsDirectory(projectPath) {\n      const docsDir = join(projectPath, 'mg_kiro');\n      if (!existsSync(docsDir)) {\n        mkdirSync(docsDir, { recursive: true });\n      }\n      return docsDir;\n    }\n    \n    // ========== 增强的临时文件管理系统 ==========\n    \n    // 获取临时文件目录\n    function getTempDirectory(projectPath) {\n      const docsDir = ensureDocsDirectory(projectPath);\n      const tempDir = join(docsDir, '.tmp');\n      if (!existsSync(tempDir)) {\n        mkdirSync(tempDir, { recursive: true });\n      }\n      return tempDir;\n    }\n    \n    // 保存步骤结果到临时文件\n    function saveStepResult(projectPath, stepName, data) {\n      const tempDir = getTempDirectory(projectPath);\n      const stepFile = join(tempDir, `${stepName}-result.json`);\n      \n      try {\n        const stepData = {\n          stepName,\n          completedAt: new Date().toISOString(),\n          data\n        };\n        writeFileSync(stepFile, JSON.stringify(stepData, null, 2));\n        console.log(`[TempFile] Step结果已保存: ${stepFile}`);\n        return stepFile;\n      } catch (error) {\n        console.error(`[TempFile] 保存Step结果失败: ${error.message}`);\n        return null;\n      }\n    }\n    \n    \n    // 检查步骤是否已完成（通过临时文件验证）\n    function isStepCompleted(projectPath, stepName) {\n      const tempDir = getTempDirectory(projectPath);\n      const stepFile = join(tempDir, `${stepName}-result.json`);\n      return existsSync(stepFile);\n    }\n    \n    // 增强的状态验证函数\n    function validateStepPrerequisites(projectPath, targetStep) {\n      console.log(`[State] 验证Step${targetStep}的前置条件`);\n      \n      // 定义步骤依赖关系\n      const stepDependencies = {\n        1: [], // Step1无依赖\n        2: ['step1'], // Step2依赖Step1\n        3: ['step1', 'step2'], // Step3依赖Step1和Step2\n        4: ['step1', 'step2', 'step3'], // Step4依赖前面所有步骤\n        5: ['step1', 'step2', 'step3', 'step4'],\n        6: ['step1', 'step2', 'step3', 'step4', 'step5']\n      };\n      \n      const requiredSteps = stepDependencies[targetStep] || [];\n      \n      for (const requiredStep of requiredSteps) {\n        // 首先检查临时文件\n        if (isStepCompleted(projectPath, requiredStep)) {\n          console.log(`[State] ✅ ${requiredStep} 通过临时文件验证`);\n          continue;\n        }\n        \n        // 然后检查主状态文件\n        const state = loadProjectState(projectPath);\n        if (state.stepsCompleted && state.stepsCompleted.includes(requiredStep)) {\n          console.log(`[State] ✅ ${requiredStep} 通过主状态文件验证`);\n          continue;\n        }\n        \n        // 如果都没有找到，则前置条件不满足\n        console.log(`[State] ❌ ${requiredStep} 前置条件不满足`);\n        return {\n          valid: false,\n          missingStep: requiredStep,\n          error: `Step${targetStep}需要先完成${requiredStep.toUpperCase()}，请先执行相应的步骤`\n        };\n      }\n      \n      return { valid: true };\n    }\n    \n    // 清理临时文件\n    function cleanupTempFiles(projectPath, options = {}) {\n      const tempDir = getTempDirectory(projectPath);\n      const { keepRecent = 0, stepPattern = null } = options;\n      \n      try {\n        if (!existsSync(tempDir)) {\n          console.log(`[Cleanup] 临时目录不存在: ${tempDir}`);\n          return { cleaned: 0, kept: 0 };\n        }\n        \n        const files = readdirSync(tempDir).filter(file => {\n          return file.endsWith('-result.json') && \n                 (!stepPattern || file.includes(stepPattern));\n        });\n        \n        let cleaned = 0;\n        let kept = 0;\n        \n        if (keepRecent > 0) {\n          // 保留最近的文件\n          const filesToKeep = files.slice(-keepRecent);\n          const filesToDelete = files.slice(0, -keepRecent);\n          \n          for (const file of filesToDelete) {\n            rmSync(join(tempDir, file));\n            cleaned++;\n          }\n          kept = filesToKeep.length;\n        } else {\n          // 删除所有匹配的文件\n          for (const file of files) {\n            rmSync(join(tempDir, file));\n            cleaned++;\n          }\n        }\n        \n        console.log(`[Cleanup] 清理完成: 删除${cleaned}个文件，保留${kept}个文件`);\n        return { cleaned, kept };\n        \n      } catch (error) {\n        console.error(`[Cleanup] 清理临时文件失败: ${error.message}`);\n        return { cleaned: 0, kept: 0, error: error.message };\n      }\n    }\n    \n    // 增强的getProjectState - 优先从文件系统加载\n    function getProjectStateEnhanced(projectPath) {\n      const normalizedPath = resolve(projectPath);\n      \n      // 总是从文件重新加载最新状态，而不是依赖内存缓存\n      const fileState = loadProjectState(normalizedPath);\n      \n      // 更新内存缓存\n      projectStates.set(normalizedPath, fileState);\n      \n      return fileState;\n    }\n    \n    // 获取必要的服务实例\n    const projectOverviewGenerator = serviceBus.get('projectOverviewGenerator');\n    \n    const claudeCodeInit = {\n      getProgress: () => ({ percentage: 0, message: 'Ready' }),\n      reset: () => ({ success: true, message: 'State reset successfully' })\n    };\n\n    try {\n      switch (name) {\n        case \"init_step1_project_analysis\": {\n          const { projectPath, maxDepth, includeFiles, maxKeyFileSize } = args;\n          \n          if (!projectPath) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({ error: true, message: \"项目路径不能为空\", tool: name }, null, 2)\n              }]\n            };\n          }\n          \n          console.log(`[MCP-Init-Step1] 项目分析 - ${projectPath}`);\n          \n          // 重置并初始化状态\n          updateProjectState(projectPath, {\n            currentStep: 1,\n            startedAt: new Date().toISOString(),\n            stepsCompleted: [],\n            stepResults: {},\n            error: null,\n            documentCount: 0,\n            generatedDocs: []\n          });\n          \n          // 确保文档目录存在\n          const docsDir = ensureDocsDirectory(resolve(projectPath));\n          \n          // 生成项目概览包\n          const overviewResult = await projectOverviewGenerator.generateOverview(\n            resolve(projectPath),\n            {\n              maxDepth: maxDepth || 3,\n              includeFiles: includeFiles || [],\n              maxKeyFileSize: maxKeyFileSize || 50 * 1024\n            }\n          );\n          \n          // 存储Step1结果到临时文件（新增）\n          saveStepResult(projectPath, 'step1', {\n            projectOverview: overviewResult,\n            completedAt: new Date().toISOString(),\n            docsDirectory: docsDir\n          });\n          \n          // 存储Step1结果到主状态文件（保持兼容）\n          updateProjectState(projectPath, {\n            stepResults: {\n              step1: {\n                projectOverview: overviewResult,\n                completedAt: new Date().toISOString(),\n                docsDirectory: docsDir\n              }\n            },\n            stepsCompleted: ['step1']\n          });\n          \n          return {\n            content: [\n              {\n                type: \"text\",\n                text: JSON.stringify({\n                  currentStep: 1,\n                  stepName: 'project-analysis',\n                  projectPath: resolve(projectPath),\n                  docsDirectory: docsDir,\n                  \n                  // Step1输出摘要\n                  analysisResults: {\n                    projectName: overviewResult.projectMetadata?.name || 'Unknown',\n                    primaryLanguage: overviewResult.languageProfile?.primary || 'Unknown',\n                    totalFiles: overviewResult.projectMetadata?.totalFiles || 0,\n                    sourceCodeFiles: overviewResult.fileAnalysisInput?.fileList?.length || 0,\n                    architectureType: overviewResult.projectCharacteristics?.architecture || 'Unknown',\n                    complexity: overviewResult.projectCharacteristics?.complexity || 'Unknown'\n                  },\n                  \n                  // 为Step2 FileAnalysisModule提供的数据\n                  fileAnalysisInput: overviewResult.fileAnalysisInput || {\n                    fileList: [],\n                    projectMetadata: overviewResult.projectMetadata,\n                    languageProfile: overviewResult.languageProfile\n                  },\n                  \n                  // 下一步指导 - 更新为新的工作流程\n                  workflow: {\n                    current_step: \"1/6 - 项目分析\",\n                    status: \"completed\",\n                    next_steps: [{\n                      tool: \"init_step2_file_analysis\",\n                      description: \"使用FileAnalysisModule进行智能文件分析和批次规划\",\n                      suggested_params: {\n                        projectPath: resolve(projectPath)\n                      },\n                      why: \"项目基础分析已完成，现在需要FileAnalysisModule进行精确Token分析和智能批次分配\"\n                    }],\n                    progress: {\n                      completed: 1,\n                      total: 6,\n                      percentage: Math.round(1/6 * 100)\n                    }\n                  },\n                  \n                  // 结果\n                  success: true,\n                  message: \"Step1: 项目分析完成，基础数据包和架构文档已生成\"\n                }, null, 2)\n              }\n            ]\n          };\n        }\n        \n        case \"init_step2_create_todos\": {\n          const { projectPath, batchSize, includeAnalysisTasks = true, includeSummaryTasks = true } = args;\n          \n          if (!projectPath) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({ error: true, message: \"项目路径不能为空\", tool: name }, null, 2)\n              }]\n            };\n          }\n          \n          console.log(`[MCP-Init-Step2] 创建AI任务列表（新架构） - ${projectPath}`);\n          \n          // 使用增强的验证逻辑\n          const validation = validateStepPrerequisites(projectPath, 2);\n          if (!validation.valid) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({ error: true, message: validation.error, tool: name, step: 2 }, null, 2)\n              }]\n            };\n          }\n\n          // 检查服务可用性\n          const fileAnalysisModule = serviceBus.get('fileAnalysisModule');\n          const unifiedTaskManager = serviceBus.get('unifiedTaskManager');\n          if (!fileAnalysisModule) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: 'FileAnalysisModule 服务未找到',\n                  tool: name,\n                  step: 2\n                }, null, 2)\n              }]\n            };\n          }\n\n          if (!unifiedTaskManager) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: 'UnifiedTaskManager 服务未找到',\n                  tool: name,\n                  step: 2\n                }, null, 2)\n              }]\n            };\n          }\n\n          const initState = getProjectStateEnhanced(projectPath);\n          \n          // 更新当前步骤\n          updateProjectState(projectPath, { currentStep: 2 });\n\n          // 获取Step1的结果\n          const step1Results = initState.stepResults.step1.projectOverview;\n          \n          // 准备FileAnalysisModule所需的数据\n          const analysisInput = {\n            projectPath: resolve(projectPath),\n            fileList: step1Results.fileAnalysisInput?.fileList || [],\n            projectMetadata: step1Results.projectMetadata,\n            languageProfile: step1Results.languageProfile,\n            options: {\n              smallFileThreshold: 15000,\n              largeFileThreshold: 20000,\n              batchTargetSize: batchSize ? batchSize * 6000 : 18000, // 转换批次大小为token目标\n              includeAnalysisTasks,\n              includeSummaryTasks\n            }\n          };\n\n          try {\n            // 使用FileAnalysisModule进行智能分析\n            console.log(`[MCP-Init-Step2] FileAnalysisModule 分析开始:`, {\n              fileCount: analysisInput.fileList.length,\n              projectName: analysisInput.projectMetadata?.name,\n              language: analysisInput.languageProfile?.primary,\n              targetBatchSize: analysisInput.options.batchTargetSize\n            });\n\n            const analysisResult = await fileAnalysisModule.analyzeProject(\n              analysisInput.projectPath,\n              analysisInput.fileList,\n              {\n                projectMetadata: analysisInput.projectMetadata,\n                languageProfile: analysisInput.languageProfile,\n                options: analysisInput.options\n              }\n            );\n\n            // 解构分析结果 - 修复数据结构访问\n            const { data: analysisData } = analysisResult;\n            const { fileAnalyses, batchPlans, taskDefinitions, strategySummary } = analysisData || {};\n            \n            // 构建统计信息\n            const fileAnalysis = {\n                totalFiles: fileAnalyses?.length || 0,\n                analyzedFiles: fileAnalyses?.filter(f => !f.analysisError)?.length || 0\n            };\n            \n            const batchStrategy = {\n                totalBatches: (batchPlans?.combinedBatches?.length || 0) + \n                             (batchPlans?.singleBatches?.length || 0) + \n                             (batchPlans?.multiBatches?.length || 0)\n            };\n            \n            const taskManagement = {\n                totalTasks: taskDefinitions?.length || 0\n            };\n            \n            const tokenSummary = {\n                totalTokens: fileAnalyses?.reduce((sum, file) => {\n                    const tokens = file.tokenCount?.totalTokens || file.tokenCount?.safeTokenCount || file.tokenCount || 0;\n                    return sum + tokens;\n                }, 0) || 0\n            };\n            \n            // 使用UnifiedTaskManager创建批次任务\n            console.log(`[MCP-Init-Step2] 使用UnifiedTaskManager创建任务...`);\n            \n            const batchResults = await unifiedTaskManager.createBatchTasks(\n              taskManagement?.batches || [], \n              resolve(projectPath),\n              'step3'\n            );\n\n            console.log(`[MCP-Init-Step2] 任务创建完成:`, {\n              success: batchResults.success,\n              taskCount: batchResults.count || 0,\n              totalBatches: batchStrategy?.totalBatches || 0\n            });\n\n            // 存储Step2结果\n            const step2Results = {\n              analysisResult,\n              batchResults,\n              fileAnalysisInput: analysisInput,\n              completedAt: new Date().toISOString(),\n              // 兼容性字段\n              todoList: {\n                totalTasks: batchResults.count || 0,\n                batchTasks: batchResults.tasks || []\n              }\n            };\n\n            // 存储到临时文件和主状态\n            saveStepResult(projectPath, 'step2', step2Results);\n            updateProjectState(projectPath, {\n              stepResults: {\n                ...initState.stepResults,\n                step2: step2Results\n              },\n              stepsCompleted: [...initState.stepsCompleted, 'step2']\n            });\n\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  currentStep: 2,\n                  stepName: 'create-todo-with-new-architecture',\n                  \n                  // 新架构输出摘要\n                  todoCreationResults: {\n                    totalTasks: batchResults.count || 0,\n                    totalFiles: fileAnalysis?.totalFiles || 0,\n                    analyzedFiles: fileAnalysis?.analyzedFiles || 0,\n                    totalBatches: batchStrategy?.totalBatches || 0,\n                    totalTokens: tokenSummary?.totalTokens || 0,\n                    estimatedTime: taskManagement?.estimatedTime || '30-60分钟'\n                  },\n                  \n                  // 下一步指导\n                  workflow: {\n                    current_step: \"2/6 - AI任务创建（新架构）\",\n                    status: \"completed\",\n                    architecture: \"FileAnalysisModule + UnifiedTaskManager\",\n                    next_steps: [{\n                      tool: \"init_step3_get_next_task\",\n                      description: \"开始智能批次文件处理循环，基于FileAnalysisModule的精确分析结果\",\n                      suggested_params: {\n                        projectPath: resolve(projectPath)\n                      },\n                      why: \"智能任务批次已创建，现在可以开始精确的文件处理流程\"\n                    }],\n                    progress: {\n                      completed: 2,\n                      total: 6,\n                      percentage: Math.round(2/6 * 100)\n                    }\n                  },\n                  \n                  success: true,\n                  message: \"Step2: 智能任务列表创建完成（新架构），可以开始文档生成\"\n                }, null, 2)\n              }]\n            };\n\n          } catch (error) {\n            console.error('[MCP-Init-Step2] 新架构任务创建失败:', error);\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: `新架构任务创建失败: ${error.message}`,\n                  tool: name,\n                  step: 2,\n                  architecture: \"FileAnalysisModule + UnifiedTaskManager\",\n                  suggestion: \"请检查FileAnalysisModule和UnifiedTaskManager服务状态\"\n                }, null, 2)\n              }]\n            };\n          }\n        }\n\n        case \"init_step2_file_analysis\": {\n          const { projectPath } = args;\n          \n          if (!projectPath) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({ error: true, message: \"项目路径不能为空\", tool: name }, null, 2)\n              }]\n            };\n          }\n          \n          console.log(`[MCP-Init-Step2] FileAnalysisModule 文件分析 - ${projectPath}`);\n          \n          // 验证 Step1 是否完成\n          const validation = validateStepPrerequisites(projectPath, 2);\n          if (!validation.valid) {\n            return {\n              content: [{\n                type: \"text\", \n                text: JSON.stringify({ error: true, message: validation.error, tool: name, step: 2 }, null, 2)\n              }]\n            };\n          }\n\n          // 更新当前步骤\n          updateProjectState(projectPath, { currentStep: 2 });\n          \n          // 获取Step1的结果\n          const initState = getProjectStateEnhanced(projectPath);\n          const step1Results = initState.stepResults.step1.projectOverview;\n          \n          // 准备FileAnalysisModule所需的数据\n          const analysisInput = {\n            projectPath: resolve(projectPath),\n            fileList: step1Results.fileAnalysisInput?.fileList || [],\n            projectMetadata: {\n              ...step1Results.projectMetadata,\n              languageProfile: step1Results.languageProfile\n            },\n            options: {\n              smallFileThreshold: 15000,\n              largeFileThreshold: 20000,\n              batchTargetSize: 18000\n            }\n          };\n\n          // 检查服务可用性\n          const fileAnalysisModule = serviceBus.get('fileAnalysisModule');\n          if (!fileAnalysisModule) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: 'FileAnalysisModule 服务未找到',\n                  tool: name,\n                  step: 2\n                }, null, 2)\n              }]\n            };\n          }\n\n          try {\n            // 使用真实的 FileAnalysisModule 进行分析\n            console.log(`[MCP-Init-Step2] FileAnalysisModule 分析开始:`, {\n              fileCount: analysisInput.fileList.length,\n              projectName: analysisInput.projectMetadata?.name,\n              language: analysisInput.languageProfile?.primary\n            });\n\n            // 调用 FileAnalysisModule 进行智能分析和批次规划\n            const analysisResult = await fileAnalysisModule.analyzeProject(\n              analysisInput.projectPath,\n              analysisInput.fileList,\n              analysisInput.projectMetadata,\n              analysisInput.options\n            );\n\n            // 解构分析结果 - 修复数据结构访问\n            const { data: analysisData } = analysisResult;\n            const { fileAnalyses, batchPlans, taskDefinitions, strategySummary } = analysisData || {};\n            \n            // 构建统计信息\n            const fileAnalysis = {\n                totalFiles: fileAnalyses?.length || 0,\n                analyzedFiles: fileAnalyses?.filter(f => !f.analysisError)?.length || 0\n            };\n            \n            const batchStrategy = {\n                totalBatches: (batchPlans?.combinedBatches?.length || 0) + \n                             (batchPlans?.singleBatches?.length || 0) + \n                             (batchPlans?.multiBatches?.length || 0)\n            };\n            \n            const taskManagement = {\n                totalTasks: taskDefinitions?.length || 0\n            };\n            \n            const tokenSummary = {\n                totalTokens: fileAnalyses?.reduce((sum, file) => {\n                    const tokens = file.tokenCount?.totalTokens || file.tokenCount?.safeTokenCount || file.tokenCount || 0;\n                    return sum + tokens;\n                }, 0) || 0\n            };\n            \n            console.log(`[MCP-Init-Step2] FileAnalysisModule 分析完成:`, {\n              success: analysisResult.success,\n              totalFiles: fileAnalysis?.totalFiles || 0,\n              totalBatches: batchStrategy?.totalBatches || 0,\n              totalTasks: taskManagement?.totalTasks || 0\n            });\n\n            // 存储Step2结果\n            saveStepResult(projectPath, 'step2', {\n              analysisResult,\n              fileAnalysisInput: analysisInput,\n              completedAt: new Date().toISOString()\n            });\n            \n            // 更新项目状态\n            updateProjectState(projectPath, {\n              stepResults: {\n                ...initState.stepResults,\n                step2: {\n                  analysisResult,\n                  fileAnalysisInput: analysisInput,\n                  completedAt: new Date().toISOString()\n                }\n              },\n              stepsCompleted: [...initState.stepsCompleted, 'step2']\n            });\n\n            return {\n              content: [\n                {\n                  type: \"text\",\n                  text: JSON.stringify({\n                    currentStep: 2,\n                    stepName: 'file-analysis',\n                    projectPath: resolve(projectPath),\n                    \n                    // 分析结果摘要\n                    analysisResults: {\n                      totalFiles: fileAnalysis?.totalFiles || 0,\n                      analyzedFiles: fileAnalysis?.analyzedFiles || 0,\n                      totalTokens: tokenSummary?.totalTokens || 0,\n                      totalBatches: batchStrategy?.totalBatches || 0,\n                      totalTasks: taskManagement?.totalTasks || 0\n                    },\n                    \n                    // 下一步指导\n                    workflow: {\n                      current_step: \"2/6 - 文件分析模块\",\n                      status: \"completed\", \n                      next_steps: [{\n                        tool: \"init_step3_get_next_task\",\n                        description: \"开始Step3文件文档生成循环，基于FileAnalysisModule的智能批次计划\",\n                        suggested_params: {\n                          projectPath: resolve(projectPath)\n                        },\n                        why: \"FileAnalysisModule已完成智能文件分析和批次规划，现在可以开始精确的文件处理流程\"\n                      }],\n                      progress: {\n                        completed: 2,\n                        total: 6,\n                        percentage: Math.round(2/6 * 100)\n                      }\n                    },\n                    \n                    success: true,\n                    message: \"Step2: FileAnalysisModule分析完成，智能批次计划已生成\"\n                  }, null, 2)\n                }\n              ]\n            };\n\n          } catch (error) {\n            console.error('[MCP-Init-Step2] FileAnalysisModule分析失败:', error);\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: `FileAnalysisModule分析失败: ${error.message}`,\n                  tool: name,\n                  step: 2\n                }, null, 2)\n              }]\n            };\n          }\n        }\n        \n        case \"init_step3_get_next_task\": {\n          const { projectPath } = args;\n          \n          if (!projectPath) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({ error: true, message: \"项目路径不能为空\", tool: name }, null, 2)\n              }]\n            };\n          }\n          \n          console.log(`[MCP-Init-Step3] 获取下一个文件任务（新架构） - ${projectPath}`);\n          \n          // 使用增强的验证逻辑\n          const validation = validateStepPrerequisites(projectPath, 3);\n          if (!validation.valid) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({ error: true, message: validation.error, tool: name }, null, 2)\n              }]\n            };\n          }\n          \n          const initState = getProjectStateEnhanced(projectPath);\n          \n          initState.currentStep = 3;\n          \n          // 检查服务可用性\n          const unifiedTaskManager = serviceBus.get('unifiedTaskManager');\n          if (!unifiedTaskManager) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: 'UnifiedTaskManager 服务未找到',\n                  tool: name,\n                  step: 3\n                }, null, 2)\n              }]\n            };\n          }\n\n          try {\n            // ✅ 修复：在获取任务前，先检查并加载taskDefinitions\n            const taskStatus = await unifiedTaskManager.getTaskStatus();\n            if (taskStatus.success && taskStatus.overview.currentTasks.length === 0) {\n              // UnifiedTaskManager中没有任务，需要从init-state.json加载taskDefinitions\n              console.log('[MCP-Init-Step3] 检测到UnifiedTaskManager无任务，正在从Step2结果加载...');\n              \n              if (initState.stepResults?.step2?.analysisResult?.data?.taskDefinitions) {\n                const taskDefinitions = initState.stepResults.step2.analysisResult.data.taskDefinitions;\n                console.log(`[MCP-Init-Step3] 找到${taskDefinitions.length}个任务定义，正在创建任务...`);\n                \n                // 批量创建任务到UnifiedTaskManager\n                const batchResult = await unifiedTaskManager.createBatchTasks(taskDefinitions, resolve(projectPath), 'step3');\n                console.log(`[MCP-Init-Step3] 成功创建${batchResult.count}个任务`);\n              } else {\n                console.warn('[MCP-Init-Step3] Step2结果中未找到taskDefinitions');\n              }\n            }\n            \n            // 使用UnifiedTaskManager获取下一个任务\n            const nextTask = await unifiedTaskManager.getNextTask(resolve(projectPath), 'step3');\n            \n            if (!nextTask) {\n              // 没有更多任务，Step3完成\n            // 所有文件处理任务完成，准备进入Step4\n            initState.stepsCompleted.push('step3');\n            \n            return {\n              content: [\n                {\n                  type: \"text\",\n                  text: JSON.stringify({\n                    currentStep: 3,\n                    stepName: 'file-documentation',\n                    status: \"all_completed\",\n                    \n                    // Step3完成摘要\n                    completionResults: {\n                      totalFilesProcessed: initState.documentCount || 0,\n                      docsGenerated: initState.generatedDocs?.length || 0,\n                      processingTime: \"已完成\"\n                    },\n                    \n                    // 下一步指导\n                    workflow: {\n                      current_step: \"3/6 - 文件文档生成（已完成）\",\n                      status: \"completed\",\n                      next_steps: [{\n                        tool: \"init_step4_module_integration\",\n                        description: \"基于文件文档进行模块化整合\",\n                        suggested_params: {\n                          projectPath: resolve(projectPath)\n                        },\n                        why: \"文件文档已全部生成，现在需要进行模块整合\"\n                      }],\n                      progress: {\n                        completed: 3,\n                        total: 6,\n                        percentage: Math.round(3/6 * 100)\n                      }\n                    },\n                    \n                    success: true,\n                    message: \"Step3: 所有文件文档生成完成，可以进入模块整合阶段\"\n                  }, null, 2)\n                }\n              ]\n            };\n          }\n          \n            // 获取任务统计信息\n            const taskStats = await unifiedTaskManager.getStepStatistics('step3');\n            \n            // ✅ 设置增强的任务上下文，包含预分析数据\n            const taskMetadata = nextTask.metadata || {};\n            \n            // ✅ 修复批次任务路径问题 - 正确从metadata中提取\n            let relativePath, fileName;\n            if (taskMetadata.type === 'file_batch' && taskMetadata.files && taskMetadata.files.length > 0) {\n              // 对于批次任务，使用第一个文件作为主要路径\n              relativePath = taskMetadata.files[0];\n              fileName = path.basename(relativePath);\n              console.log(`[Fix] 批次任务 ${nextTask.id} 使用第一个文件: ${relativePath}`);\n            } else {\n              // 对于单文件任务，使用原有逻辑\n              relativePath = taskMetadata.relativePath || nextTask.relativePath || 'unknown';\n              fileName = taskMetadata.fileName || path.basename(relativePath);\n            }\n            \n            const contextData = {\n              taskId: nextTask.id,\n              relativePath: relativePath,\n              fileName: fileName,\n              fileSize: taskMetadata.fileSize || 0,\n              priority: taskMetadata.priority || 0,\n              estimatedTime: taskMetadata.estimatedTime || '未知',\n              title: `处理文件: ${fileName}`,\n              description: taskMetadata.type === 'file_batch' ? \n                `批次任务: 处理${taskMetadata.files?.length || 0}个文件` : \n                (taskMetadata.description || '文件内容分析和文档生成'),\n              step: 'get_next_task_completed',\n              // ✅ 新增: 传递完整的元数据（包括预分析数据）\n              metadata: {\n                ...taskMetadata,\n                // 确保关键预分析数据存在\n                chunkingAdvice: taskMetadata.chunkingAdvice,\n                estimatedFileTokens: taskMetadata.estimatedFileTokens || taskMetadata.estimatedTokens,\n                language: taskMetadata.language,\n                strategy: taskMetadata.strategy,\n                allFiles: taskMetadata.allFiles || taskMetadata.files // 用于多文件批次\n              }\n            };\n            \n            setCurrentTaskContext(projectPath, contextData);\n            \n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  currentStep: 3,\n                  stepName: 'file-documentation',\n                  status: \"task_available\",\n                  \n                  // 当前任务信息（新架构格式）\n                  currentTask: {\n                    taskId: nextTask.id,\n                    filePath: relativePath, // 使用修复后的relativePath\n                    fileName: contextData.fileName,\n                    fileSize: contextData.fileSize,\n                    priority: contextData.priority,\n                    estimatedTime: contextData.estimatedTime,\n                    title: contextData.title,\n                    description: contextData.description,\n                    stepType: nextTask.stepType,\n                    status: nextTask.status,\n                    // ✅ 新增：批次任务信息\n                    batchInfo: taskMetadata.type === 'file_batch' ? {\n                      type: 'file_batch',\n                      strategy: taskMetadata.strategy,\n                      totalFiles: taskMetadata.files?.length || 0,\n                      allFiles: taskMetadata.files || []\n                    } : null\n                  },\n                  \n                  // 进度信息（来自UnifiedTaskManager统计）\n                  progress: {\n                    completed: taskStats.statistics?.completed || 0,\n                    total: taskStats.statistics?.total || 0,\n                    remaining: (taskStats.statistics?.total || 0) - (taskStats.statistics?.completed || 0),\n                    percentage: taskStats.statistics?.total > 0 ? \n                      Math.round((taskStats.statistics?.completed || 0) / taskStats.statistics.total * 100) : 0\n                  },\n                  \n                  // 工作流指导\n                  workflow: {\n                    current_step: \"3/6 - 文件文档生成（进行中）\",\n                    status: \"in_progress\",\n                    next_steps: [{\n                      tool: \"init_step3_get_file_content\",\n                      description: \"获取文件内容进行文档生成\",\n                      suggested_params: {\n                        projectPath: resolve(projectPath)\n                      },\n                      why: \"任务已准备就绪，可以获取文件内容\"\n                    }],\n                    progress: {\n                      completed: 3,\n                      total: 6,\n                      percentage: 50\n                    }\n                  },\n                  \n                  // 状态可视化\n                  workflow_status: {\n                    current_step: 3,\n                    step_name: \"文件处理循环\",\n                    progress: `处理 ${nextTask.id} (${(taskStats.statistics?.completed || 0) + 1}/${taskStats.statistics?.total || 0})`,\n                    allowed_next_tools: [\"init_step3_get_file_content\"],\n                    forbidden_tools: [\"init_step3_complete_task\", \"init_step4_module_integration\"],\n                    ai_context: \"✅ 系统已进入step3，任务上下文已设置\",\n                    ai_instruction: \"🎯 下一步：调用 init_step3_get_file_content\",\n                    current_task_ready: true\n                  },\n                  \n                  success: true,\n                  message: \"Step3: 获取到下一个文件处理任务\"\n                }, null, 2)\n              }]\n            };\n            \n          } catch (error) {\n            console.error('[Step3] 获取任务失败:', error.message);\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: `获取任务失败: ${error.message}`,\n                  tool: name,\n                  step: 3\n                }, null, 2)\n              }]\n            };\n          }\n        }\n        \n        case \"init_step3_get_file_content\": {\n          // 智能参数补全 - 支持自动从上下文获取任务信息\n          let { projectPath, taskId, relativePath} = args;\n          \n          if (!projectPath) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({ error: true, message: \"项目路径不能为空\", tool: name }, null, 2)\n              }]\n            };\n          }\n          \n          // 智能参数补全：从任务上下文自动获取缺失的参数\n          const taskContext = getCurrentTaskContext(projectPath);\n          \n          if (!taskId && taskContext) {\n            taskId = taskContext.taskId;\n            console.log(`[Auto-Param] 从上下文自动获取 taskId: ${taskId}`);\n          }\n          \n          if (!relativePath && taskContext) {\n            relativePath = taskContext.relativePath;\n            console.log(`[Auto-Param] 从上下文自动获取 relativePath: ${relativePath}`);\n          }\n          \n          // 容错处理：如果还是缺少关键参数，尝试智能恢复\n          if (!taskId || !relativePath) {\n            if (taskContext) {\n              console.log(`[Auto-Recovery] 任务上下文存在但参数不完整，尝试恢复...`);\n              return {\n                content: [{\n                  type: \"text\",\n                  text: JSON.stringify({ \n                    error: true, \n                    message: `参数不完整，上下文信息: taskId=${taskContext.taskId}, relativePath=${taskContext.relativePath}`, \n                    autoRecovery: {\n                      suggestion: \"请先调用 init_step3_get_next_task 获取新任务，或提供 taskId 和 relativePath 参数\",\n                      contextAvailable: true,\n                      contextData: taskContext\n                    },\n                    tool: name \n                  }, null, 2)\n                }]\n              };\n            } else {\n              return {\n                content: [{\n                  type: \"text\",\n                  text: JSON.stringify({ \n                    error: true, \n                    message: \"缺少任务上下文，请先调用 init_step3_get_next_task 获取任务\", \n                    autoRecovery: {\n                      suggestion: \"调用 init_step3_get_next_task 获取下一个文件任务\",\n                      contextAvailable: false\n                    },\n                    tool: name \n                  }, null, 2)\n                }]\n              };\n            }\n          }\n          \n          console.log(`[MCP-Init-Step3] 获取文件内容 - ${projectPath} 任务:${taskId} 文件:${relativePath}`);\n          \n          // 调试：检查文件大小，确保分片逻辑会被触发\n          try {\n            const fs = await import('fs');\n            const fullFilePath = resolve(projectPath, relativePath);\n            const quickStats = fs.statSync(fullFilePath);\n            console.log(`[Debug] 文件 ${relativePath} 大小: ${quickStats.size} 字节`);\n            \n            if (quickStats.size > 25000) {\n              console.log(`[Debug] 大文件检测，强制启用超小分片模式`);\n            }\n          } catch (debugError) {\n            console.log(`[Debug] 无法获取文件统计信息: ${debugError.message}`);\n          }\n          \n          try {\n            // 使用fileQueryService的智能分片功能\n            const fileQueryService = serviceBus.get('fileQueryService');\n            \n            // ✅ 智能分片处理，优先使用预分析数据\n            const taskContext = getCurrentTaskContext(projectPath);\n            const taskMetadata = taskContext?.metadata || {};\n            \n            let processingOptions = {\n              maxContentLength: 6000,\n              includeTrimming: true,\n              includeAnalysis: false,\n              enableChunking: true,\n              maxTokensPerChunk: 1500\n            };\n            \n            // ✅ 智能联动：优先使用FileAnalysisModule的预分析结果\n            if (taskMetadata.chunkingAdvice && taskMetadata.estimatedFileTokens) {\n              const chunkingAdvice = taskMetadata.chunkingAdvice;\n              const preAnalysisTokens = taskMetadata.estimatedFileTokens;\n              const fileSize = taskMetadata.fileSize || 0;\n              \n              console.log(`[✅ Smart-Chunk] 使用预分析数据: ${relativePath}`);\n              console.log(`[✅ Smart-Chunk] 预估Token: ${preAnalysisTokens}, 文件大小: ${fileSize}字节`);\n              \n              // 使用预分析的分片建议\n              processingOptions = {\n                ...processingOptions,\n                enableChunking: chunkingAdvice.recommended,\n                maxTokensPerChunk: chunkingAdvice.maxTokensPerChunk || 1500,\n                maxContentLength: Math.min(8000, chunkingAdvice.maxTokensPerChunk * 4 || 6000),\n                // ✅ 新增: 传递预分析数据\n                preAnalysisData: {\n                  estimatedTokens: preAnalysisTokens,\n                  fileSize: fileSize,\n                  chunkingAdvice: chunkingAdvice,\n                  strategy: taskMetadata.strategy,\n                  language: taskMetadata.language\n                }\n              };\n              \n              console.log(`[✅ Smart-Chunk] 使用智能分片: 启用=${processingOptions.enableChunking}, 每片Token=${processingOptions.maxTokensPerChunk}`);\n              \n            } else {\n              // ☔ 降级到传统文件大小检测（用于向后兼容）\n              console.log(`[☔ Fallback-Chunk] 无预分析数据，降级到文件大小检测: ${relativePath}`);\n              \n              try {\n                const fs = await import('fs');\n                const fullFilePath = resolve(projectPath, relativePath);\n                const fileStats = fs.statSync(fullFilePath);\n                \n                console.log(`[☔ Fallback-Chunk] 检测文件 ${relativePath} 大小: ${fileStats.size}字节`);\n                \n                if (fileStats.size > 20000) {\n                  processingOptions.maxTokensPerChunk = 1200;\n                  processingOptions.maxContentLength = 4800;\n                  console.log(`[☔ Fallback-Chunk] 大文件超小分片: ${processingOptions.maxTokensPerChunk} tokens/片`);\n                } else if (fileStats.size > 10000) {\n                  processingOptions.maxTokensPerChunk = 1500;\n                  processingOptions.maxContentLength = 6000;\n                  console.log(`[☔ Fallback-Chunk] 中等文件小分片: ${processingOptions.maxTokensPerChunk} tokens/片`);\n                } else {\n                  processingOptions.maxContentLength = 8000;\n                  processingOptions.enableChunking = false;\n                  console.log(`[☔ Fallback-Chunk] 小文件直接处理，限制8000字符`);\n                }\n              } catch (statsError) {\n                processingOptions.maxTokensPerChunk = 1200;\n                processingOptions.maxContentLength = 4800;\n                console.log(`[☔ Fallback-Chunk] 无法检测文件，使用保守设置: ${statsError.message}`);\n              }\n            }\n            \n            // 使用fileQueryService获取文件详情\n            const fileDetails = await fileQueryService.getFileDetails(\n              resolve(projectPath), \n              relativePath, \n              processingOptions\n            );\n            \n            const fileName = fileDetails.file.name;\n            const fileExtension = fileDetails.file.extension.replace('.', '');\n            const fileContent = fileDetails.content;\n            const docsDir = ensureDocsDirectory(resolve(projectPath));\n            const filesDir = join(docsDir, 'files');\n            if (!fs.existsSync(filesDir)) {\n              fs.mkdirSync(filesDir, { recursive: true });\n            }\n            \n            // 更新任务上下文状态\n            if (taskContext) {\n              setCurrentTaskContext(projectPath, {\n                ...taskContext,\n                step: 'get_file_content_completed',\n                content: fileContent.slice(0, 200) + '...' // 保存内容预览\n              });\n            }\n            \n            // 超精简响应结构 - 只返回核心内容，减少token消耗\n            let responseData = {\n              currentStep: 3,\n              stepName: 'file-documentation',\n              status: fileDetails.chunking ? \"chunked_content_ready\" : \"content_ready\",\n              fileContent: {\n                taskId: taskId,\n                fileName: fileName,\n                content: fileContent,\n                language: fileExtension\n              },\n              success: true,\n              \n              // 🎯 AI状态可视化 - 文件内容已获取，现在需要生成分析文档\n              workflow_status: {\n                current_step: 3,\n                step_name: \"文件处理循环\", \n                progress: `已获取${fileName}内容，准备生成分析`,\n                allowed_next_tools: [\"init_step3_generate_analysis\"],\n                forbidden_tools: [\"init_step3_get_next_task\", \"init_step3_complete_task\", \"init_step4_module_integration\"],\n                \n                // 🧠 AI认知提示\n                ai_context: \"✅ 文件内容已获取，任务上下文已更新，现在必须调用generate_analysis生成分析文档\",\n                ai_instruction: `🎯 下一步：调用 init_step3_generate_analysis 基于文件内容生成分析文档`,\n                content_ready: true\n              }\n            };\n\n            // 只在分片模式下添加必要的分片信息\n            if (fileDetails.chunking) {\n              responseData.chunking = {\n                currentChunk: fileDetails.chunking.currentChunk || 1,\n                totalChunks: fileDetails.chunking.totalChunks\n              };\n              \n              // 只在多分片时添加导航提示\n              if (fileDetails.chunking.totalChunks > 1) {\n                responseData.chunking.hasMore = true;\n              }\n            }\n\n            // 激进截断策略 - 确保绝对不会超过MCP限制\n            const contentSize = fileContent.length;\n            const maxSafeContentSize = 10000; // 10KB绝对安全限制\n            \n            console.log(`[MCP-SafeCheck] 内容大小: ${contentSize}字符`);\n            \n            if (contentSize > maxSafeContentSize) {\n              console.log(`[MCP-SafeCheck] 内容超过安全限制，强制截断到${maxSafeContentSize}字符`);\n              \n              responseData.fileContent.content = fileContent.slice(0, maxSafeContentSize);\n              responseData.fileContent.truncated = {\n                original: contentSize,\n                shown: maxSafeContentSize,\n                reason: 'MCP安全限制',\n                note: '使用chunkIndex参数获取其他部分'\n              };\n              responseData.status = 'content_safe_truncated';\n            }\n            \n            // 最终安全检查 - 确保整个响应结构也不会过大\n            const finalCheckJson = JSON.stringify(responseData);\n            const finalTokens = finalCheckJson.length * 0.25;\n            console.log(`[MCP-FinalCheck] 最终响应大小: ${finalCheckJson.length}字符, ~${Math.round(finalTokens)} tokens`);\n            \n            if (finalTokens > 20000) {\n              console.log(`[MCP-FinalCheck] 最终响应仍然过大，进行二次截断`);\n              const currentContent = responseData.fileContent.content;\n              const emergencyLimit = Math.max(5000, 15000 - (finalCheckJson.length - currentContent.length));\n              \n              responseData.fileContent.content = currentContent.slice(0, emergencyLimit);\n              responseData.fileContent.emergencyTruncation = true;\n              responseData.status = 'emergency_truncated';\n            }\n\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify(responseData, null, 2)\n              }]\n            };\n          } catch (error) {\n            console.error(`[Smart-Processing] 智能文件处理失败: ${error.message}`);\n            \n            // 如果智能处理失败，尝试降级到基本处理\n            try {\n              console.log(`[Smart-Processing] 尝试基本文件读取作为备选方案...`);\n              const fs = await import('fs');\n              const fullFilePath = resolve(projectPath, relativePath);\n              \n              if (!fs.existsSync(fullFilePath)) {\n                return {\n                  content: [{\n                    type: \"text\",\n                    text: JSON.stringify({ \n                      error: true, \n                      message: `文件不存在: ${relativePath}`, \n                      tool: name, \n                      step: 3 \n                    }, null, 2)\n                  }]\n                };\n              }\n              \n              let basicContent = fs.readFileSync(fullFilePath, 'utf8');\n              const fileName = relativePath.split('/').pop();\n              const originalLength = basicContent.length;\n              \n              // Fallback模式也需要MCP token限制检查\n              let fallbackData = {\n                currentStep: 3,\n                stepName: 'file-documentation',\n                status: \"content_ready_fallback\",\n                fileContent: {\n                  taskId: taskId,\n                  relativePath: relativePath,\n                  fileName: fileName,\n                  content: basicContent,\n                  language: fileName.includes('.') ? fileName.split('.').pop() : '',\n                  size: fs.statSync(fullFilePath).size,\n                  lines: basicContent.split('\\n').length,\n                  processing: {\n                    fallbackMode: true,\n                    reason: \"智能处理失败，使用基本读取\",\n                    originalError: error.message\n                  }\n                },\n                aiInstructions: {\n                  task: \"为这个文件生成详细的技术文档（基本模式）\",\n                  format: \"Markdown格式\",\n                  outputFile: `mg_kiro/files/${fileName}.md`\n                },\n                success: true,\n                message: `Step3: 文件 ${relativePath} 基本处理完成（智能处理失败后的备选方案）`,\n                warning: `智能处理失败: ${error.message}，已降级到基本处理模式`\n              };\n\n              // 检查fallback模式的token限制\n              const fallbackJson = JSON.stringify(fallbackData, null, 2);\n              const fallbackTokens = fallbackJson.length * 0.25;\n              \n              if (fallbackTokens > 22000) {\n                console.log(`[MCP-Fix-Fallback] 基本处理响应过大(${Math.round(fallbackTokens)} tokens)，进行内容截断`);\n                \n                const maxContentLength = Math.max(8000, 15000 - (fallbackJson.length - basicContent.length) * 0.25);\n                const truncatedContent = basicContent.slice(0, maxContentLength);\n                \n                fallbackData.fileContent.content = truncatedContent;\n                fallbackData.fileContent.contentTruncated = {\n                  originalLength: originalLength,\n                  truncatedLength: truncatedContent.length,\n                  compressionRatio: Math.round((truncatedContent.length / originalLength) * 100) + '%',\n                  reason: 'MCP token限制，基本模式内容已截断'\n                };\n                \n                fallbackData.status = \"content_ready_fallback_truncated\";\n                fallbackData.message = fallbackData.message + '（内容已截断避免MCP限制）';\n              }\n              \n              return {\n                content: [{\n                  type: \"text\",\n                  text: JSON.stringify(fallbackData, null, 2)\n                }]\n              };\n              \n            } catch (fallbackError) {\n              return {\n                content: [{\n                  type: \"text\",\n                  text: JSON.stringify({ \n                    error: true, \n                    message: `文件处理完全失败: 智能处理错误 - ${error.message}; 基本处理错误 - ${fallbackError.message}`, \n                    tool: name,\n                    autoRecovery: {\n                      suggestion: \"请检查文件路径是否正确，文件是否可读，或尝试重新获取任务\",\n                      file: relativePath,\n                      projectPath: projectPath,\n                      smartProcessingError: error.message,\n                      basicProcessingError: fallbackError.message\n                    }\n                  }, null, 2)\n                }]\n              };\n            }\n          }\n        }\n        \n        case \"init_step3_generate_analysis\": {\n          // 🧠 新增：文档生成链接层 - 提供模板指导AI生成标准化分析文档\n          let { projectPath, taskId, analysisContent, analysisStyle, includeCodeExamples } = args;\n          \n          if (!projectPath) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({ error: true, message: \"项目路径不能为空\", tool: name }, null, 2)\n              }]\n            };\n          }\n          \n          // 自动参数补全：从上下文获取taskId和文件信息\n          const taskContext = getCurrentTaskContext(projectPath);\n          if (!taskId && taskContext) {\n            taskId = taskContext.taskId;\n            console.log(`[Auto-Param] 从上下文自动获取 taskId: ${taskId}`);\n          }\n          \n          if (!taskId) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({ \n                  error: true, \n                  message: \"任务ID不能为空。请先调用get_file_content获取任务上下文\", \n                  contextAvailable: !!taskContext,\n                  tool: name \n                }, null, 2)\n              }]\n            };\n          }\n          \n          // 🎯 双重模式：如果AI没有提供内容，则提供模板指导；如果提供了内容，则保存\n          if (!analysisContent || analysisContent.trim().length === 0) {\n            // 模式1：提供模板和指导，让AI生成文档\n            try {\n              const templatePath = join(__dirname, 'prompts/modes/init/file-documentation/file-analysis.md');\n              const template = readFileSync(templatePath, 'utf-8');\n              \n              const fileName = taskContext?.fileName || '未知文件';\n              const fileContent = taskContext?.content || '';\n              const fileSize = fileContent.length;\n              const lineCount = fileContent.split('\\n').length;\n              \n              // 新增：计算期望的文件路径和名称\n              const batchStrategy = taskContext?.batchStrategy || 'Unknown';\n              const { expectedFilePath, expectedFileName } = generateExpectedFilePath(\n                taskId, batchStrategy, fileName, projectPath\n              );\n              \n              return {\n                content: [{\n                  type: \"text\",\n                  text: JSON.stringify({\n                    currentStep: 3,\n                    stepName: 'file-documentation', \n                    mode: \"template_provided\",\n                    taskId: taskId,\n                    \n                    // 🧠 AI指导信息 - 完整的文件创建工作流\n                    ai_guidance: {\n                      instruction: \"请基于提供的模板和文件信息，生成详细的文件分析文档\",\n                      template_usage: \"使用模板中的结构，替换{{变量}}为实际内容\",\n                      next_action: \"再次调用 init_step3_generate_analysis，提供 analysisContent 参数\",\n                      \n                      // 新增：明确的文件创建指导\n                      file_creation_workflow: {\n                        step1: \"基于模板生成分析内容\",\n                        step2: \"调用 init_step3_generate_analysis 提供 analysisContent\",\n                        step3: \"使用 Write 工具创建文件\",\n                        step4: \"调用 init_step3_check_task_completion 验证完成\"\n                      },\n                      \n                      file_creation_details: {\n                        tool_required: \"Write\",\n                        file_path: expectedFilePath,\n                        relative_path: `mg_kiro/files/${expectedFileName}`,\n                        file_name: expectedFileName,\n                        content_source: \"AI生成的分析文档内容\"\n                      }\n                    },\n                    \n                    // 📋 文档生成模板\n                    documentation_template: template,\n                    \n                    // 📊 文件基础信息\n                    file_info: {\n                      fileName: fileName,\n                      filePath: taskContext?.relativePath || '',\n                      fileType: taskContext?.fileName?.split('.').pop() || '',\n                      language: taskContext?.language || 'unknown',\n                      fileSize: `${Math.round(fileSize / 1024 * 10) / 10}KB`,\n                      lineCount: lineCount,\n                      generatedAt: new Date().toISOString()\n                    },\n                    \n                    // 📝 文件内容摘要（用于AI参考）\n                    file_content_preview: fileContent.slice(0, 1000) + (fileContent.length > 1000 ? '...' : ''),\n                    \n                    workflow_status: {\n                      current_step: 3,\n                      step_name: \"文件分析指导\", \n                      progress: `为${fileName}提供分析模板，等待AI生成文档`,\n                      allowed_next_tools: [\"init_step3_generate_analysis\"],\n                      forbidden_tools: [\"init_step3_complete_task\", \"init_step3_get_next_task\"],\n                      \n                      ai_context: \"✅ 已提供文档模板和文件信息，AI需要基于模板生成分析文档\",\n                      ai_instruction: `🎯 请基于模板生成${fileName}的详细分析，然后再次调用 init_step3_generate_analysis 提供 analysisContent`,\n                      template_ready: true\n                    },\n                    \n                    message: \"Step3: 已提供文档模板，请AI基于模板生成分析文档\"\n                  }, null, 2)\n                }]\n              };\n              \n            } catch (templateError) {\n              console.error('[Template Error]', templateError);\n              // 模板读取失败时的fallback\n              return {\n                content: [{\n                  type: \"text\",\n                  text: JSON.stringify({\n                    error: true,\n                    message: \"无法读取文档模板\",\n                    fallback_guidance: {\n                      instruction: \"请为文件生成包含以下部分的分析文档：\",\n                      sections: [\n                        \"# 文件概述\",\n                        \"## 核心功能\", \n                        \"## 代码结构\",\n                        \"## 主要组件\",\n                        \"## 依赖关系\",\n                        \"## 使用示例\",\n                        \"## 注意事项\"\n                      ]\n                    },\n                    tool: name\n                  }, null, 2)\n                }]\n              };\n            }\n          } else {\n            // 模式2：AI提供了分析内容，保存到上下文并指导文件创建\n            console.log(`[MCP-Init-Step3] 接收AI生成的分析文档 - ${projectPath} 任务:${taskId}`);\n            \n            // 计算文件路径信息\n            const batchStrategy = taskContext?.batchStrategy || 'Unknown';\n            const fileName = taskContext?.fileName || '未知文件';\n            const { expectedFilePath, expectedFileName } = generateExpectedFilePath(\n              taskId, batchStrategy, fileName, projectPath\n            );\n            \n            // 保存AI生成的分析文档到任务上下文，包含文件路径信息\n            if (taskContext) {\n              setCurrentTaskContext(projectPath, {\n                ...taskContext,\n                step: 'analysis_ready_for_file_creation',\n                analysisContent: analysisContent,\n                analysisStyle: analysisStyle || 'comprehensive',\n                includeCodeExamples: includeCodeExamples !== false,\n                expectedFilePath,\n                expectedFileName\n              });\n            }\n            \n            // 🎯 精简响应 - 明确告诉AI下一步要做什么\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  currentStep: 3,\n                  stepName: 'file-documentation', \n                  mode: \"analysis_content_received\",\n                  status: \"ready_to_create_file\",\n                  taskId: taskId,\n                  analysisReceived: {\n                    length: analysisContent.length,\n                    style: analysisStyle || 'comprehensive',\n                    includeCodeExamples: includeCodeExamples !== false\n                  },\n                  success: true,\n                  \n                  // 🎯 AI状态可视化 - 分析内容已准备，现在必须创建文件\n                  workflow_status: {\n                    current_step: 3,\n                    step_name: \"文档文件创建\", \n                    progress: `已接收${taskContext?.fileName || '文件'}分析内容，现在需要创建文档文件`,\n                    \n                    // 🚨 关键修正：明确下一步是创建文件，而不是直接验证\n                    allowed_next_tools: [\"Write\"],\n                    required_actions: [\n                      {\n                        action: \"create_file\",\n                        tool: \"Write\", \n                        file_path: expectedFilePath,\n                        relative_path: `mg_kiro/files/${expectedFileName}`,\n                        content: \"analysisContent from context\",\n                        description: `创建文件 ${expectedFileName}`\n                      },\n                      {\n                        action: \"verify_completion\",\n                        tool: \"init_step3_check_task_completion\",\n                        condition: \"after file creation\",\n                        description: \"验证文件创建完成\"\n                      }\n                    ],\n                    forbidden_tools: [\"init_step3_get_next_task\", \"init_step3_get_file_content\", \"init_step4_module_integration\"],\n                    \n                    // 🧠 修正的AI认知提示\n                    ai_context: \"✅ 分析内容已准备完毕，但文件尚未创建到磁盘\",\n                    ai_instruction: `🎯 下一步：使用 Write 工具创建文件 ${expectedFilePath}，内容为刚才提供的 analysisContent`,\n                    file_creation_pending: true\n                  },\n                  \n                  // 新增：明确的文件创建指导\n                  file_creation_required: {\n                    tool: \"Write\",\n                    file_path: expectedFilePath,\n                    relative_path: `mg_kiro/files/${expectedFileName}`,\n                    file_name: expectedFileName,\n                    content_variable: \"analysisContent\",\n                    why: \"MCP工具只提供提示词，实际文件需要AI通过Write工具创建\"\n                  },\n                  \n                  message: `Step3: 分析内容已接收，请使用 Write 工具创建文件 ${expectedFileName}`\n                }, null, 2)\n              }]\n            };\n          }\n        }\n        \n        \n        \n        case \"init_step3_check_task_completion\": {\n          const { projectPath, taskId, stepType } = args;\n          \n          if (!projectPath) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({ error: true, message: \"项目路径不能为空\", tool: name }, null, 2)\n              }]\n            };\n          }\n          \n          console.log(`[MCP-Init-Step3] 检查任务完成状态 - ${projectPath} 任务:${taskId || '自动获取'} 类型:${stepType || 'step3'}`);\n          \n          // 检查服务可用性\n          const unifiedTaskValidator = serviceBus.get('unifiedTaskValidator');\n          if (!unifiedTaskValidator) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: 'UnifiedTaskValidator 服务未找到',\n                  tool: name,\n                  step: 3\n                }, null, 2)\n              }]\n            };\n          }\n\n          try {\n            // 获取当前任务上下文，支持自动获取taskId\n            const taskContext = getCurrentTaskContext(projectPath);\n            const actualTaskId = taskId || taskContext?.taskId;\n            const actualStepType = stepType || 'step3';\n            \n            if (!actualTaskId && actualStepType === 'step3') {\n              return {\n                content: [{\n                  type: \"text\",\n                  text: JSON.stringify({\n                    error: true,\n                    message: \"没有找到当前任务，请先调用 get_next_task\",\n                    tool: name,\n                    contextAvailable: !!taskContext,\n                    suggestion: \"请先调用 init_step3_get_next_task 获取任务\"\n                  }, null, 2)\n                }]\n              };\n            }\n            \n            // 构造任务定义（简化版）\n            const taskDefinition = {\n              taskId: actualTaskId,\n              step: actualStepType,\n              projectPath: resolve(projectPath),\n              stepType: actualStepType\n            };\n            \n            // 执行验证\n            const validation = await unifiedTaskValidator.checkTaskCompletion(taskDefinition, resolve(projectPath));\n            \n            console.log(`[TaskValidation] 验证结果:`, {\n              success: validation.success,\n              autoCompleted: validation.autoCompleted,\n              strategy: validation.validationStrategy,\n              message: validation.message\n            });\n            \n            if (validation.success && validation.autoCompleted) {\n              // ✅ 任务自动完成\n              return {\n                content: [{\n                  type: \"text\",\n                  text: JSON.stringify({\n                    success: true,\n                    taskCompleted: true,\n                    taskId: actualTaskId,\n                    method: 'auto',\n                    stepType: actualStepType,\n                    message: validation.message,\n                    validationStrategy: validation.validationStrategy,\n                    nextAction: validation.nextAction,\n                    details: validation.details,\n                    workflow: {\n                      current_step: `${actualStepType}/6 - 任务自动完成`,\n                      status: \"auto_completed\",\n                      next_action: validation.nextAction\n                    }\n                  }, null, 2)\n                }]\n              };\n            } else {\n              // ⚠️ 任务未完成，返回缺失文件信息\n              return {\n                content: [{\n                  type: \"text\",\n                  text: JSON.stringify({\n                    success: false,\n                    taskCompleted: false,\n                    taskId: actualTaskId,\n                    stepType: actualStepType,\n                    message: validation.message,\n                    validationStrategy: validation.validationStrategy,\n                    nextAction: validation.nextAction,\n                    missingInfo: validation.details,\n                    aiInstruction: `请生成缺失的文档或文件，然后再次调用此工具检查完成状态`,\n                    retryAdvice: \"生成文件后请再次调用 init_step3_check_task_completion\"\n                  }, null, 2)\n                }]\n              };\n            }\n            \n          } catch (error) {\n            console.error(`[TaskValidation] 验证失败: ${error.message}`);\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: `任务验证失败: ${error.message}`,\n                  tool: name,\n                  suggestion: \"请检查项目状态或重试操作\"\n                }, null, 2)\n              }]\n            };\n          }\n        }\n        \n        case \"init_step4_module_integration\": {\n          const { projectPath } = args;\n          \n          if (!projectPath) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({ error: true, message: \"项目路径不能为空\", tool: name }, null, 2)\n              }]\n            };\n          }\n          \n          console.log(`[MCP-Init-Step4] 模块整合 - ${projectPath}`);\n          \n          // 检查服务可用性\n          const unifiedTaskManager = serviceBus.get('unifiedTaskManager');\n          if (!unifiedTaskManager) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: 'UnifiedTaskManager 服务未找到',\n                  tool: name,\n                  step: 4\n                }, null, 2)\n              }]\n            };\n          }\n\n          try {\n            \n            // 检查 Step3 是否完成\n            const validation = validateStepPrerequisites(projectPath, 4);\n            if (!validation.valid) {\n              return {\n                content: [{\n                  type: \"text\",\n                  text: JSON.stringify({ error: true, message: validation.error, tool: name }, null, 2)\n                }]\n              };\n            }\n          \n            const initState = getProjectStateEnhanced(projectPath);\n            \n            // 创建Step4任务\n            const taskDefinition = {\n              id: `step4_module_integration_${Date.now()}`,\n              type: 'module_integration',\n              description: '模块整合任务',\n              files: [], // Step4不基于特定文件，而是整合已有文档\n              metadata: {\n                docsDirectory: join(resolve(projectPath), 'mg_kiro'),\n                outputPath: join(resolve(projectPath), 'mg_kiro/modules/'),\n                stepNumber: 4\n              }\n            };\n            \n            const task = await unifiedTaskManager.createTask(taskDefinition, projectPath, 'step4');\n          \n          initState.currentStep = 4;\n          const docsDir = join(resolve(projectPath), 'mg_kiro');\n          \n          // 生成模块整合AI指导提示词\n          const integrationPrompt = `\n## 模块整合任务 - Step 4\n\n### 背景信息\n- 项目路径: ${resolve(projectPath)}\n- 文档目录: ${docsDir}\n- 已生成文档数: ${initState.documentCount || 0}\n\n### 任务目标\n将模块内的多个文件整合在一起，添加模块相关功能，生成模块总览文档。\n\n### 具体要求\n1. **模块识别**: 根据文件功能和依赖关系，将相关文件归类到逻辑模块\n2. **模块整合**: 为每个模块创建整合文档，包含：\n   - 模块职责和目标\n   - 模块内文件列表和作用\n   - 模块对外提供的接口\n   - 模块的核心功能\n3. **模块总览**: 创建所有模块的总览文档\n\n### 输出要求\n请创建以下文档结构：\n- \\`${docsDir}/modules/module-overview.md\\` - 所有模块的总览\n- \\`${docsDir}/modules/[module-name]/README.md\\` - 每个模块的详细文档\n- \\`${docsDir}/modules/[module-name]/files.md\\` - 模块内文件清单和说明\n\n### 分析步骤\n1. 读取 \\`${docsDir}/files/\\` 下的所有文件文档\n2. 根据文件路径、功能职责、依赖关系进行模块划分\n3. 为每个模块创建详细的整合文档\n4. 生成模块总览，说明每个模块的作用和重要性\n\n### 模块划分建议\n- **核心模块**: 主要业务逻辑和核心功能\n- **服务模块**: 工具、服务、辅助功能\n- **配置模块**: 配置文件、环境设置\n- **接口模块**: API、路由、控制器\n- **数据模块**: 数据处理、模型、存储\n- **测试模块**: 测试文件和测试工具\n\n完成后，请调用 \\`init_step5_module_relations\\` 继续下一步。\n          `;\n          \n          // 存储Step4结果到临时文件\n          saveStepResult(projectPath, 'step4', {\n            integrationPrompt: integrationPrompt.trim(),\n            completedAt: new Date().toISOString(),\n            docsDirectory: docsDir\n          });\n          \n          // 存储Step4结果到主状态文件\n          initState.stepResults.step4 = {\n            integrationPrompt: integrationPrompt.trim(),\n            completedAt: new Date().toISOString(),\n            docsDirectory: docsDir\n          };\n          initState.stepsCompleted.push('step4');\n          updateProjectState(projectPath, initState);\n          \n          return {\n            content: [\n              {\n                type: \"text\",\n                text: JSON.stringify({\n                  currentStep: 4,\n                  stepName: 'module-integration',\n                  status: \"task_created\",\n                  \n                  // 统一任务管理器信息\n                  taskManager: {\n                    taskId: task.id,\n                    taskStatus: task.status,\n                    taskType: 'module_integration',\n                    createdAt: task.createdAt,\n                    validation: {\n                      tool: 'init_step3_check_task_completion',\n                      params: {\n                        taskId: task.id,\n                        projectPath: resolve(projectPath),\n                        stepType: 'step4'\n                      }\n                    }\n                  },\n                  \n                  // Step4 AI指导提示词\n                  aiInstructions: integrationPrompt.trim(),\n                  \n                  // 资源信息\n                  resources: {\n                    sourceDocsPath: `${docsDir}/files/`,\n                    outputModulesPath: `${docsDir}/modules/`,\n                    totalSourceDocs: initState.documentCount || 0\n                  },\n                  \n                  // 下一步指导\n                  workflow: {\n                    current_step: \"4/6 - 模块整合\",\n                    status: \"task_ready\",\n                    next_steps: [{\n                      tool: \"init_step3_check_task_completion\",\n                      description: \"检查模块整合任务完成情况\",\n                      suggested_params: {\n                        taskId: task.id,\n                        projectPath: resolve(projectPath),\n                        stepType: 'step4'\n                      },\n                      why: \"完成模块整合后，需要验证并自动进入下一步骤\"\n                    }],\n                    progress: {\n                      completed: 4,\n                      total: 6,\n                      percentage: Math.round(4/6 * 100)\n                    }\n                  },\n                  \n                  success: true,\n                  message: \"Step4: 模块整合任务已创建，请按照提示完成后使用验证工具检查\"\n                }, null, 2)\n              }\n            ]\n          };\n          } catch (error) {\n            console.error(`[Step4] UnifiedTaskManager 集成失败: ${error.message}`);\n            // 回退到传统实现作为备选方案\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: `Step4 统一任务管理失败: ${error.message}`,\n                  fallback: \"使用传统模式处理\",\n                  tool: name,\n                  suggestion: \"请检查 UnifiedTaskManager 服务状态\"\n                }, null, 2)\n              }]\n            };\n          }\n        }\n        \n        case \"init_step5_module_relations\": {\n          const { projectPath } = args;\n          \n          if (!projectPath) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({ error: true, message: \"项目路径不能为空\", tool: name }, null, 2)\n              }]\n            };\n          }\n          \n          console.log(`[MCP-Init-Step5] 模块关联分析 - ${projectPath}`);\n          \n          // 检查服务可用性\n          const unifiedTaskManager = serviceBus.get('unifiedTaskManager');\n          if (!unifiedTaskManager) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: 'UnifiedTaskManager 服务未找到',\n                  tool: name,\n                  step: 5\n                }, null, 2)\n              }]\n            };\n          }\n\n          try {\n            \n            // 使用增强的验证逻辑\n            const validation = validateStepPrerequisites(projectPath, 5);\n            if (!validation.valid) {\n              return {\n                content: [{\n                  type: \"text\",\n                  text: JSON.stringify({ error: true, message: validation.error, tool: name }, null, 2)\n                }]\n              };\n            }\n            \n            const initState = getProjectStateEnhanced(projectPath);\n            \n            // 创建Step5任务\n            const taskDefinition = {\n              id: `step5_module_relations_${Date.now()}`,\n              type: 'module_relations',\n              description: '模块关联分析任务',\n              files: [], // Step5基于已有的文档和模块分析结果\n              metadata: {\n                docsDirectory: join(resolve(projectPath), 'mg_kiro'),\n                outputPath: join(resolve(projectPath), 'mg_kiro/relations/'),\n                stepNumber: 5,\n                expectedOutputs: [\n                  'function-calls.md',\n                  'module-dependencies.md',\n                  'data-flows.md',\n                  'overview.md'\n                ]\n              }\n            };\n            \n            const task = await unifiedTaskManager.createTask(taskDefinition, projectPath, 'step5');\n          \n          initState.currentStep = 5;\n          const docsDir = join(resolve(projectPath), 'mg_kiro');\n          \n          // 生成模块关联分析提示词\n          const relationsPrompt = `\n## 模块关联分析任务 - Step 5\n\n### 背景信息\n- 项目路径: ${resolve(projectPath)}\n- 文档目录: ${docsDir}\n- 处理阶段: 基于完整的文件文档和模块整合结果\n\n### 任务目标\n详细阐述每个文件之间的关联，分析哪个函数被多个模块调用，生成详细的依赖关系图。\n\n### 输入资源\n1. **文件文档**: \\`${docsDir}/files/\\` - 所有源码文件的详细分析\n2. **模块文档**: \\`${docsDir}/modules/\\` - 模块整合分析结果\n\n### 分析维度\n\n#### 1. 函数调用关系\n- 识别跨模块的函数调用\n- 分析高频被调用的函数\n- 标记核心工具函数和接口\n\n#### 2. 数据依赖关系\n- 分析数据流向和传递链路\n- 识别共享的数据结构和类型\n- 标记关键数据接口\n\n#### 3. 模块间依赖\n- 分析模块之间的导入/导出关系\n- 识别循环依赖和潜在问题\n- 评估模块耦合程度\n\n#### 4. 接口和服务调用\n- 分析内部API调用关系\n- 识别服务层的调用模式\n- 标记关键的服务接口\n\n### 输出要求\n请创建以下关联分析文档：\n\n#### 1. 函数调用关系图 - \\`${docsDir}/relations/function-calls.md\\`\n- 跨模块函数调用的详细清单\n- 高频被调用函数的分析报告\n- 函数调用链路图和说明\n\n#### 2. 模块依赖关系图 - \\`${docsDir}/relations/module-dependencies.md\\`\n- 模块间的完整依赖关系图\n- 依赖强度分析和评级\n- 循环依赖检测和建议\n\n#### 3. 数据流向分析 - \\`${docsDir}/relations/data-flows.md\\`\n- 关键数据的流转路径\n- 数据变换和处理节点\n- 数据接口的使用频率\n\n#### 4. 关联总览 - \\`${docsDir}/relations/overview.md\\`\n- 整个项目的关联关系总结\n- 关键节点和瓶颈分析\n- 架构优化建议\n\n### 分析方法\n1. 解析所有文件文档中的导入/导出信息\n2. 识别函数定义和调用关系\n3. 构建完整的调用关系图谱\n4. 分析数据传递和变换过程\n5. 评估模块间的耦合度和依赖强度\n\n### 重点关注\n- **高频调用函数**: 被多个模块调用的核心函数\n- **数据中心节点**: 数据汇聚和分发的关键位置\n- **接口边界**: 模块间的主要交互接口\n- **潜在风险点**: 过度耦合或循环依赖的位置\n\n完成后，请调用 \\`init_step6_architecture_docs\\` 进行最终的架构文档生成。\n          `;\n          \n          // 存储Step5结果到临时文件\n          saveStepResult(projectPath, 'step5', {\n            relationsPrompt: relationsPrompt.trim(),\n            completedAt: new Date().toISOString(),\n            docsDirectory: docsDir\n          });\n          \n          // 存储Step5结果到主状态文件\n          initState.stepResults.step5 = {\n            relationsPrompt: relationsPrompt.trim(),\n            completedAt: new Date().toISOString(),\n            docsDirectory: docsDir\n          };\n          initState.stepsCompleted.push('step5');\n          updateProjectState(projectPath, initState);\n          \n          return {\n            content: [\n              {\n                type: \"text\",\n                text: JSON.stringify({\n                  currentStep: 5,\n                  stepName: 'module-relations',\n                  status: \"task_created\",\n                  \n                  // 统一任务管理器信息\n                  taskManager: {\n                    taskId: task.id,\n                    taskStatus: task.status,\n                    taskType: 'module_relations',\n                    createdAt: task.createdAt,\n                    validation: {\n                      tool: 'init_step3_check_task_completion',\n                      params: {\n                        taskId: task.id,\n                        projectPath: resolve(projectPath),\n                        stepType: 'step5'\n                      }\n                    }\n                  },\n                  \n                  // Step5 AI指导提示词\n                  aiInstructions: relationsPrompt.trim(),\n                  \n                  // 资源信息\n                  resources: {\n                    fileDocsPath: `${docsDir}/files/`,\n                    moduleDocsPath: `${docsDir}/modules/`,\n                    outputPath: `${docsDir}/relations/`,\n                    totalFiles: initState.documentCount || 0\n                  },\n                  \n                  // 输出文档规格\n                  expectedOutputs: [\n                    `${docsDir}/relations/function-calls.md`,\n                    `${docsDir}/relations/module-dependencies.md`, \n                    `${docsDir}/relations/data-flows.md`,\n                    `${docsDir}/relations/overview.md`\n                  ],\n                  \n                  // 下一步指导\n                  workflow: {\n                    current_step: \"5/6 - 模块关联分析\",\n                    status: \"task_ready\",\n                    next_steps: [{\n                      tool: \"init_step3_check_task_completion\",\n                      description: \"检查模块关联分析任务完成情况\",\n                      suggested_params: {\n                        taskId: task.id,\n                        projectPath: resolve(projectPath),\n                        stepType: 'step5'\n                      },\n                      why: \"完成模块关联分析后，需要验证并自动进入下一步骤\"\n                    }],\n                    progress: {\n                      completed: 5,\n                      total: 6,\n                      percentage: Math.round(5/6 * 100)\n                    }\n                  },\n                  \n                  success: true,\n                  message: \"Step5: 模块关联分析任务已创建，请按照提示完成后使用验证工具检查\"\n                }, null, 2)\n              }\n            ]\n          };\n          } catch (error) {\n            console.error(`[Step5] UnifiedTaskManager 集成失败: ${error.message}`);\n            // 回退到传统实现作为备选方案\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: `Step5 统一任务管理失败: ${error.message}`,\n                  fallback: \"使用传统模式处理\",\n                  tool: name,\n                  suggestion: \"请检查 UnifiedTaskManager 服务状态\"\n                }, null, 2)\n              }]\n            };\n          }\n        }\n        \n        case \"init_step6_architecture_docs\": {\n          const { projectPath } = args;\n          \n          if (!projectPath) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({ error: true, message: \"项目路径不能为空\", tool: name }, null, 2)\n              }]\n            };\n          }\n          \n          console.log(`[MCP-Init-Step6] 架构文档生成 - ${projectPath}`);\n          \n          // 检查服务可用性\n          const unifiedTaskManager = serviceBus.get('unifiedTaskManager');\n          if (!unifiedTaskManager) {\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: 'UnifiedTaskManager 服务未找到',\n                  tool: name,\n                  step: 6\n                }, null, 2)\n              }]\n            };\n          }\n\n          try {\n            \n            // 使用增强的验证逻辑\n            const validation = validateStepPrerequisites(projectPath, 6);\n            if (!validation.valid) {\n              return {\n                content: [{\n                  type: \"text\",\n                  text: JSON.stringify({ error: true, message: validation.error, tool: name }, null, 2)\n                }]\n              };\n            }\n            \n            const initState = getProjectStateEnhanced(projectPath);\n            \n            // 创建Step6任务\n            const taskDefinition = {\n              id: `step6_architecture_docs_${Date.now()}`,\n              type: 'architecture_docs',\n              description: '架构文档生成任务',\n              files: [], // Step6基于所有已生成的文档\n              metadata: {\n                docsDirectory: join(resolve(projectPath), 'mg_kiro'),\n                outputPath: resolve(projectPath), // 根目录输出\n                stepNumber: 6,\n                expectedOutputs: [\n                  'README.md',\n                  'architecture.md',\n                  'development.md'\n                ]\n              }\n            };\n            \n            const task = await unifiedTaskManager.createTask(taskDefinition, projectPath, 'step6');\n          \n          initState.currentStep = 6;\n          const docsDir = join(resolve(projectPath), 'mg_kiro');\n          \n          // 生成架构文档生成提示词\n          const architecturePrompt = `\n## 架构文档生成任务 - Step 6 (最终步骤)\n\n### 背景信息\n- 项目路径: ${resolve(projectPath)}\n- 文档目录: ${docsDir}\n- 处理阶段: 基于完整的文件、模块和关联分析结果\n\n### 任务目标\n生成README、架构图、项目总览等最终文档，完成整个文档体系。\n\n### 输入资源\n1. **文件文档**: \\`${docsDir}/files/\\` - 所有源码文件的详细分析\n2. **模块文档**: \\`${docsDir}/modules/\\` - 模块整合分析结果\n3. **关联文档**: \\`${docsDir}/relations/\\` - 模块关联和依赖分析\n\n### 现有文档结构\n\\`\\`\\`\n${docsDir}/\n├── files/            # 文件文档目录 (Step3生成)\n│   ├── [filename1].md\n│   ├── [filename2].md\n│   └── ...\n├── modules/          # 模块文档目录 (Step4生成)\n│   ├── module-overview.md\n│   └── [module-name]/\n└── relations/        # 关联文档目录 (Step5生成)\n    ├── function-calls.md\n    ├── module-dependencies.md\n    ├── data-flows.md\n    └── overview.md\n\\`\\`\\`\n\n### 输出要求\n请创建以下最终架构文档：\n\n#### 1. 项目README - \\`${docsDir}/README.md\\`\n# [项目名称]\n\n## 📖 项目概述\n- 项目简介和核心价值\n- 主要功能特性\n- 技术栈概览\n\n## 🏗️ 架构概览  \n- 整体架构图\n- 核心模块说明\n- 技术架构选型\n\n## 🚀 快速开始\n- 环境要求\n- 安装步骤\n- 运行指南\n\n## 📚 文档导航\n- [架构设计](./architecture.md)\n- [开发指南](./development.md)\n- [模块总览](./modules/module-overview.md)\n- [关联分析](./relations/overview.md)\n- [完整文档索引](./docs-index.md)\n\n#### 2. 架构设计文档 - \\`${docsDir}/architecture.md\\`\n# 架构设计文档\n\n## 🏗️ 整体架构\n- 系统架构图\n- 技术选型说明\n- 设计原则和理念\n\n## 📦 模块架构\n- 模块划分策略\n- 模块职责说明\n- 模块间交互关系\n\n## 🔗 依赖关系\n- 核心依赖分析\n- 数据流向图\n- 接口设计原则\n\n## ⚡ 性能架构\n- 性能关键点\n- 扩展性设计\n- 监控和优化策略\n\n#### 3. 开发指南 - \\`${docsDir}/development.md\\`\n# 开发指南\n\n## 🛠️ 开发环境\n- 环境搭建步骤\n- 开发工具推荐\n- 配置说明\n\n## 📝 开发规范\n- 代码规范\n- 提交规范\n- 文档规范\n\n## 🔧 开发流程\n- 功能开发流程\n- 测试流程\n- 部署流程\n\n## 🚀 贡献指南\n- 如何贡献代码\n- Issue报告规范\n- Pull Request流程\n\n#### 4. 完整文档索引 - \\`${docsDir}/docs-index.md\\`\n# 文档索引\n\n## 🏠 主要文档\n- [README.md](./README.md) - 项目总览\n- [architecture.md](./architecture.md) - 架构设计\n- [development.md](./development.md) - 开发指南\n\n## 📁 文件文档\n[自动生成文件列表]\n\n## 📦 模块文档  \n[自动生成模块列表]\n\n## 🔗 关联文档\n[自动生成关联文档列表]\n\n### 生成策略\n1. 整合所有前面步骤的分析结果\n2. 提取项目的核心价值和技术特色\n3. 构建清晰的架构视图和技术文档\n4. 提供完整的使用和开发指导\n5. 建立文档间的导航和索引系统\n\n### 重点要求\n- **完整性**: 覆盖项目的所有重要方面\n- **可读性**: 结构清晰，易于理解和导航\n- **实用性**: 提供实际的使用和开发指导  \n- **准确性**: 基于实际的代码分析结果\n- **连贯性**: 各文档间保持一致的风格和结构\n\n**🎉 完成此步骤后，整个6步init工作流将全部完成！**\n          `;\n          \n          // 存储Step6结果并标记完成\n          initState.stepResults.step6 = {\n            architecturePrompt: architecturePrompt.trim(),\n            completedAt: new Date().toISOString(),\n            docsDirectory: docsDir\n          };\n          initState.stepsCompleted.push('step6');\n          initState.currentStep = 6;\n          initState.completed = true;\n          initState.completedAt = new Date().toISOString();\n          \n          // Step6完成后，清理所有临时文件（最终步骤）\n          try {\n            const cleanupResult = cleanupTempFiles(projectPath);\n            console.log(`[Step6-Cleanup] 初始化完成，清理临时文件: 删除${cleanupResult.cleaned}个临时文件，保留${cleanupResult.kept}个`);\n            \n            // 保存清理信息到状态中\n            initState.stepResults.step6.cleanupInfo = {\n              tempFilesDeleted: cleanupResult.cleaned,\n              tempFilesKept: cleanupResult.kept,\n              cleanupCompletedAt: new Date().toISOString()\n            };\n          } catch (cleanupError) {\n            console.warn(`[Step6-Cleanup] 清理临时文件时出现警告: ${cleanupError.message}`);\n            initState.stepResults.step6.cleanupWarning = cleanupError.message;\n          }\n          \n          return {\n            content: [\n              {\n                type: \"text\",\n                text: JSON.stringify({\n                  currentStep: 6,\n                  stepName: 'architecture-docs',\n                  status: \"task_created\",\n                  \n                  // 统一任务管理器信息\n                  taskManager: {\n                    taskId: task.id,\n                    taskStatus: task.status,\n                    taskType: 'architecture_docs',\n                    createdAt: task.createdAt,\n                    validation: {\n                      tool: 'init_step3_check_task_completion',\n                      params: {\n                        taskId: task.id,\n                        projectPath: resolve(projectPath),\n                        stepType: 'step6'\n                      }\n                    },\n                    isFinalStep: true\n                  },\n                  \n                  // Step6 AI指导提示词 (最终步骤)\n                  aiInstructions: architecturePrompt.trim(),\n                  \n                  // 文档体系信息\n                  documentationSystem: {\n                    docsDirectory: docsDir,\n                    totalFiles: initState.documentCount || 0,\n                    generatedDocs: initState.generatedDocs?.length || 0,\n                    expectedFinalDocs: [\n                      `${docsDir}/README.md`,\n                      `${docsDir}/architecture.md`,\n                      `${docsDir}/development.md`,\n                      `${docsDir}/docs-index.md`\n                    ]\n                  },\n                  \n                  // 完成状态\n                  workflow: {\n                    current_step: \"6/6 - 架构文档生成 (最终步骤)\",\n                    status: \"task_ready\",\n                    next_steps: [{\n                      tool: \"init_step3_check_task_completion\",\n                      description: \"检查架构文档生成任务完成情况\",\n                      suggested_params: {\n                        taskId: task.id,\n                        projectPath: resolve(projectPath),\n                        stepType: 'step6'\n                      },\n                      why: \"完成架构文档生成后，验证并完成整个初始化流程\"\n                    }],\n                    completion: {\n                      message: \"🎉 Init工作流即将完成！\",\n                      totalSteps: 6,\n                      allStepsCompleted: false, // 任务创建完成，但还需要验证\n                      finalTask: \"完成架构文档生成并通过验证后，整个初始化流程将全部完成\"\n                    },\n                    progress: {\n                      completed: 6,\n                      total: 6,\n                      percentage: 100\n                    }\n                  },\n                  \n                  // 最终总结\n                  initSummary: {\n                    projectPath: resolve(projectPath),\n                    docsGenerated: docsDir,\n                    filesProcessed: initState.documentCount || 0,\n                    stepsCompleted: initState.stepsCompleted,\n                    startedAt: initState.startedAt,\n                    totalDuration: initState.startedAt ? \n                      Math.round((new Date() - new Date(initState.startedAt)) / 1000 / 60) + '分钟' : '未知'\n                  },\n                  \n                  success: true,\n                  message: \"Step6: 架构文档生成任务已创建，请按照提示完成后使用验证工具检查\"\n                }, null, 2)\n              }\n            ]\n          };\n          } catch (error) {\n            console.error(`[Step6] UnifiedTaskManager 集成失败: ${error.message}`);\n            // 回退到传统实现作为备选方案\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: `Step6 统一任务管理失败: ${error.message}`,\n                  fallback: \"使用传统模式处理\",\n                  tool: name,\n                  suggestion: \"请检查 UnifiedTaskManager 服务状态\"\n                }, null, 2)\n              }]\n            };\n          }\n        }\n        \n        case \"workflow_guide\": {\n          const { workflow, currentStep, projectPath } = args;\n          \n          console.log(`[MCP-WorkflowGuide] 获取工作流指引 - 类型: ${workflow || 'init'}`);\n          \n          // 使用内置的工作流指引（不依赖外部服务）\n          {\n            // 内置的工作流指引\n            const workflowGuides = {\n              init: {\n                workflow_name: \"项目初始化工作流\",\n                description: \"完整的6步文档生成流程，提供从分析到最终文档的全程指导\",\n                total_steps: 6,\n                steps: [\n                  {\n                    step: 1,\n                    name: \"项目分析\",\n                    tool: \"init_step1_project_analysis\",\n                    description: \"深度分析项目结构、语言特征、依赖关系，生成基础数据包\",\n                    required_params: {\n                      projectPath: \"项目根目录的绝对路径\"\n                    },\n                    optional_params: {\n                      maxDepth: \"目录扫描深度（默认3层）\",\n                      includeFiles: \"额外要包含的文件模式\",\n                      maxKeyFileSize: \"关键文件最大字节数（默认50KB）\"\n                    },\n                    expected_output: \"项目概览包，包含语言分析、架构分析、文件清单\",\n                    why: \"建立项目基础信息，为后续步骤提供数据支持\"\n                  },\n                  {\n                    step: 2,\n                    name: \"任务创建\",\n                    tool: \"init_step2_create_todos\",\n                    description: \"基于项目分析结果，创建详细的AI处理任务列表\",\n                    prerequisites: [\"必须先完成init_step1_project_analysis\"],\n                    required_params: {\n                      projectPath: \"项目根目录的绝对路径\"\n                    },\n                    optional_params: {\n                      batchSize: \"批次大小（默认3）\",\n                      includeAnalysisTasks: \"包含分析任务（默认true）\",\n                      includeSummaryTasks: \"包含总结任务（默认true）\"\n                    },\n                    expected_output: \"AI任务列表、处理计划、时间预估\",\n                    why: \"制定详细的文档生成计划，为文件处理做准备\"\n                  },\n                  {\n                    step: 3,\n                    name: \"文件文档生成\",\n                    tool: \"init_step3_get_next_task\",\n                    description: \"开始逐个处理文件，生成详细的技术文档（循环步骤）\",\n                    prerequisites: [\"必须先完成init_step2_create_todos\"],\n                    required_params: {\n                      projectPath: \"项目根目录的绝对路径\"\n                    },\n                    sub_tools: [\n                      \"init_step3_get_next_task - 获取下一个文件任务\",\n                      \"init_step3_get_file_content - 获取文件内容\",\n                      \"init_step3_check_task_completion - 验证任务完成状态（新验证机制）\"\n                    ],\n                    expected_output: \"每个源码文件的详细技术文档\",\n                    why: \"为每个重要文件生成详细分析，建立代码库文档基础\"\n                  },\n                  {\n                    step: 4,\n                    name: \"模块整合\",\n                    tool: \"init_step4_module_integration\",\n                    description: \"基于文件文档进行模块化整合分析\",\n                    prerequisites: [\"必须先完成Step3所有文件处理\"],\n                    required_params: {\n                      projectPath: \"项目根目录的绝对路径\"\n                    },\n                    expected_output: \"模块整合指导、依赖关系分析、架构梳理提示\",\n                    why: \"将文件级文档整合为模块级架构，识别系统设计模式\"\n                  },\n                  {\n                    step: 5,\n                    name: \"模块关联分析\",\n                    tool: \"init_step5_module_relations\",\n                    description: \"详细阐述每个文件之间的关联，分析函数调用关系\",\n                    prerequisites: [\"必须先完成init_step4_module_integration\"],\n                    required_params: {\n                      projectPath: \"项目根目录的绝对路径\"\n                    },\n                    expected_output: \"函数调用关系图、模块依赖分析、数据流向图\",\n                    why: \"分析模块间的深度关联，识别关键节点和依赖关系\"\n                  },\n                  {\n                    step: 6,\n                    name: \"架构文档生成\",\n                    tool: \"init_step6_architecture_docs\",\n                    description: \"生成README、架构图、项目总览等最终文档（最终步骤）\",\n                    prerequisites: [\"必须先完成init_step5_module_relations\"],\n                    required_params: {\n                      projectPath: \"项目根目录的绝对路径\"\n                    },\n                    expected_output: \"README.md、architecture.md、development.md、完整文档索引\",\n                    why: \"生成最终的架构文档和项目总览，完成整个文档体系\"\n                  }\n                ],\n                next_action: {\n                  if_not_started: \"调用 init_step1_project_analysis 开始完整的初始化流程\",\n                  if_step1_done: \"调用 init_step2_create_todos 创建任务列表\",\n                  if_step2_done: \"调用 init_step3_get_next_task 开始文件处理循环\",\n                  if_step3_done: \"调用 init_step4_module_integration 进行模块整合\",\n                  if_step4_done: \"调用 init_step5_module_relations 进行关联分析\",\n                  if_step5_done: \"调用 init_step6_architecture_docs 生成架构文档\",\n                  if_completed: \"🎉 所有步骤已完成！使用 get_init_status 查看最终状态\"\n                },\n                workflow_features: [\n                  \"🔄 逐步执行：每个步骤都有明确的输入输出和下一步指导\",\n                  \"📊 进度跟踪：每个工具都会提供当前进度和完成状态\",\n                  \"🧠 AI协作：每个步骤都包含详细的AI处理指导\",\n                  \"📁 自动保存：所有生成的文档都会保存到项目的mg_kiro/目录\",\n                  \"🔗 状态管理：自动管理项目状态，支持断点续传\",\n                  \"✅ 完整验证：每步都会验证前置条件，确保流程正确执行\"\n                ],\n                tips: [\n                  \"建议使用绝对路径作为 projectPath 参数\",\n                  \"Step3是循环步骤，需要重复调用直到所有文件处理完成\",\n                  \"每个工具的返回结果都包含详细的下一步指导\",\n                  \"生成的文档位于项目根目录的 mg_kiro/ 文件夹中\",\n                  \"可以随时使用 get_init_status 查看当前进度\",\n                  \"如需重新开始，使用 reset_init 重置所有状态\"\n                ]\n              },\n              status: {\n                workflow_name: \"状态查询工作流\",\n                description: \"查看当前工作流状态和进度\",\n                tools: [\"get_init_status\", \"reset_init\"],\n                next_action: \"调用 get_init_status 查看状态，或 reset_init 重置流程\"\n              }\n            };\n            \n            const selectedWorkflow = workflowGuides[workflow || 'init'];\n            \n            return {\n              content: [\n                {\n                  type: \"text\",\n                  text: JSON.stringify({\n                    workflow_guide: selectedWorkflow,\n                    current_step: currentStep || null,\n                    project_path: projectPath || null,\n                    available_workflows: Object.keys(workflowGuides),\n                    version: \"4.0-complete-6-steps\",\n                    message: \"根据上述指引，按顺序调用相应的工具完成工作流\"\n                  }, null, 2)\n                }\n              ]\n            };\n          }\n        }\n        \n        \n        case \"get_init_status\": {\n          const { projectPath } = args;\n          \n          console.log(`[MCP-InitStatus] 获取完整的6步工作流状态`);\n          \n          if (projectPath) {\n            // 获取特定项目的状态\n            const projectState = getProjectStateEnhanced(projectPath);\n            \n            return {\n              content: [\n                {\n                  type: \"text\",\n                  text: JSON.stringify({\n                    projectPath: resolve(projectPath),\n                    currentStep: projectState.currentStep,\n                    stepsCompleted: projectState.stepsCompleted,\n                    totalSteps: 6,\n                    progress: {\n                      percentage: Math.round((projectState.stepsCompleted.length / 6) * 100),\n                      completed: projectState.stepsCompleted.length,\n                      remaining: 6 - projectState.stepsCompleted.length\n                    },\n                    status: projectState.currentStep === 0 ? 'not_started' : \n                           projectState.completed ? 'completed' : 'in_progress',\n                    startedAt: projectState.startedAt,\n                    completedAt: projectState.completedAt,\n                    documentCount: projectState.documentCount || 0,\n                    generatedDocs: projectState.generatedDocs || [],\n                    nextStep: projectState.currentStep < 6 ? {\n                      step: projectState.currentStep + 1,\n                      tool: `init_step${projectState.currentStep + 1}_${\n                        ['project_analysis', 'create_todos', 'get_next_task', \n                         'module_integration', 'module_relations', 'architecture_docs'][projectState.currentStep]\n                      }`\n                    } : null,\n                    workflowVersion: \"4.0-complete-6-steps\"\n                  }, null, 2)\n                }\n              ]\n            };\n          } else {\n            // 返回系统整体状态\n            return {\n              content: [\n                {\n                  type: \"text\",\n                  text: JSON.stringify({\n                    systemStatus: \"ready\",\n                    availableTools: [\n                      \"workflow_guide - 获取完整工作流指引\",\n                      \"init_step1_project_analysis - 项目分析\",\n                      \"init_step2_create_todos - 创建AI任务列表\",\n                      \"init_step3_get_next_task - 获取下一个文件任务\",\n                      \"init_step3_get_file_content - 获取文件内容\",\n                      \"init_step3_check_task_completion - 验证文件处理任务完成\",\n                      \"init_step4_module_integration - 模块整合\",\n                      \"init_step5_module_relations - 模块关联分析\",\n                      \"init_step6_architecture_docs - 架构文档生成\",\n                      \"get_init_status - 获取状态信息\",\n                      \"reset_init - 重置流程\"\n                    ],\n                    workflowVersion: \"4.0-complete-6-steps\",\n                    totalSteps: 6,\n                    description: \"完整的6步文档生成流程，提供从分析到最终文档的全程指导\",\n                    usage: \"使用 workflow_guide 工具获取完整的使用指引\"\n                  }, null, 2)\n                }\n              ]\n            };\n          }\n        }\n        \n        case \"reset_init\": {\n          console.log(`[MCP-AutoReset] 重置流程状态（增强版）`);\n          \n          // 新增：支持可选的项目路径参数\n          const { projectPath } = args || {};\n          \n          let cleanupResults = {};\n          if (projectPath) {\n            try {\n              // 新增：清理任务上下文（解决AI调用断档问题）\n              const normalizedPath = resolve(projectPath);\n              const hadContext = currentTaskContexts.has(normalizedPath);\n              clearCurrentTaskContext(projectPath);\n              \n              // 清理指定项目的临时文件\n              cleanupResults = cleanupTempFiles(projectPath);\n              console.log(`[Reset] 清理项目 ${projectPath}: 删除${cleanupResults.cleaned}个临时文件，任务上下文已清理: ${hadContext}`);\n              \n              // 清除内存状态\n              projectStates.delete(normalizedPath);\n              \n              // 清理UnifiedTaskManager中的项目数据（如果支持特定项目清理）\n              // UnifiedTaskManager目前使用全局重置，项目级清理在全局重置中处理\n              \n              cleanupResults.taskContextCleared = hadContext;\n              cleanupResults.projectStateCleared = true;\n              \n            } catch (error) {\n              console.warn(`[Reset] 清理项目 ${projectPath} 时出现错误: ${error.message}`);\n              cleanupResults.error = error.message;\n            }\n          } else {\n            // 全局重置：清理所有内存状态和任务上下文\n            const projectCount = projectStates.size;\n            const contextCount = currentTaskContexts.size;\n            \n            projectStates.clear();\n            currentTaskContexts.clear(); // 清理所有任务上下文\n            \n            // 清理UnifiedTaskManager数据\n            const unifiedTaskManager = serviceBus.get('unifiedTaskManager');\n            if (unifiedTaskManager) {\n              await unifiedTaskManager.reset();\n              console.log(`[Reset] UnifiedTaskManager已重置`);\n            }\n            \n            console.log(`[Reset] 全局清理完成: ${projectCount}个项目状态，${contextCount}个任务上下文`);\n            \n            cleanupResults = {\n              projectStatesCleared: projectCount,\n              taskContextsCleared: contextCount,\n              globalReset: true\n            };\n          }\n          \n          const result = claudeCodeInit.reset();\n          \n          return {\n            content: [\n              {\n                type: \"text\",\n                text: JSON.stringify({\n                  ...result,\n                  nextStep: \"调用 init_step1_project_analysis 开始新的6步Init流程\",\n                  automationEnhanced: true,\n                  version: \"4.0-complete-6-steps-automated\",\n                  cleanupResults: cleanupResults, // 增强的清理结果信息\n                  \n                  // 新增：自动化功能说明\n                  automationFeatures: {\n                    smartParameterCompletion: \"AI调用工具时自动补全参数\",\n                    contextManagement: \"自动维护任务上下文，避免断档\",\n                    errorRecovery: \"智能错误恢复和建议\",\n                    seamlessWorkflow: \"工具间无缝衔接，减少手动参数传递\"\n                  },\n                  \n                  improvedUserExperience: {\n                    before: \"AI需要手动管理taskId和relativePath参数\",\n                    after: \"AI只需提供projectPath，其他参数自动补全\",\n                    benefit: \"大幅减少调用断档，提升工作流连续性\"\n                  }\n                }, null, 2)\n              }\n            ]\n          };\n        }\n        \n        default:\n          return {\n            content: [{\n              type: \"text\",\n              text: JSON.stringify({ error: true, message: `未知的工具: ${name}. 可用工具: workflow_guide, init_step1_project_analysis, init_step2_create_todos, init_step2_file_analysis, init_step3_get_next_task, init_step3_get_file_content, init_step3_generate_analysis, init_step3_check_task_completion, init_step4_module_integration, init_step5_module_relations, init_step6_architecture_docs, get_init_status, reset_init`, tool: name }, null, 2)\n            }]\n          };\n      }\n    } catch (error) {\n      console.error(`[MCP-6Steps] 工具执行失败: ${name}`, error);\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify({\n              error: true,\n              message: error.message,\n              tool: name,\n              version: \"4.0-complete-6-steps\",\n              suggestion: \"请检查工具名称和参数。主要工具: workflow_guide(获取工作流指引), init_step1_project_analysis(开始6步流程)\",\n              availableTools: [\n                \"generate_project_overview - 生成项目概览包\",\n                \"progressive_documentation - 渐进式文档生成\",\n                \"get_init_status - 获取状态信息\", \n                \"reset_init - 重置流程\"\n              ]\n            }, null, 2)\n          }\n        ]\n      };\n    }\n  });\n\n  // 启动MCP服务器\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n  \n  console.log(\"\\n✅ mg_kiro MCP服务器已启动 (stdio模式) - v5.0.0-complete-6-steps-redesigned\");\n  console.log(\"🚀 重新设计的完整6步Init工作流已就绪\");\n  console.log(\"🤖 支持工具: workflow_guide, init_step1-6 (文件分析→模块整合→关联分析→架构文档)\");\n  console.log(\"📡 等待Claude Code客户端连接...\\n\");\n}\n",
                  "type": "module-focused"
                },
                "parentFileInfo": {
                  "path": "index.js",
                  "totalTokens": 28530,
                  "originalIndex": 0
                },
                "metadata": {
                  "strategy": "largeMulti",
                  "fileCount": 1,
                  "description": "大文件分割 1/2 - index.js (72,159 tokens, 行 1-3402) - 模块重点",
                  "efficiency": 73,
                  "processingHints": {
                    "recommended": true,
                    "maxTokensPerChunk": 1200,
                    "strategy": "function_boundary",
                    "enableBoundaryDetection": true,
                    "isFirstChunk": true,
                    "isLastChunk": false,
                    "analysisDepth": "detailed",
                    "focusAreas": [
                      "code_structure",
                      "logic_flow",
                      "dependencies"
                    ],
                    "specialInstructions": [
                      "这是文件的第一部分，请特别关注整体架构和导入依赖"
                    ],
                    "contextAware": true,
                    "requiresIntegration": true,
                    "contextInfo": {
                      "fileContext": {
                        "totalChunks": 2,
                        "currentChunk": 1,
                        "fileImportance": 50,
                        "filePath": "index.js"
                      },
                      "chunkContext": {
                        "precedingChunks": 0,
                        "followingChunks": 1,
                        "relativePosition": 0.5,
                        "estimatedComplexity": 10
                      },
                      "integrationHints": {
                        "needsContextFromPrevious": false,
                        "providesContextForNext": true,
                        "standaloneAnalysis": false
                      }
                    },
                    "reconstructionInfo": {
                      "sequenceInfo": {
                        "position": 1,
                        "total": 2,
                        "isPartial": true
                      },
                      "mergingHints": {
                        "requiresOrdering": true,
                        "hasOverlap": false,
                        "integrationPoints": [
                          {
                            "type": "module",
                            "line": 12,
                            "priority": 6
                          },
                          {
                            "type": "module",
                            "line": 13,
                            "priority": 6
                          },
                          {
                            "type": "module",
                            "line": 18,
                            "priority": 6
                          },
                          {
                            "type": "module",
                            "line": 19,
                            "priority": 6
                          },
                          {
                            "type": "module",
                            "line": 20,
                            "priority": 6
                          },
                          {
                            "type": "module",
                            "line": 21,
                            "priority": 6
                          },
                          {
                            "type": "module",
                            "line": 22,
                            "priority": 6
                          },
                          {
                            "type": "module",
                            "line": 23,
                            "priority": 6
                          },
                          {
                            "type": "module",
                            "line": 24,
                            "priority": 6
                          },
                          {
                            "type": "module",
                            "line": 25,
                            "priority": 6
                          },
                          {
                            "type": "module",
                            "line": 26,
                            "priority": 6
                          },
                          {
                            "type": "other",
                            "line": 32,
                            "priority": 3
                          },
                          {
                            "type": "other",
                            "line": 68,
                            "priority": 3
                          },
                          {
                            "type": "other",
                            "line": 76,
                            "priority": 3
                          },
                          {
                            "type": "other",
                            "line": 144,
                            "priority": 3
                          },
                          {
                            "type": "other",
                            "line": 587,
                            "priority": 3
                          }
                        ]
                      },
                      "validationInfo": {
                        "expectedLineRange": "1-3402",
                        "estimatedTokens": 72159,
                        "qualityScore": 0
                      }
                    }
                  },
                  "splitQuality": 73
                },
                "batchIndex": 1,
                "totalBatches": 2,
                "processingOrder": 1
              },
              {
                "type": "large_file_chunk",
                "batchId": "large_file_1_2",
                "strategy": "largeMulti",
                "estimatedTokens": 5784,
                "fileCount": 1,
                "files": [
                  {
                    "path": "index.js",
                    "tokenCount": 13851,
                    "size": 23136,
                    "language": "javascript",
                    "originalIndex": 0,
                    "priority": 1
                  }
                ],
                "chunkInfo": {
                  "chunkIndex": 2,
                  "totalChunks": 2,
                  "startLine": 2903,
                  "endLine": 3509,
                  "content": "// Chunk 2 - Generated by FunctionBoundaryDetector\n\n### 重点要求\n- **完整性**: 覆盖项目的所有重要方面\n- **可读性**: 结构清晰，易于理解和导航\n- **实用性**: 提供实际的使用和开发指导  \n- **准确性**: 基于实际的代码分析结果\n- **连贯性**: 各文档间保持一致的风格和结构\n\n**🎉 完成此步骤后，整个6步init工作流将全部完成！**\n          `;\n          \n          // 存储Step6结果并标记完成\n          initState.stepResults.step6 = {\n            architecturePrompt: architecturePrompt.trim(),\n            completedAt: new Date().toISOString(),\n            docsDirectory: docsDir\n          };\n          initState.stepsCompleted.push('step6');\n          initState.currentStep = 6;\n          initState.completed = true;\n          initState.completedAt = new Date().toISOString();\n          \n          // Step6完成后，清理所有临时文件（最终步骤）\n          try {\n            const cleanupResult = cleanupTempFiles(projectPath);\n            console.log(`[Step6-Cleanup] 初始化完成，清理临时文件: 删除${cleanupResult.cleaned}个临时文件，保留${cleanupResult.kept}个`);\n            \n            // 保存清理信息到状态中\n            initState.stepResults.step6.cleanupInfo = {\n              tempFilesDeleted: cleanupResult.cleaned,\n              tempFilesKept: cleanupResult.kept,\n              cleanupCompletedAt: new Date().toISOString()\n            };\n          } catch (cleanupError) {\n            console.warn(`[Step6-Cleanup] 清理临时文件时出现警告: ${cleanupError.message}`);\n            initState.stepResults.step6.cleanupWarning = cleanupError.message;\n          }\n          \n          return {\n            content: [\n              {\n                type: \"text\",\n                text: JSON.stringify({\n                  currentStep: 6,\n                  stepName: 'architecture-docs',\n                  status: \"task_created\",\n                  \n                  // 统一任务管理器信息\n                  taskManager: {\n                    taskId: task.id,\n                    taskStatus: task.status,\n                    taskType: 'architecture_docs',\n                    createdAt: task.createdAt,\n                    validation: {\n                      tool: 'init_step3_check_task_completion',\n                      params: {\n                        taskId: task.id,\n                        projectPath: resolve(projectPath),\n                        stepType: 'step6'\n                      }\n                    },\n                    isFinalStep: true\n                  },\n                  \n                  // Step6 AI指导提示词 (最终步骤)\n                  aiInstructions: architecturePrompt.trim(),\n                  \n                  // 文档体系信息\n                  documentationSystem: {\n                    docsDirectory: docsDir,\n                    totalFiles: initState.documentCount || 0,\n                    generatedDocs: initState.generatedDocs?.length || 0,\n                    expectedFinalDocs: [\n                      `${docsDir}/README.md`,\n                      `${docsDir}/architecture.md`,\n                      `${docsDir}/development.md`,\n                      `${docsDir}/docs-index.md`\n                    ]\n                  },\n                  \n                  // 完成状态\n                  workflow: {\n                    current_step: \"6/6 - 架构文档生成 (最终步骤)\",\n                    status: \"task_ready\",\n                    next_steps: [{\n                      tool: \"init_step3_check_task_completion\",\n                      description: \"检查架构文档生成任务完成情况\",\n                      suggested_params: {\n                        taskId: task.id,\n                        projectPath: resolve(projectPath),\n                        stepType: 'step6'\n                      },\n                      why: \"完成架构文档生成后，验证并完成整个初始化流程\"\n                    }],\n                    completion: {\n                      message: \"🎉 Init工作流即将完成！\",\n                      totalSteps: 6,\n                      allStepsCompleted: false, // 任务创建完成，但还需要验证\n                      finalTask: \"完成架构文档生成并通过验证后，整个初始化流程将全部完成\"\n                    },\n                    progress: {\n                      completed: 6,\n                      total: 6,\n                      percentage: 100\n                    }\n                  },\n                  \n                  // 最终总结\n                  initSummary: {\n                    projectPath: resolve(projectPath),\n                    docsGenerated: docsDir,\n                    filesProcessed: initState.documentCount || 0,\n                    stepsCompleted: initState.stepsCompleted,\n                    startedAt: initState.startedAt,\n                    totalDuration: initState.startedAt ? \n                      Math.round((new Date() - new Date(initState.startedAt)) / 1000 / 60) + '分钟' : '未知'\n                  },\n                  \n                  success: true,\n                  message: \"Step6: 架构文档生成任务已创建，请按照提示完成后使用验证工具检查\"\n                }, null, 2)\n              }\n            ]\n          };\n          } catch (error) {\n            console.error(`[Step6] UnifiedTaskManager 集成失败: ${error.message}`);\n            // 回退到传统实现作为备选方案\n            return {\n              content: [{\n                type: \"text\",\n                text: JSON.stringify({\n                  error: true,\n                  message: `Step6 统一任务管理失败: ${error.message}`,\n                  fallback: \"使用传统模式处理\",\n                  tool: name,\n                  suggestion: \"请检查 UnifiedTaskManager 服务状态\"\n                }, null, 2)\n              }]\n            };\n          }\n        }\n        \n        case \"workflow_guide\": {\n          const { workflow, currentStep, projectPath } = args;\n          \n          console.log(`[MCP-WorkflowGuide] 获取工作流指引 - 类型: ${workflow || 'init'}`);\n          \n          // 使用内置的工作流指引（不依赖外部服务）\n          {\n            // 内置的工作流指引\n            const workflowGuides = {\n              init: {\n                workflow_name: \"项目初始化工作流\",\n                description: \"完整的6步文档生成流程，提供从分析到最终文档的全程指导\",\n                total_steps: 6,\n                steps: [\n                  {\n                    step: 1,\n                    name: \"项目分析\",\n                    tool: \"init_step1_project_analysis\",\n                    description: \"深度分析项目结构、语言特征、依赖关系，生成基础数据包\",\n                    required_params: {\n                      projectPath: \"项目根目录的绝对路径\"\n                    },\n                    optional_params: {\n                      maxDepth: \"目录扫描深度（默认3层）\",\n                      includeFiles: \"额外要包含的文件模式\",\n                      maxKeyFileSize: \"关键文件最大字节数（默认50KB）\"\n                    },\n                    expected_output: \"项目概览包，包含语言分析、架构分析、文件清单\",\n                    why: \"建立项目基础信息，为后续步骤提供数据支持\"\n                  },\n                  {\n                    step: 2,\n                    name: \"任务创建\",\n                    tool: \"init_step2_create_todos\",\n                    description: \"基于项目分析结果，创建详细的AI处理任务列表\",\n                    prerequisites: [\"必须先完成init_step1_project_analysis\"],\n                    required_params: {\n                      projectPath: \"项目根目录的绝对路径\"\n                    },\n                    optional_params: {\n                      batchSize: \"批次大小（默认3）\",\n                      includeAnalysisTasks: \"包含分析任务（默认true）\",\n                      includeSummaryTasks: \"包含总结任务（默认true）\"\n                    },\n                    expected_output: \"AI任务列表、处理计划、时间预估\",\n                    why: \"制定详细的文档生成计划，为文件处理做准备\"\n                  },\n                  {\n                    step: 3,\n                    name: \"文件文档生成\",\n                    tool: \"init_step3_get_next_task\",\n                    description: \"开始逐个处理文件，生成详细的技术文档（循环步骤）\",\n                    prerequisites: [\"必须先完成init_step2_create_todos\"],\n                    required_params: {\n                      projectPath: \"项目根目录的绝对路径\"\n                    },\n                    sub_tools: [\n                      \"init_step3_get_next_task - 获取下一个文件任务\",\n                      \"init_step3_get_file_content - 获取文件内容\",\n                      \"init_step3_check_task_completion - 验证任务完成状态（新验证机制）\"\n                    ],\n                    expected_output: \"每个源码文件的详细技术文档\",\n                    why: \"为每个重要文件生成详细分析，建立代码库文档基础\"\n                  },\n                  {\n                    step: 4,\n                    name: \"模块整合\",\n                    tool: \"init_step4_module_integration\",\n                    description: \"基于文件文档进行模块化整合分析\",\n                    prerequisites: [\"必须先完成Step3所有文件处理\"],\n                    required_params: {\n                      projectPath: \"项目根目录的绝对路径\"\n                    },\n                    expected_output: \"模块整合指导、依赖关系分析、架构梳理提示\",\n                    why: \"将文件级文档整合为模块级架构，识别系统设计模式\"\n                  },\n                  {\n                    step: 5,\n                    name: \"模块关联分析\",\n                    tool: \"init_step5_module_relations\",\n                    description: \"详细阐述每个文件之间的关联，分析函数调用关系\",\n                    prerequisites: [\"必须先完成init_step4_module_integration\"],\n                    required_params: {\n                      projectPath: \"项目根目录的绝对路径\"\n                    },\n                    expected_output: \"函数调用关系图、模块依赖分析、数据流向图\",\n                    why: \"分析模块间的深度关联，识别关键节点和依赖关系\"\n                  },\n                  {\n                    step: 6,\n                    name: \"架构文档生成\",\n                    tool: \"init_step6_architecture_docs\",\n                    description: \"生成README、架构图、项目总览等最终文档（最终步骤）\",\n                    prerequisites: [\"必须先完成init_step5_module_relations\"],\n                    required_params: {\n                      projectPath: \"项目根目录的绝对路径\"\n                    },\n                    expected_output: \"README.md、architecture.md、development.md、完整文档索引\",\n                    why: \"生成最终的架构文档和项目总览，完成整个文档体系\"\n                  }\n                ],\n                next_action: {\n                  if_not_started: \"调用 init_step1_project_analysis 开始完整的初始化流程\",\n                  if_step1_done: \"调用 init_step2_create_todos 创建任务列表\",\n                  if_step2_done: \"调用 init_step3_get_next_task 开始文件处理循环\",\n                  if_step3_done: \"调用 init_step4_module_integration 进行模块整合\",\n                  if_step4_done: \"调用 init_step5_module_relations 进行关联分析\",\n                  if_step5_done: \"调用 init_step6_architecture_docs 生成架构文档\",\n                  if_completed: \"🎉 所有步骤已完成！使用 get_init_status 查看最终状态\"\n                },\n                workflow_features: [\n                  \"🔄 逐步执行：每个步骤都有明确的输入输出和下一步指导\",\n                  \"📊 进度跟踪：每个工具都会提供当前进度和完成状态\",\n                  \"🧠 AI协作：每个步骤都包含详细的AI处理指导\",\n                  \"📁 自动保存：所有生成的文档都会保存到项目的mg_kiro/目录\",\n                  \"🔗 状态管理：自动管理项目状态，支持断点续传\",\n                  \"✅ 完整验证：每步都会验证前置条件，确保流程正确执行\"\n                ],\n                tips: [\n                  \"建议使用绝对路径作为 projectPath 参数\",\n                  \"Step3是循环步骤，需要重复调用直到所有文件处理完成\",\n                  \"每个工具的返回结果都包含详细的下一步指导\",\n                  \"生成的文档位于项目根目录的 mg_kiro/ 文件夹中\",\n                  \"可以随时使用 get_init_status 查看当前进度\",\n                  \"如需重新开始，使用 reset_init 重置所有状态\"\n                ]\n              },\n              status: {\n                workflow_name: \"状态查询工作流\",\n                description: \"查看当前工作流状态和进度\",\n                tools: [\"get_init_status\", \"reset_init\"],\n                next_action: \"调用 get_init_status 查看状态，或 reset_init 重置流程\"\n              }\n            };\n            \n            const selectedWorkflow = workflowGuides[workflow || 'init'];\n            \n            return {\n              content: [\n                {\n                  type: \"text\",\n                  text: JSON.stringify({\n                    workflow_guide: selectedWorkflow,\n                    current_step: currentStep || null,\n                    project_path: projectPath || null,\n                    available_workflows: Object.keys(workflowGuides),\n                    version: \"4.0-complete-6-steps\",\n                    message: \"根据上述指引，按顺序调用相应的工具完成工作流\"\n                  }, null, 2)\n                }\n              ]\n            };\n          }\n        }\n        \n        \n        case \"get_init_status\": {\n          const { projectPath } = args;\n          \n          console.log(`[MCP-InitStatus] 获取完整的6步工作流状态`);\n          \n          if (projectPath) {\n            // 获取特定项目的状态\n            const projectState = getProjectStateEnhanced(projectPath);\n            \n            return {\n              content: [\n                {\n                  type: \"text\",\n                  text: JSON.stringify({\n                    projectPath: resolve(projectPath),\n                    currentStep: projectState.currentStep,\n                    stepsCompleted: projectState.stepsCompleted,\n                    totalSteps: 6,\n                    progress: {\n                      percentage: Math.round((projectState.stepsCompleted.length / 6) * 100),\n                      completed: projectState.stepsCompleted.length,\n                      remaining: 6 - projectState.stepsCompleted.length\n                    },\n                    status: projectState.currentStep === 0 ? 'not_started' : \n                           projectState.completed ? 'completed' : 'in_progress',\n                    startedAt: projectState.startedAt,\n                    completedAt: projectState.completedAt,\n                    documentCount: projectState.documentCount || 0,\n                    generatedDocs: projectState.generatedDocs || [],\n                    nextStep: projectState.currentStep < 6 ? {\n                      step: projectState.currentStep + 1,\n                      tool: `init_step${projectState.currentStep + 1}_${\n                        ['project_analysis', 'create_todos', 'get_next_task', \n                         'module_integration', 'module_relations', 'architecture_docs'][projectState.currentStep]\n                      }`\n                    } : null,\n                    workflowVersion: \"4.0-complete-6-steps\"\n                  }, null, 2)\n                }\n              ]\n            };\n          } else {\n            // 返回系统整体状态\n            return {\n              content: [\n                {\n                  type: \"text\",\n                  text: JSON.stringify({\n                    systemStatus: \"ready\",\n                    availableTools: [\n                      \"workflow_guide - 获取完整工作流指引\",\n                      \"init_step1_project_analysis - 项目分析\",\n                      \"init_step2_create_todos - 创建AI任务列表\",\n                      \"init_step3_get_next_task - 获取下一个文件任务\",\n                      \"init_step3_get_file_content - 获取文件内容\",\n                      \"init_step3_check_task_completion - 验证文件处理任务完成\",\n                      \"init_step4_module_integration - 模块整合\",\n                      \"init_step5_module_relations - 模块关联分析\",\n                      \"init_step6_architecture_docs - 架构文档生成\",\n                      \"get_init_status - 获取状态信息\",\n                      \"reset_init - 重置流程\"\n                    ],\n                    workflowVersion: \"4.0-complete-6-steps\",\n                    totalSteps: 6,\n                    description: \"完整的6步文档生成流程，提供从分析到最终文档的全程指导\",\n                    usage: \"使用 workflow_guide 工具获取完整的使用指引\"\n                  }, null, 2)\n                }\n              ]\n            };\n          }\n        }\n        \n        case \"reset_init\": {\n          console.log(`[MCP-AutoReset] 重置流程状态（增强版）`);\n          \n          // 新增：支持可选的项目路径参数\n          const { projectPath } = args || {};\n          \n          let cleanupResults = {};\n          if (projectPath) {\n            try {\n              // 新增：清理任务上下文（解决AI调用断档问题）\n              const normalizedPath = resolve(projectPath);\n              const hadContext = currentTaskContexts.has(normalizedPath);\n              clearCurrentTaskContext(projectPath);\n              \n              // 清理指定项目的临时文件\n              cleanupResults = cleanupTempFiles(projectPath);\n              console.log(`[Reset] 清理项目 ${projectPath}: 删除${cleanupResults.cleaned}个临时文件，任务上下文已清理: ${hadContext}`);\n              \n              // 清除内存状态\n              projectStates.delete(normalizedPath);\n              \n              // 清理UnifiedTaskManager中的项目数据（如果支持特定项目清理）\n              // UnifiedTaskManager目前使用全局重置，项目级清理在全局重置中处理\n              \n              cleanupResults.taskContextCleared = hadContext;\n              cleanupResults.projectStateCleared = true;\n              \n            } catch (error) {\n              console.warn(`[Reset] 清理项目 ${projectPath} 时出现错误: ${error.message}`);\n              cleanupResults.error = error.message;\n            }\n          } else {\n            // 全局重置：清理所有内存状态和任务上下文\n            const projectCount = projectStates.size;\n            const contextCount = currentTaskContexts.size;\n            \n            projectStates.clear();\n            currentTaskContexts.clear(); // 清理所有任务上下文\n            \n            // 清理UnifiedTaskManager数据\n            const unifiedTaskManager = serviceBus.get('unifiedTaskManager');\n            if (unifiedTaskManager) {\n              await unifiedTaskManager.reset();\n              console.log(`[Reset] UnifiedTaskManager已重置`);\n            }\n            \n            console.log(`[Reset] 全局清理完成: ${projectCount}个项目状态，${contextCount}个任务上下文`);\n            \n            cleanupResults = {\n              projectStatesCleared: projectCount,\n              taskContextsCleared: contextCount,\n              globalReset: true\n            };\n          }\n          \n          const result = claudeCodeInit.reset();\n          \n          return {\n            content: [\n              {\n                type: \"text\",\n                text: JSON.stringify({\n                  ...result,\n                  nextStep: \"调用 init_step1_project_analysis 开始新的6步Init流程\",\n                  automationEnhanced: true,\n                  version: \"4.0-complete-6-steps-automated\",\n                  cleanupResults: cleanupResults, // 增强的清理结果信息\n                  \n                  // 新增：自动化功能说明\n                  automationFeatures: {\n                    smartParameterCompletion: \"AI调用工具时自动补全参数\",\n                    contextManagement: \"自动维护任务上下文，避免断档\",\n                    errorRecovery: \"智能错误恢复和建议\",\n                    seamlessWorkflow: \"工具间无缝衔接，减少手动参数传递\"\n                  },\n                  \n                  improvedUserExperience: {\n                    before: \"AI需要手动管理taskId和relativePath参数\",\n                    after: \"AI只需提供projectPath，其他参数自动补全\",\n                    benefit: \"大幅减少调用断档，提升工作流连续性\"\n                  }\n                }, null, 2)\n              }\n            ]\n          };\n        }\n        \n        default:\n          return {\n            content: [{\n              type: \"text\",\n              text: JSON.stringify({ error: true, message: `未知的工具: ${name}. 可用工具: workflow_guide, init_step1_project_analysis, init_step2_create_todos, init_step2_file_analysis, init_step3_get_next_task, init_step3_get_file_content, init_step3_generate_analysis, init_step3_check_task_completion, init_step4_module_integration, init_step5_module_relations, init_step6_architecture_docs, get_init_status, reset_init`, tool: name }, null, 2)\n            }]\n          };\n      }\n    } catch (error) {\n      console.error(`[MCP-6Steps] 工具执行失败: ${name}`, error);\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify({\n              error: true,\n              message: error.message,\n              tool: name,\n              version: \"4.0-complete-6-steps\",\n              suggestion: \"请检查工具名称和参数。主要工具: workflow_guide(获取工作流指引), init_step1_project_analysis(开始6步流程)\",\n              availableTools: [\n                \"generate_project_overview - 生成项目概览包\",\n                \"progressive_documentation - 渐进式文档生成\",\n                \"get_init_status - 获取状态信息\", \n                \"reset_init - 重置流程\"\n              ]\n            }, null, 2)\n          }\n        ]\n      };\n    }\n  });\n\n  // 启动MCP服务器\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n  \n  console.log(\"\\n✅ mg_kiro MCP服务器已启动 (stdio模式) - v5.0.0-complete-6-steps-redesigned\");\n  console.log(\"🚀 重新设计的完整6步Init工作流已就绪\");\n  console.log(\"🤖 支持工具: workflow_guide, init_step1-6 (文件分析→模块整合→关联分析→架构文档)\");\n  console.log(\"📡 等待Claude Code客户端连接...\\n\");\n}\n\n// ========== Step3文件路径计算函数 ==========\n\n/**\n * 根据批次策略生成期望的文件路径\n * @param {string} taskId - 任务ID\n * @param {string} batchStrategy - 批次策略\n * @param {string} fileName - 文件名\n * @param {string} projectPath - 项目路径\n * @returns {Object} 包含expectedFilePath和expectedFileName的对象\n */\nfunction generateExpectedFilePath(taskId, batchStrategy, fileName, projectPath) {\n    const filesDir = resolve(projectPath, 'mg_kiro', 'files');\n    \n    function getFileBaseName(filePath) {\n        const name = filePath.split('/').pop();\n        return name.substring(0, name.lastIndexOf('.')) || name;\n    }\n    \n    // 将文件路径转换为安全的文件名（替换路径分隔符）\n    function sanitizeFileName(filePath) {\n        return filePath.replace(/[\\/\\\\]/g, '_').replace(/[^a-zA-Z0-9_.-]/g, '_');\n    }\n    \n    let expectedFileName;\n    const baseName = fileName ? getFileBaseName(fileName) : 'unknown_file';\n    \n    switch (batchStrategy) {\n        case 'CombinedFileBatch':\n            expectedFileName = `${sanitizeFileName(baseName)}_combined_analysis.md`;\n            break;\n        case 'SingleFileBatch':\n            expectedFileName = `${sanitizeFileName(baseName)}_analysis.md`;\n            break;\n        case 'LargeFileMultiBatch':\n            // 从taskId中提取子批次编号 (task_3_1, task_3_2)\n            const subBatchMatch = taskId.match(/_(\\d+)$/);\n            const subBatchId = subBatchMatch ? subBatchMatch[1] : '1';\n            expectedFileName = `${sanitizeFileName(baseName)}_part${subBatchId}_analysis.md`;\n            break;\n        case 'combined':\n            // 对于批次任务，使用第一个文件的名称\n            expectedFileName = `${sanitizeFileName(baseName)}_batch_analysis.md`;\n            break;\n        default:\n            // 通用格式：基于实际文件名\n            expectedFileName = `${sanitizeFileName(baseName)}_analysis.md`;\n            break;\n    }\n    \n    const expectedFilePath = resolve(filesDir, expectedFileName);\n    \n    return {\n        expectedFilePath,\n        expectedFileName,\n        filesDir,\n        relativePath: `mg_kiro/files/${expectedFileName}`\n    };\n}\n\n// WebSocket消息处理\nfunction handleWebSocketMessage(ws, data, serviceBus) {\n  const { type, payload } = data;\n  \n  switch (type) {\n    case 'init':\n      // 处理Init请求 - 使用新的MCP协议服务\n      const { projectPath } = payload;\n      const claudeCodeInit = serviceBus.get('claudeCodeInit');\n      \n      try {\n        claudeCodeInit.initialize(resolve(projectPath));\n        ws.send(JSON.stringify({\n          type: 'init_started',\n          message: 'Init流程已启动，请使用MCP工具进行分步执行',\n          availableTools: [\n            'init_step1_data_collection',\n            'init_step2_architecture',\n            'init_step3_deep_analysis',\n            'init_step4_module_docs',\n            'init_step5_contracts'\n          ]\n        }));\n      } catch (error) {\n        ws.send(JSON.stringify({\n          type: 'error',\n          error: error.message\n        }));\n      }\n      break;\n      \n    case 'status':\n      // 获取状态\n      const initState = serviceBus.get('initState');\n      const status = initState ? initState.getProgress() : { status: 'idle' };\n      ws.send(JSON.stringify({\n        type: 'status',\n        status\n      }));\n      break;\n      \n    default:\n      ws.send(JSON.stringify({\n        type: 'error',\n        error: `未知的消息类型: ${type}`\n      }));\n  }\n}",
                  "type": "remainder"
                },
                "parentFileInfo": {
                  "path": "index.js",
                  "totalTokens": 28530,
                  "originalIndex": 0
                },
                "metadata": {
                  "strategy": "largeMulti",
                  "fileCount": 1,
                  "description": "大文件分割 2/2 - index.js (13,851 tokens, 行 2903-3509) - remainder",
                  "efficiency": 70,
                  "processingHints": {
                    "recommended": true,
                    "maxTokensPerChunk": 1200,
                    "strategy": "function_boundary",
                    "enableBoundaryDetection": true,
                    "isFirstChunk": false,
                    "isLastChunk": true,
                    "analysisDepth": "comprehensive",
                    "focusAreas": [
                      "code_structure",
                      "logic_flow",
                      "dependencies"
                    ],
                    "specialInstructions": [
                      "这是文件的最后部分，请特别关注导出和总结"
                    ],
                    "contextAware": true,
                    "requiresIntegration": true,
                    "contextInfo": {
                      "fileContext": {
                        "totalChunks": 2,
                        "currentChunk": 2,
                        "fileImportance": 50,
                        "filePath": "index.js"
                      },
                      "chunkContext": {
                        "precedingChunks": 1,
                        "followingChunks": 0,
                        "relativePosition": 1,
                        "estimatedComplexity": 3.7702
                      },
                      "integrationHints": {
                        "needsContextFromPrevious": true,
                        "providesContextForNext": false,
                        "standaloneAnalysis": false
                      }
                    },
                    "reconstructionInfo": {
                      "sequenceInfo": {
                        "position": 2,
                        "total": 2,
                        "isPartial": true
                      },
                      "mergingHints": {
                        "requiresOrdering": true,
                        "hasOverlap": false,
                        "integrationPoints": []
                      },
                      "validationInfo": {
                        "expectedLineRange": "2903-3509",
                        "estimatedTokens": 13851,
                        "qualityScore": 0
                      }
                    }
                  },
                  "splitQuality": 70
                },
                "batchIndex": 2,
                "totalBatches": 2,
                "processingOrder": 2
              }
            ],
            "errorHandling": []
          },
          "taskDefinitions": [
            {
              "id": "task_1",
              "type": "file_batch",
              "strategy": "combined",
              "status": "pending",
              "files": [
                "server/services/file-query-service.js",
                "server/services/project-overview-generator.js"
              ],
              "estimatedTokens": 17695,
              "metadata": {
                "batchId": "batch_1",
                "strategy": "combined",
                "fileCount": 2,
                "type": "file_batch",
                "projectPath": "unknown",
                "primaryFile": {
                  "relativePath": "server/services/file-query-service.js",
                  "fileName": "file-query-service.js",
                  "fileSize": 0,
                  "language": "javascript",
                  "estimatedTokens": 0
                },
                "chunkingAdvice": {
                  "analysisDepth": "comprehensive",
                  "contextAware": true,
                  "crossFileReferences": true,
                  "preserveRelationships": true,
                  "avgTokensPerFile": 8848,
                  "directories": [
                    "services"
                  ],
                  "extensions": [
                    "js"
                  ],
                  "modules": [
                    "server"
                  ]
                },
                "strategySpecific": {
                  "fileCount": 2,
                  "batchType": "combined_batch",
                  "allFiles": [
                    {
                      "path": "server/services/file-query-service.js",
                      "tokenCount": 0,
                      "size": 40615,
                      "language": "javascript"
                    },
                    {
                      "path": "server/services/project-overview-generator.js",
                      "tokenCount": 0,
                      "size": 40521,
                      "language": "javascript"
                    }
                  ]
                },
                "allFiles": [
                  {
                    "path": "server/services/file-query-service.js",
                    "tokenCount": 0,
                    "size": 40615,
                    "language": "javascript"
                  },
                  {
                    "path": "server/services/project-overview-generator.js",
                    "tokenCount": 0,
                    "size": 40521,
                    "language": "javascript"
                  }
                ],
                "multiFileCount": 2
              },
              "timing": {
                "createdAt": "2025-09-12T10:09:54.806Z",
                "estimatedDuration": null
              }
            },
            {
              "id": "task_2",
              "type": "file_batch",
              "strategy": "combined",
              "status": "pending",
              "files": [
                "server/services/response-service.js",
                "server/services/config-service.js",
                "server/services/service-bus.js",
                "server/services/service-registry.js",
                "server/services/smart-content-trimmer.js",
                "server/interfaces/TaskDefinition.js",
                "server/services/language-intelligence-service.js"
              ],
              "estimatedTokens": 18804,
              "metadata": {
                "batchId": "batch_2",
                "strategy": "combined",
                "fileCount": 7,
                "type": "file_batch",
                "projectPath": "unknown",
                "primaryFile": {
                  "relativePath": "server/services/response-service.js",
                  "fileName": "response-service.js",
                  "fileSize": 0,
                  "language": "javascript",
                  "estimatedTokens": 0
                },
                "chunkingAdvice": {
                  "analysisDepth": "comprehensive",
                  "contextAware": true,
                  "crossFileReferences": true,
                  "preserveRelationships": true,
                  "avgTokensPerFile": 2686,
                  "directories": [
                    "services",
                    "interfaces"
                  ],
                  "extensions": [
                    "js"
                  ],
                  "modules": [
                    "server"
                  ]
                },
                "strategySpecific": {
                  "fileCount": 7,
                  "batchType": "combined_batch",
                  "allFiles": [
                    {
                      "path": "server/services/response-service.js",
                      "tokenCount": 0,
                      "size": 2668,
                      "language": "javascript"
                    },
                    {
                      "path": "server/services/config-service.js",
                      "tokenCount": 0,
                      "size": 9827,
                      "language": "javascript"
                    },
                    {
                      "path": "server/services/service-bus.js",
                      "tokenCount": 0,
                      "size": 8689,
                      "language": "javascript"
                    },
                    {
                      "path": "server/services/service-registry.js",
                      "tokenCount": 0,
                      "size": 8571,
                      "language": "javascript"
                    },
                    {
                      "path": "server/services/smart-content-trimmer.js",
                      "tokenCount": 0,
                      "size": 11576,
                      "language": "javascript"
                    },
                    {
                      "path": "server/interfaces/TaskDefinition.js",
                      "tokenCount": 0,
                      "size": 20370,
                      "language": "javascript"
                    },
                    {
                      "path": "server/services/language-intelligence-service.js",
                      "tokenCount": 0,
                      "size": 22062,
                      "language": "javascript"
                    }
                  ]
                },
                "allFiles": [
                  {
                    "path": "server/services/response-service.js",
                    "tokenCount": 0,
                    "size": 2668,
                    "language": "javascript"
                  },
                  {
                    "path": "server/services/config-service.js",
                    "tokenCount": 0,
                    "size": 9827,
                    "language": "javascript"
                  },
                  {
                    "path": "server/services/service-bus.js",
                    "tokenCount": 0,
                    "size": 8689,
                    "language": "javascript"
                  },
                  {
                    "path": "server/services/service-registry.js",
                    "tokenCount": 0,
                    "size": 8571,
                    "language": "javascript"
                  },
                  {
                    "path": "server/services/smart-content-trimmer.js",
                    "tokenCount": 0,
                    "size": 11576,
                    "language": "javascript"
                  },
                  {
                    "path": "server/interfaces/TaskDefinition.js",
                    "tokenCount": 0,
                    "size": 20370,
                    "language": "javascript"
                  },
                  {
                    "path": "server/services/language-intelligence-service.js",
                    "tokenCount": 0,
                    "size": 22062,
                    "language": "javascript"
                  }
                ],
                "multiFileCount": 7
              },
              "timing": {
                "createdAt": "2025-09-12T10:09:54.806Z",
                "estimatedDuration": null
              }
            },
            {
              "id": "task_3",
              "type": "file_batch",
              "strategy": "combined",
              "status": "pending",
              "files": [
                "jest.config.js",
                "scripts/test-service-registry.js",
                "server/interfaces/TokenResult.js",
                "server/interfaces/BatchResult.js",
                "server/utils/Logger.js",
                "server/language/detector.js",
                "server/interfaces/ErrorResult.js",
                "server/language/prompt-intelligence.js"
              ],
              "estimatedTokens": 19563,
              "metadata": {
                "batchId": "batch_3",
                "strategy": "combined",
                "fileCount": 8,
                "type": "file_batch",
                "projectPath": "unknown",
                "primaryFile": {
                  "relativePath": "jest.config.js",
                  "fileName": "jest.config.js",
                  "fileSize": 0,
                  "language": "javascript",
                  "estimatedTokens": 0
                },
                "chunkingAdvice": {
                  "analysisDepth": "comprehensive",
                  "contextAware": true,
                  "crossFileReferences": true,
                  "preserveRelationships": true,
                  "avgTokensPerFile": 2445,
                  "directories": [
                    "root",
                    "scripts",
                    "interfaces",
                    "utils",
                    "language"
                  ],
                  "extensions": [
                    "js"
                  ],
                  "modules": [
                    "unknown",
                    "server"
                  ]
                },
                "strategySpecific": {
                  "fileCount": 8,
                  "batchType": "combined_batch",
                  "allFiles": [
                    {
                      "path": "jest.config.js",
                      "tokenCount": 0,
                      "size": 826,
                      "language": "javascript"
                    },
                    {
                      "path": "scripts/test-service-registry.js",
                      "tokenCount": 0,
                      "size": 5271,
                      "language": "javascript"
                    },
                    {
                      "path": "server/interfaces/TokenResult.js",
                      "tokenCount": 0,
                      "size": 10160,
                      "language": "javascript"
                    },
                    {
                      "path": "server/interfaces/BatchResult.js",
                      "tokenCount": 0,
                      "size": 11258,
                      "language": "javascript"
                    },
                    {
                      "path": "server/utils/Logger.js",
                      "tokenCount": 0,
                      "size": 12525,
                      "language": "javascript"
                    },
                    {
                      "path": "server/language/detector.js",
                      "tokenCount": 0,
                      "size": 14782,
                      "language": "javascript"
                    },
                    {
                      "path": "server/interfaces/ErrorResult.js",
                      "tokenCount": 0,
                      "size": 13981,
                      "language": "javascript"
                    },
                    {
                      "path": "server/language/prompt-intelligence.js",
                      "tokenCount": 0,
                      "size": 19744,
                      "language": "javascript"
                    }
                  ]
                },
                "allFiles": [
                  {
                    "path": "jest.config.js",
                    "tokenCount": 0,
                    "size": 826,
                    "language": "javascript"
                  },
                  {
                    "path": "scripts/test-service-registry.js",
                    "tokenCount": 0,
                    "size": 5271,
                    "language": "javascript"
                  },
                  {
                    "path": "server/interfaces/TokenResult.js",
                    "tokenCount": 0,
                    "size": 10160,
                    "language": "javascript"
                  },
                  {
                    "path": "server/interfaces/BatchResult.js",
                    "tokenCount": 0,
                    "size": 11258,
                    "language": "javascript"
                  },
                  {
                    "path": "server/utils/Logger.js",
                    "tokenCount": 0,
                    "size": 12525,
                    "language": "javascript"
                  },
                  {
                    "path": "server/language/detector.js",
                    "tokenCount": 0,
                    "size": 14782,
                    "language": "javascript"
                  },
                  {
                    "path": "server/interfaces/ErrorResult.js",
                    "tokenCount": 0,
                    "size": 13981,
                    "language": "javascript"
                  },
                  {
                    "path": "server/language/prompt-intelligence.js",
                    "tokenCount": 0,
                    "size": 19744,
                    "language": "javascript"
                  }
                ],
                "multiFileCount": 8
              },
              "timing": {
                "createdAt": "2025-09-12T10:09:54.806Z",
                "estimatedDuration": null
              }
            },
            {
              "id": "task_4",
              "type": "large_file_chunk",
              "strategy": "largeMulti",
              "status": "pending",
              "files": [
                "index.js"
              ],
              "estimatedTokens": 30079,
              "metadata": {
                "batchId": "large_file_1_1",
                "strategy": "largeMulti",
                "fileCount": 1,
                "type": "large_file_chunk",
                "projectPath": "unknown",
                "primaryFile": {
                  "relativePath": "index.js",
                  "fileName": "index.js",
                  "fileSize": 0,
                  "language": "javascript",
                  "estimatedTokens": 0
                },
                "chunkingAdvice": {
                  "recommended": true,
                  "maxTokensPerChunk": 1200,
                  "strategy": "function_boundary",
                  "enableBoundaryDetection": true,
                  "isFirstChunk": true,
                  "isLastChunk": false,
                  "analysisDepth": "detailed",
                  "focusAreas": [
                    "code_structure",
                    "logic_flow",
                    "dependencies"
                  ],
                  "specialInstructions": [
                    "这是文件的第一部分，请特别关注整体架构和导入依赖"
                  ],
                  "contextAware": true,
                  "requiresIntegration": true,
                  "contextInfo": {
                    "fileContext": {
                      "totalChunks": 2,
                      "currentChunk": 1,
                      "fileImportance": 50,
                      "filePath": "index.js"
                    },
                    "chunkContext": {
                      "precedingChunks": 0,
                      "followingChunks": 1,
                      "relativePosition": 0.5,
                      "estimatedComplexity": 10
                    },
                    "integrationHints": {
                      "needsContextFromPrevious": false,
                      "providesContextForNext": true,
                      "standaloneAnalysis": false
                    }
                  },
                  "reconstructionInfo": {
                    "sequenceInfo": {
                      "position": 1,
                      "total": 2,
                      "isPartial": true
                    },
                    "mergingHints": {
                      "requiresOrdering": true,
                      "hasOverlap": false,
                      "integrationPoints": [
                        {
                          "type": "module",
                          "line": 12,
                          "priority": 6
                        },
                        {
                          "type": "module",
                          "line": 13,
                          "priority": 6
                        },
                        {
                          "type": "module",
                          "line": 18,
                          "priority": 6
                        },
                        {
                          "type": "module",
                          "line": 19,
                          "priority": 6
                        },
                        {
                          "type": "module",
                          "line": 20,
                          "priority": 6
                        },
                        {
                          "type": "module",
                          "line": 21,
                          "priority": 6
                        },
                        {
                          "type": "module",
                          "line": 22,
                          "priority": 6
                        },
                        {
                          "type": "module",
                          "line": 23,
                          "priority": 6
                        },
                        {
                          "type": "module",
                          "line": 24,
                          "priority": 6
                        },
                        {
                          "type": "module",
                          "line": 25,
                          "priority": 6
                        },
                        {
                          "type": "module",
                          "line": 26,
                          "priority": 6
                        },
                        {
                          "type": "other",
                          "line": 32,
                          "priority": 3
                        },
                        {
                          "type": "other",
                          "line": 68,
                          "priority": 3
                        },
                        {
                          "type": "other",
                          "line": 76,
                          "priority": 3
                        },
                        {
                          "type": "other",
                          "line": 144,
                          "priority": 3
                        },
                        {
                          "type": "other",
                          "line": 587,
                          "priority": 3
                        }
                      ]
                    },
                    "validationInfo": {
                      "expectedLineRange": "1-3402",
                      "estimatedTokens": 72159,
                      "qualityScore": 0
                    }
                  }
                },
                "strategySpecific": {
                  "fileCount": 1,
                  "batchType": "large_file_chunk",
                  "chunkInfo": {
                    "chunkIndex": 1,
                    "totalChunks": 2,
                    "startLine": 1,
                    "endLine": 3402,
                    "parentFileInfo": {
                      "path": "index.js",
                      "totalTokens": 28530,
                      "originalIndex": 0
                    }
                  }
                },
                "chunkIndex": 1,
                "totalChunks": 2,
                "startLine": 1,
                "endLine": 3402,
                "parentFileInfo": {
                  "path": "index.js",
                  "totalTokens": 28530,
                  "originalIndex": 0
                }
              },
              "timing": {
                "createdAt": "2025-09-12T10:09:54.806Z",
                "estimatedDuration": null
              }
            },
            {
              "id": "task_5",
              "type": "large_file_chunk",
              "strategy": "largeMulti",
              "status": "pending",
              "files": [
                "index.js"
              ],
              "estimatedTokens": 5784,
              "metadata": {
                "batchId": "large_file_1_2",
                "strategy": "largeMulti",
                "fileCount": 1,
                "type": "large_file_chunk",
                "projectPath": "unknown",
                "primaryFile": {
                  "relativePath": "index.js",
                  "fileName": "index.js",
                  "fileSize": 0,
                  "language": "javascript",
                  "estimatedTokens": 0
                },
                "chunkingAdvice": {
                  "recommended": true,
                  "maxTokensPerChunk": 1200,
                  "strategy": "function_boundary",
                  "enableBoundaryDetection": true,
                  "isFirstChunk": false,
                  "isLastChunk": true,
                  "analysisDepth": "comprehensive",
                  "focusAreas": [
                    "code_structure",
                    "logic_flow",
                    "dependencies"
                  ],
                  "specialInstructions": [
                    "这是文件的最后部分，请特别关注导出和总结"
                  ],
                  "contextAware": true,
                  "requiresIntegration": true,
                  "contextInfo": {
                    "fileContext": {
                      "totalChunks": 2,
                      "currentChunk": 2,
                      "fileImportance": 50,
                      "filePath": "index.js"
                    },
                    "chunkContext": {
                      "precedingChunks": 1,
                      "followingChunks": 0,
                      "relativePosition": 1,
                      "estimatedComplexity": 3.7702
                    },
                    "integrationHints": {
                      "needsContextFromPrevious": true,
                      "providesContextForNext": false,
                      "standaloneAnalysis": false
                    }
                  },
                  "reconstructionInfo": {
                    "sequenceInfo": {
                      "position": 2,
                      "total": 2,
                      "isPartial": true
                    },
                    "mergingHints": {
                      "requiresOrdering": true,
                      "hasOverlap": false,
                      "integrationPoints": []
                    },
                    "validationInfo": {
                      "expectedLineRange": "2903-3509",
                      "estimatedTokens": 13851,
                      "qualityScore": 0
                    }
                  }
                },
                "strategySpecific": {
                  "fileCount": 1,
                  "batchType": "large_file_chunk",
                  "chunkInfo": {
                    "chunkIndex": 2,
                    "totalChunks": 2,
                    "startLine": 2903,
                    "endLine": 3509,
                    "parentFileInfo": {
                      "path": "index.js",
                      "totalTokens": 28530,
                      "originalIndex": 0
                    }
                  }
                },
                "chunkIndex": 2,
                "totalChunks": 2,
                "startLine": 2903,
                "endLine": 3509,
                "parentFileInfo": {
                  "path": "index.js",
                  "totalTokens": 28530,
                  "originalIndex": 0
                }
              },
              "timing": {
                "createdAt": "2025-09-12T10:09:54.807Z",
                "estimatedDuration": null
              }
            }
          ],
          "strategySummary": {
            "fileDistribution": {
              "small": 17,
              "medium": 0,
              "large": 1,
              "error": 0,
              "total": 18
            },
            "batchDistribution": {
              "combinedBatches": 3,
              "singleBatches": 0,
              "multiBatches": 2,
              "total": 5
            },
            "strategyEfficiency": {
              "averageFilesPerBatch": 3.6,
              "tokenOptimizationRate": {
                "totalTokens": 84592,
                "batchTokenEfficiency": 91925,
                "optimizationPercentage": "108.67"
              }
            },
            "recommendations": []
          },
          "metadata": {
            "projectPath": "/Users/martinezdavid/Documents/MG/code/mg_kiro_mcp",
            "totalFiles": 18,
            "processingTime": 53,
            "timestamp": "2025-09-12T10:09:54.807Z"
          }
        }
      },
      "fileAnalysisInput": {
        "projectPath": "/Users/martinezdavid/Documents/MG/code/mg_kiro_mcp",
        "fileList": [
          {
            "path": "index.js",
            "name": "index.js",
            "size": 141367,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/services/file-query-service.js",
            "name": "file-query-service.js",
            "size": 40615,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/services/project-overview-generator.js",
            "name": "project-overview-generator.js",
            "size": 40521,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/services/language-intelligence-service.js",
            "name": "language-intelligence-service.js",
            "size": 22062,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/interfaces/TaskDefinition.js",
            "name": "TaskDefinition.js",
            "size": 20370,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/language/prompt-intelligence.js",
            "name": "prompt-intelligence.js",
            "size": 19744,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/language/detector.js",
            "name": "detector.js",
            "size": 14782,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/interfaces/ErrorResult.js",
            "name": "ErrorResult.js",
            "size": 13981,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/utils/Logger.js",
            "name": "Logger.js",
            "size": 12525,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/services/smart-content-trimmer.js",
            "name": "smart-content-trimmer.js",
            "size": 11576,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/interfaces/BatchResult.js",
            "name": "BatchResult.js",
            "size": 11258,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/interfaces/TokenResult.js",
            "name": "TokenResult.js",
            "size": 10160,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/services/config-service.js",
            "name": "config-service.js",
            "size": 9827,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/services/service-bus.js",
            "name": "service-bus.js",
            "size": 8689,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/services/service-registry.js",
            "name": "service-registry.js",
            "size": 8571,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "scripts/test-service-registry.js",
            "name": "test-service-registry.js",
            "size": 5271,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "server/services/response-service.js",
            "name": "response-service.js",
            "size": 2668,
            "extension": ".js",
            "isSourceCode": true
          },
          {
            "path": "jest.config.js",
            "name": "jest.config.js",
            "size": 826,
            "extension": ".js",
            "isSourceCode": true
          }
        ],
        "projectMetadata": {
          "name": "mg_kiro_mcp",
          "path": "/Users/martinezdavid/Documents/MG/code/mg_kiro_mcp",
          "lastModified": "2025-09-12T10:07:57.000Z",
          "createdAt": "2025-09-06T14:38:08.793Z",
          "totalFiles": 11,
          "totalSize": "964.79 KB",
          "totalSizeBytes": 987948,
          "fileTypeDistribution": {
            ".md": 5,
            ".json": 3,
            ".js": 2,
            ".xmind": 1
          },
          "languageProfile": {
            "primary": "javascript",
            "secondary": [
              {
                "name": "express",
                "confidence": 33.33333333333333
              }
            ],
            "frameworks": [
              {
                "name": "express",
                "confidence": 33.33333333333333
              }
            ],
            "techStack": {
              "primary": "javascript",
              "frameworks": [
                {
                  "name": "express",
                  "confidence": 33.33333333333333
                }
              ]
            },
            "confidence": 83,
            "detectionSources": [
              "base-detection"
            ],
            "languageStats": {},
            "ecosystem": "javascript"
          }
        },
        "options": {
          "smallFileThreshold": 15000,
          "largeFileThreshold": 20000,
          "batchTargetSize": 18000
        }
      },
      "completedAt": "2025-09-12T10:09:54.808Z"
    }
  },
  "startedAt": "2025-09-12T10:09:44.539Z",
  "error": null,
  "documentCount": 0,
  "generatedDocs": []
}